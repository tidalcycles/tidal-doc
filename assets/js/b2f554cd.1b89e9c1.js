"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/blog_topic_messica_arson","metadata":{"permalink":"/blog/blog_topic_messica_arson","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/blog_topic_messica_arson.md","source":"@site/blog/blog_topic_messica_arson.md","title":"Blog Post by Messica Arson","description":"Check out this great blog post by Messica Arson. It includes details on how to use Tidal Looper (thgrund) with TidalCycles. It also provides insights into Messica\'s unique creative process of sampling and looping screams.","date":"2024-06-11T00:00:00.000Z","formattedDate":"June 11, 2024","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Blog Post by Messica Arson","date":"2024-06-11T00:00:00.000Z"},"nextItem":{"title":"Mandalas and Tidal Cycles","permalink":"/blog/blog_topic_mandalas"}},"content":"Check out this great blog post by Messica Arson. It includes details on how to use [Tidal Looper](https://github.com/thgrund/tidal-looper) (thgrund) with TidalCycles. It also provides insights into Messica\'s unique creative process of sampling and looping screams.\\n\\n## [Harnessing Screams with Tidal Looper](https://dev.to/jessicagarson/harnessing-screams-with-tidal-looper-5hhp)\\n\\nThe post includes a lot of Tidal code samples as well as details on how to install and work with Tidal Looper.\\n\\n\\n[Messica Arson on Bandcamp](https://messicaarson.bandcamp.com)"},{"id":"/blog_topic_mandalas","metadata":{"permalink":"/blog/blog_topic_mandalas","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/blog_topic_mandalas.md","source":"@site/blog/blog_topic_mandalas.md","title":"Mandalas and Tidal Cycles","description":"| Tidal Cyclist | Saachi Kaup                                              |","date":"2023-10-29T00:00:00.000Z","formattedDate":"October 29, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Mandalas and Tidal Cycles","date":"2023-10-29T00:00:00.000Z"},"prevItem":{"title":"Blog Post by Messica Arson","permalink":"/blog/blog_topic_messica_arson"},"nextItem":{"title":"Tidal Profile\xa0-\xa0GEIKHA","permalink":"/blog/tidal_profile_geikha"}},"content":"| Tidal Cyclist | Saachi Kaup                                              |\\n|--------------:|:---------------------------------------------------------|\\n|           aka | SaachiKaup                                               |\\n|      Comments | [Club Tidal Forum Thread](https://club.tidalcycles.org/) |\\n\\nThis year, I made a project involving Tidal Cycles and Mandalas for [Summer of Haskell](https://summer.haskell.org/). As you may well know by now, TidalCycles (or Tidal for short) is a software for making patterns with code. It is used to create patterns of many kinds, from music and visualisations to dance moves for robots. Tidal uses a paradigm called Functional Reactive Programming ([FRP](https://wiki.haskell.org/Functional_Reactive_Programming)) under the hood. This is useful for acts involving continuous time, including composing [music](https://www.cs.yale.edu/homes/hudak/Papers/HSoM.pdf) and [animations](http://conal.net/papers/icfp97/icfp97.pdf). \\n\\n## Mandalas\\n\\n[Mandalas](https://en.wikipedia.org/wiki/Mandala) are geometric designs, created with circles and repeated simple shapes. Weaved squares, concentric circles, intricate triangles and squiggly lines form the piece. They are common in south east asian art, showing up in temples and sand paintings alike. Today they are widely used, to the extent that you find them on shirts and household items.\\n\\nAll the Tidal visualizations I saw were linear. Notes playing forward with time. But mandala art remains _in the same place_. The shapes morph in place, accompanying the rhythms and cycles of the music. The periodic nature of music should reflect in its visuals as well. Thus came the project idea: \\n\\n> Map the underlying structures of Tidal to mandala patterns.\\n\\n\\n## Background \\nFrom all that I found out about mandalas, they are general patterns. They are not really particular to India or any other country. Native American art has some mandalas, so does Tibetan sand art.\\n\\n![](images/mandalas/sand.png)\\n\\n_Tibetan monks take days to painstakingly make these sand paintings. After a while, they let the tides wash over them_\\n\\nNot unlike [euclidean rhythms](https://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf), the underlying structures make the art universal. However, their mathematical symmetry, though obvious, remains undefinable. Mandala art in computers is formed usually through an exploratory process, going back as far as we have generated graphics. Speaking of computers generating graphics:\\n\\n### Fractals \\n\\nSome mandalas are fractal. It\'s an aspect of their underlying\\nmathematics. Arthur C Clarke noted an odd coincidence when he wrote\\nabout mandalas -\\n\\n> \\"\\\\[..\\\\] but indeed the Mandelbrot set does seem to contain an enormous\\n> number of mandalas.\\"\\n\\n![](images/mandalas/11695295665168.png)\\n\\n\\n_Mandalas and Fractals: Visual similarity is obvious._\\n\\n### Languages \\n\\nLanguages like [Processing](https://processing.org/) or libraries such as\\n[p5.js](https://p5js.org/) can produce mandala graphics.\\\\\\nSo why Haskell?\\nNo doubt, the heavy workload should be handled by languages more suited\\nto the task. Even Haskell animation libraries are built as thin wrappers\\non top of the C animation library [OpenGL](https://www.opengl.org/). \\n\\nBut [Haskell](https://tidalcycles.org/docs/innards/haskell/) is particularly well suited to representing these abstract\\npatterns. Mapping its type system with simple shapes could lead to\\nvarying results. How could it be used to map Mandalas onto the existing\\nstructures of Tidal Cycles?\\n\\n## Turtle Graphics \\nTurtle Graphics are a simple graphics system. Typical commands include\\nmove forwards, move left, right and so on. Some of you might be familiar\\nwith it from Python\\\\\'s Turtle graphics library. For the old school ones,\\nMicrosoft\\\\\'s Visual Logo might ring a bell.\\n\\n![](images/mandalas/71695295665170.png)\\n\\n_MSWLogo Interface_\\n\\nAlex and I thought a simple turtle notation might be a good place\\nto start. I explored animation libraries like Gloss, Reanimate and\\nWorldTurtle. [WorldTurtle](https://hackage.haskell.org/package/worldturtle-0.3.1.0/docs/Graphics-WorldTurtle.html#t:TurtleCommand) seemed most suited to the task.\\n\\nWe integrated a basic Turtle Notation within Tidal\\\\\'s parser.\\nUnderstanding the basics of [monadic parsers](https://www.cmi.ac.in/~spsuresh/teaching/prgh15/papers/monadic-parsing.pdf) proved useful.\\nThe system needed to be portable to other libraries, so we created an\\nintermediate notation. Thus began the patterns.\\n\\n### Basic Patterns\\n\\n```\\n\u201cf\u201d: pattern, moves forward with time\\n```\\n![](images/mandalas/image-21696056162615.png)\\n\\n\\n```\\n\u201cf r\u201d: Moves forward in the first half of the cycle, and then moves by 90 degrees in the second.\\n```\\n\\n![](images/mandalas/resized.png)\\n\\n### Mini-notation Magic\\n\\nTidal\'s [Mini-notation](https://tidalcycles.org/docs/reference/mini_notation/) is used for writing patterns of various sorts\\n(notes, samples, parameters).\\n\\nInternally, the mini-notation is parsed as a *shortcut* for a function.\\nYou could otherwise write it using longer *function compositions*.\\n\\n```\\n\u201cf <l r>\u201d: Alternatively moves left and right in each cycle\'s second half.\\n```\\n![](images/mandalas/31695295665169.png)\\n\\n\\n```\\n\u201cf [f f l]\u201d: Starts forming Mandala like patterns.\\n```\\n\\n![](images/mandalas/image-61696055979382.png)\\n\\nBut there was a problem.\\n\\nThe system is not real time. WorldTurtle\'s API does not give low level\\naccess to the time at which the pattern is produced. This leads to\\ngraphics that are only theoretically in sync with music. [Gloss](https://hackage.haskell.org/package/gloss-1.13.2.2/docs/), on top\\nof which WorldTurtle is built, does provide access to time. \\n\\nThere was also the problem of changing patterns in real time. But, by\\nstoring patterns in mutable, shared variables, we could handle this with\\nthreads. This is a work in progress.\\n\\nMeanwhile, Some more patterns:\\n\\n### Ninja Star\\n```\\n\\"f l l [f r r f l l f r r] f l l\\": Mini-notation magic at hand, again.\\n```\\n\\n![](images/mandalas/01695295665169.png)\\n\\n### Honeycomb\\n\\n```\\n\\"f <l r> f <r l r>\\"\\n```\\n\\n![](images/mandalas/71695295665166.png)\\n\\n### Demonic\\n\\n```\\nappend (slowSqueeze \\"1 3 1\\" (\\"[l f, f r]\\")\\n```\\n\\n![](images/mandalas/41695295665168.png)\\n\\n### ChaosMap\\n\\n```\\nslow \u201c1 1 2 3 5 8\u201d \u201cf l l\u201d: Everything is patternable.\\n\\n```\\nAt it\'s base, `\u201cf l l\u201d` on its own produces a simple triangle.\\n\\nThis pattern will slow down each cycle by the first pattern. Slow the first\\nand second parts of the cycle by 1, third part by 2 and so on.\\n\\n![](images/mandalas/21695295665169.png)\\n\\n_A friend who likes physics said it looks like Brownian motion._\\n\\nYou can find more patterns\\n[here](https://accidental-microwave-56b.notion.site/Documenting-Patterns-3bd08d813de34185ae517f35adc6909f?pvs=4 \\"null\\")\\n\\n\\n## ANIMATION AND TIME\\n\\nA [talk](https://www.youtube.com/watch?v=rfmkzp76M4M) by Conal Elliot on [Functional Reactive\\nAnimation](http://conal.net/papers/icfp97/icfp97.pdf) specifies what graphics systems do. They\\nabstract the pixels away. Keep continuous space to work at a higher\\nlevel. This allows for better composition too. You can scale and morph\\nimages without too much difficulty. The task is to use the same methods\\nfor time.\\n\\nRegardless, some things I have learnt in this time: The rich variety of\\n[mandala art](https://accidental-microwave-56b.notion.site/Mandalas-Shared-Refs-bf817a8230ca4cfbaa97b95793f5c083) in many continents; \\\\\\n[L-systems](http://algorithmicbotany.org/papers/abop/abop.pdf)\\nthat produce tree-like structures using grammars and \\\\\\nMusic theory: tones, scales, chord progressions and their mathematical underpinnings.\\n\\n## What Next? \\nThere is the intuition we have that fields of knowledge are interlinked.\\nThat these patterns are present in many areas. But you can\'t work on\\nintuition alone. So how do you confirm it? \\n\\nWell, you can see it. As you watch the pattern form chaotic shapes on a screen, the connection is confirmed. These patterns still have a long way to go. An [FFI](https://ghc.gitlab.haskell.org/ghc/doc/users_guide/javascript.html) could allow JavaScript libraries to produce the animations instead. The new version of Tidal could lead to a new world of possibilities. \\n\\nHowever, the current system does show the structure of Tidal. The ChaosMap pattern, after going haywire in all directions, comes back to its original point. Seemingly random, until the very end when the pattern is visible.  It showcases the underlying mathematical beauty at work. This was the central goal to accomplish."},{"id":"/tidal_profile_geikha","metadata":{"permalink":"/blog/tidal_profile_geikha","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_geikha.md","source":"@site/blog/tidal_profile_geikha.md","title":"Tidal Profile\xa0-\xa0GEIKHA","description":"|          Tidal\xa0Cyclist | GEIKHA                                                     |","date":"2023-10-20T00:00:00.000Z","formattedDate":"October 20, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile\xa0-\xa0GEIKHA","date":"2023-10-20T00:00:00.000Z"},"prevItem":{"title":"Mandalas and Tidal Cycles","permalink":"/blog/blog_topic_mandalas"},"nextItem":{"title":"Tidal Blog Info","permalink":"/blog/about"}},"content":"|          Tidal\xa0Cyclist | GEIKHA                                                     |\\n| ----------------------:|:---------------------------------------------------------- |\\n|               Location | Buenos Aires City                                          |\\n|       Years\xa0with\xa0Tidal | 4\xa0years                                                    |\\n|   Other\xa0LiveCoding\xa0env | Hydra, SuperCollider, Estuary                              |\\n| Music\xa0available\xa0online | [Live sets on YouTube](https://www.youtube.com/@geikha), [Snippets on Instagram](https://www.instagram.com/geikha_) |\\n|            Code\xa0online | [GitHub](https://github.com/geikha/)                       |\\n|   Other\xa0music/audio\xa0sw | FL Studio, iZotope RX, Reaper                              |\\n\\n## About me\\n\\nI was born in Buenos Aires, Argentina. Coming from an artistic family, I grew up learning about music production and image manipulation. And as an internet child (I was born in this millenium), I grew up chronically attached to the computer. I\'ve developed most of my musical knowledge as a Hip-Hop producer and as a musical omnivore. However, nowadays, I\'ve grown away from Hip-Hop to dive into UK Garage and Chicago Footwork specifically.\\n\\nI went to a secondary school specialized on computer sciences, where I learned the basics of programming and software development. What I was taught was super-useful! But it was also very business-oriented, narrowly focused on making me a compliant worker. At some point, maybe when I was 15 I discovered SuperCollider and tried making sounds with it. It was hard for me at the time, and I wouldn\'t get much done, to be honest. 2 years later I discovered TidalCycles and FoxDot and was immediately interested in working with them. For that I have to thank Iris Saladino and some other now-friends who I went to see talk and perform at the University of Exact and Natural Sciences here in Buenos Aires.\\n\\nMy young age allowed to put lots of time into livecoding and the community. Since then, in just 4 years, it\'s been a pleasure to join the organizational side of things with the TidalCycles and Hydra communities.\\n\\n## Music\\n\\nI call what I do a hybrid of [Footwork](https://www.youtube.com/watch?v=iUdkuHw_Jus) & [RKT (Argentinian Reggaeton)](https://www.youtube.com/watch?v=WUaD9OC-ZiA). I\'ve livecoded many styles throughout the years but I feel I\'ve finally found a style unique to myself which I want to develop more and more. I\'m inspired by:\\n\\n- [Juke Music](https://www.youtube.com/watch?v=28iybYt0QpY)\\n- [Jersey Club](https://www.youtube.com/watch?v=xnDCWX7bUEU)\\n- [UK Garage](https://www.youtube.com/watch?v=5Pz3X5dcn6M)\\n- [House](https://www.youtube.com/watch?v=Ex6JtLJVXzc)\\n- [Reggaet\xf3n](https://www.youtube.com/watch?v=k8nxe6UE1gY&pp=ygUMcGxhbiBiIGNhbmR5)\\n- [Dream Pop](https://www.youtube.com/watch?v=6KnYw4EwYGc)\\n- [Flamenco](https://www.youtube.com/watch?v=m0K05cQG8oM) Fusi\xf3n\\n- and others\\n\\n### What\xa0projects\xa0are\xa0you\xa0currently\xa0working\xa0on\xa0or\xa0planning?\xa0What\'s\xa0next?\\n\\nPerformances, performances and performances! That\'s my goal right now. Since I use samples of both local and international Reggaet\xf3n, I feel my music has a lot of potential on the local dance floors. I post snippets as Reels on my Instagram. However I\'m considering doing a mixtape with some of the \\"songs\\" I\'ve been coding these last 2 years! Ain\'t no footwork if I don\'t share those trax.\\n\\n#### Links\xa0to\xa0recorded\xa0livecoding\xa0sessions:\\n\\n* [LIVE @ FESTIVAE](https://www.youtube.com/watch?v=Ej27Hsj7TsI)\\n* [LIVE @ ALGORAVE OTRA HISTORIA](https://www.youtube.com/watch?v=oiiqG9zOAfw)\\n* [Snippets @ Instagram](https://www.instagram.com/geikha_/reels/)\\n\\n### What\xa0samples\xa0or\xa0instruments\xa0do\xa0you\xa0like\xa0to\xa0work\xa0with?\\n\\nI practically only use samples. No synths here! I love to use samples from pre-existing songs. These samples might be looped vocals or instruments, vocal phrases or slices of the whole song. I enjoy coding new effects in SuperCollider to play with samples in unique ways.\\n\\nI have a very personal set of samples: currently, I don\'t use a single sound from Dirt-Samples, although I\'m planning to add some I remember fondly to my setup! I also use a [specific sample-naming system](https://club.tidalcycles.org/t/my-sample-naming-system/4898) that fits my needs.\\n\\n## Livecoding\\n\\n### What\xa0do\xa0you\xa0like\xa0about\xa0livecoding\xa0in\xa0Tidal?\xa0What\xa0inspires\xa0you?\\n\\n**Technical note:**\\n\\nI always say that I see Tidal as the most powerful sampler-sequencer in the world. The key to that is definitely its modularity. The purely functional aspect of Haskell and how Tidal has been built over it makes it so easy to create modular structures that link any Tidal functionality to any other one. I know nowadays we have ports such as [Strudel](https://strudel.tidalcycles.org/), but the magic and simplicity of Haskell-like code is unbeatable for this purpose IMO.\\n\\n**The improvisation spectrum:**\\n\\nHowever, moving away from the technical aspects and going into the experience of livecoding, Tidal is also the fastest tool for me to go from complex musical ideas into sound. This may be confusing to some people, as it\'s infuriatingly slow to write a pre-thought melody on Tidal. Naturally, a guitar (for example) is infinitely fast on its thought to sound production. That is, in spite of only being able to play as much as 6 notes at once, and using practically the same sounds. I call this trade-off the improvisation spectrum.\\n\\nOn one side -the most common one-, we have fast-reaction, infinitely detailed, monophonic instruments. Livecoding is the complete opposite: it\'s low-reaction, discretely defined, and as polyphonic as you want it to be. But it\'s not only polyphonic as in \\"you can play more than one note at a time\\", it\'s also \\"you can play as many of any sound as you want, however you want\\".\\n\\nFor someone such as myself, a music producer, livecoding is the perfect instrument. I was never highly invested in any single instrument, I always cared and thought about music as a whole, as the intertwining of elements. And these are the ideas that I\'m able to express with Tidal fast and on the spot. I\'m live-producing.\\n\\n**The superhuman:**\\n\\nFor some years I\'ve noticed a pattern in the music I like (and in popular music too): The superhuman. That is, musical elements and expressions which cannot be reproduced by any single human. For example, [autotuned perfectly pitched vocals](https://www.youtube.com/watch?v=iX1a3JngmpI), the [accelerated r&b vocal runs in UK Garage](https://www.youtube.com/watch?v=FV-PeJrvq_k), the pitched up vocals of a hyper-pop song, the slowed-down voice of a vaporwave song, the impredictable rhythms in glitch music. Well, there\'s definitely a superhuman aspect to Tidal-made music. The algorithmically complex rhythms that no human would be able to follow, the indeterministic randomness, the multiplexity of [canons](https://en.wikipedia.org/wiki/Canon_(music)). That definitely inspires me!\\n\\n### How\xa0do\xa0you\xa0approach\xa0your\xa0livecoding\xa0sessions?\\n\\nMy approach lately has been quite structured. I\'ve been doing \\"production\\" sessions where I simply explore ideas, add new samples, and basically \\"write songs\\" in a way. As for performance, I like to select a list of \\"songs\\" (pre-made code snippets) which I\'ll use as starting points throughout the performance. I start with something and do some changes to it and try to find an improvisational flow, if I can\'t find it, or if the flow gets cut, I simply transition to the following song. The transitions might be seamless or abrupt, depending on what I\'m going for. I don\'t like to use Tidal\'s transition functions, so I also play a lot with evaluating code at the exact time: risky, but fun.\\n\\n### What\xa0functions\xa0and\xa0coding\xa0approaches\xa0do\xa0you\xa0like\xa0to\xa0use?\\n\\nI\'m a \\"do-block-er\\", I prefer to have all my Tidal code on the same block that I constantly re-evaluate, instead of writing each pattern separate from each other. Here\'s an example that resembles most of my code snippets:\\n\\n```haskell\\ndo\\n  hush\\n  setbpm 150\\n  let trans = note (2)\\n  let note\' n = note (scale \\"minor\\" n-3) |+ trans\\n  let kb = slow 1 $ (rotR (0/8)) $ \\"1*2 1(3,8)\\"\\n  d1 $ stack [ silence\\n      ,kb # \\"bd\\"\\n      ,\\"1*16\\" # \\"808hh\\"\\n      ]\\n  d2 $ kb # note\' \\"<0 -2>\\" # \\"bass\\"\\n  d4 $ chop 8 \\"somemelodicsample\\" |+ trans\\n```\\n\\nUsing `hush` at the beginning of the do-block means I can simply comment out a pattern to silence it. However, this also means that if I have a runtime error in the middle of my do-block, everything after it will be silenced. Again: risky, but fun.\\n\\n`setbpm` is a custom function that let\'s me set the BPM, as long as a 4/4 signature is being used:\\n\\n```haskell\\nsetbpm bpm = setcps (bpm/60/4)\\n```\\n\\nI want my code to be as short as possible. So I make use of some default Tidal behaviour, such as String patterns automatically being assigned to `sound`. I don\'t use `struct` unless needed, I simply write a pattern of `1` and Tidal takes it as the rhythm. I also use lots of abbreviated aliases for Tidal functions!\\n\\nYou can find more about the custom functions I use on the Tidal Club, where I always try to share my ideas:\\n\\n- [striateAt, chopAt (Custom functions for loop sampling)](https://club.tidalcycles.org/t/striateat-chopat-custom-functions-for-loop-sampling/4870)\\n- [Runmod (an interesting way of generating sequences)](https://club.tidalcycles.org/t/runmod-an-interesting-way-of-generating-sequences/4880/5)\\n\\n## Tidal Contributions\\n\\n* I moderate and structure the Discord server\\n* Contribute to [Tidal documentation](https://tidalcycles.org/docs/)\\n* Organize [Algoraves in Buenos Aires](https://www.instagram.com/algorave_arg/)\\n* I published a [very popular drum machines sample pack](https://club.tidalcycles.org/t/a-huge-drum-machine-library-for-tidal-72-drum-machines/)\\n* Reporting [bugs](https://github.com/musikinformatik/SuperDirt/issues/282)\\n* Proposing [new ideas](https://codeberg.org/uzu/tidal/issues/915)\\n* [Fixing bugs](https://github.com/musikinformatik/SuperDirt/pull/294)"},{"id":"/about","metadata":{"permalink":"/blog/about","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/about.md","source":"@site/blog/about.md","title":"Tidal Blog Info","description":"Purpose","date":"2023-10-01T00:00:00.000Z","formattedDate":"October 1, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Blog Info","date":"2023-10-01T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile\xa0-\xa0GEIKHA","permalink":"/blog/tidal_profile_geikha"},"nextItem":{"title":"Tidal Profile - Viola He","permalink":"/blog/tidal_profile_violahe"}},"content":"## Purpose\\nThe Tidal Cycles blog is intended to be **by -- for -- about** the Tidal community.\\nAnyone engaged with Tidal Cycles is encouraged to submit a blog post. Topics can be about Tidal practices, music made with Tidal, live coding, event coverage, new developments & releases, community, etc. Topics can also be broader -- anything that would be of interest to this community, and it doesn\'t have to be limited to Tidal!\\n\\n## Templates\\nTo make submitting posts easier, there are a set if templates. Each template includes a suggested set of content sections, but consider this just a starting point. The most important thing is to provide content that reflects your unique perspective.\\n\\nTemplates are maintained in GitHub in the [tidalcycles/tidal-doc](https://github.com/tidalcycles/tidal-doc/) repo / templates branch.\\n\\n- [Tidal Blog Profile](https://github.com/tidalcycles/tidal-doc/blob/templates/templates/blog_tidal_profile.md) Intended to highlight your livecoding practices, music, and use of tidal. It contains a set of questions to respond to.\\n\\n- [Tidal music](https://github.com/tidalcycles/tidal-doc/blob/templates/templates/blog_tidal_music.md) Use this to describe a music project such as a new album or music release, a review of a music project, Algorave or concert, or discussion of music made with Tidal or other live coding program. Examples:\\n    - [Xuixo EP by Relyt R](https://tidalcycles.org/blog/blog_topic_relyt_r_xuixo)\\n    - [QBRNTHSS - making a live coding album](https://tidalcycles.org/blog/blog_topic_qbrnthss)\\n\\n- [Blog Topic](https://github.com/tidalcycles/tidal-doc/blob/templates/templates/blog_topic.md) Open topic. Use this for a more free-form approach. One option is to present your own approach to Tidal and live coding. Other topics could be discussion of a new release and the coding behind it, or discussion of other environments like Strudel. Examples:\\n    - [Working with Samples the Heavy Lifting way](https://tidalcycles.org/blog/tidal_profile_heavylifting)\\n    - [How Link became Tidal\'s scheduler](https://tidalcycles.org/blog/link_as_scheduler)\\n    - [Visualization with Didactic Pattern Visualizer](https://tidalcycles.org/blog/blog_topic_visualizer)\\n\\n- [Playlist](https://github.com/tidalcycles/tidal-doc/blob/templates/templates/blog_playlist.md) Use this to create a new playlist. See the [Tidal Eclectic Playlist](https://tidalcycles.org/blog/tidal_playlist-eclectic).\\n\\nWe encourage posts to include:\\n- code sections with Tidal examples\\n- links into the Tidal user documentation\\n- links to recordings, YouTube, Bandcamp, SoundCloud, etc.\\n\\n## Submission Instructions\\nDetailed posting instructions are included in the template files. Options:\\n- Submit via GitHub pull request\\n- Work with a blog editor and send your content via Discord DM or email.\\n\\nDo what works for you!\\n\\n## Markdown\\nSubmitting you content in markdown format is preferred, but it is not required. If you aren\'t familiar with markdown, no problem. Write your content and we\'ll take care of the rest.\\n\\n**Docusaurus, MDX and markdown enhancements**\\n\\nThe Tidal blog is rendered in [Docusaurus](https://docusaurus.io/) which uses [MDX](https://mdxjs.com/) as the parsing engine. It supports more layout features including React components. To see the full list of options, check out the [Docusaurus Markdown Features](https://docusaurus.io/docs/markdown-features) page. Here are some examples. There are many more!\\n\\n### Admonitions - triple colon syntax\\n\\n:::tip\\n\\nThis is a tip and is called by the triple colon syntax `:::tip`. You can also customize admonitions.\\n\\n:::\\n\\n:::caution\\n\\nWhen using admonitions - be sure to add empty lines before and after your text lines.\\n\\n:::\\n\\n### Details element\\n\\n<details>\\n  <summary>Toggle to see more</summary>\\n    <div>This is the detail revealed. This is useful for a long code block, allowing users flexibility in how they read through your post. </div>\\n</details>\\n\\nAnother \\"details\\" segment, with code:\\n\\n<details>\\n  <summary>Toggle for code block - (no div)</summary>\\n\\n  ```haskell\\n  h1 $ s \\"sound\\"\\n  h2\\n  h3\\n  ```\\n\\n</details>\\n\\n:::info\\n\\nHere is the raw markdown for this file: https://raw.githubusercontent.com/tidalcycles/tidal-doc/main/blog/about.md\\n\\n:::"},{"id":"/tidal_profile_violahe","metadata":{"permalink":"/blog/tidal_profile_violahe","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_violahe.md","source":"@site/blog/tidal_profile_violahe.md","title":"Tidal Profile - Viola He","description":"| Tidal Cyclist  | Viola He |","date":"2023-09-25T00:00:00.000Z","formattedDate":"September 25, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - Viola He","date":"2023-09-25T00:00:00.000Z"},"prevItem":{"title":"Tidal Blog Info","permalink":"/blog/about"},"nextItem":{"title":"Tidal Playlist - Eclectic","permalink":"/blog/tidal_playlist-eclectic"}},"content":"| Tidal Cyclist  | Viola He |\\n| --------:    | :---------- |\\n| aka    | [v10101a](https://www.instagram.com/v10101a/), [sandpills](https://www.instagram.com/sandpills/) |\\n| Location | New York / Shanghai |\\n| Time with Tidal | 1.2 yrs I\'m tidal baby |\\n| Other LiveCoding env | SonicPi, FoxDot, Touchdesigner(?) |\\n| Music available online | [SoundCloud](https://soundcloud.com/v10101a), [Vimeo](https://vimeo.com/user83351589) |\\n| Other music/audio sw |  Ableton, Max/MSP |\\n\\n<img\\nsrc={require(\'./viola-01.jpg\').default}\\nalt=\\"a photo of viola, looking down into a computer, with red projection graphics in the background\\"\\nwidth=\\"600\\"\\n/>\\nPhoto by Dan Gorelick\\n\\n## Livecoding\\n\\n**What do you like about livecoding in Tidal? What inspires you?**\\n\\nMaking patterns and drum loops are my favorite things! I had a non-western percussion background,and using Tidal Cycles feels like wielding an algorithmic percussion instrument / sample chopper hybrid with a lot of space for surprises and \u2728randomness\u2728, tickling my brain in all the right ways. \\n\\nTidal is also well-documented and accessible - removes the barrior of GUIs, DAW paywalls, and has an amazing community involved in maintaining, stewarding, and creating with each other. Livecoding videos are open-source tutorials by themselves. Simply watching videos of others using the same tool differently had taught me a lot - I owe much of my knowledge and practice to this community.\\n\\n**How do you approach your livecoding sessions?**\\n\\nI like to describe my livecoding approach as \\"structured improv\\". Creative freedom within constraints is what works best for my live performances. I aim for my music to be engaging enough for people who are not familiar with livecoding practices, yet not completely erase the code-like qualities - thus often bringing pre-written structures, basslines, chords, drums, and a clear arc in my head, improvising melodies and textures in between.\\n\\n**What functions and coding approaches do you like to use?**\\n\\n- I like `superimpose` a bit too much. Detuning just a little bit. The danger. The drama!\\n- Adding sine waves to modulate panning and filtering, like `# cutoff (range 200 2000 $ sine)` (honestly I\'d modulate anything and everything).\\n- Using `mask` to create simple composition structures.\\n\\n```haskell\\nd1 $ stack[\\n  s (\\"bd*4\\"),\\n  mask \\"[0 1]/4\\" $ s (\\"~ cp ~ cp\\"),\\n  mask \\"[0@3 1]/4\\" $ s (\\"hh27*8\\")\\n]\\n```\\n\\n**Do you use Tidal with other tools / environments?**\\n\\nLately I\'ve been outputing everything from Ableton to simplify the mixing process. I use Tidal to send Midi notes to play custom synths, and route the rest (mostly chopped up samples) through blackhole, also into Ableton. I\'ve also started to dabble more into Strudel and am having a lot of fun with it!\\n\\n## Music\\n\\n**Tell us about your livecoding music.**\\n\\nGrounded by film and theatre practices, and inspired by many genres of rock, jazz, pop, and electronic music, I\'m always attempting to use livecoding as a narrative opportunity to build worlds through dynamic sonic ventures. I make joyful dnb and techno music that I\'d like friends to dance to; and I also make textural blip blops, droney soundscapes, glitchy vocal mixes that might not be categorized as one type of sound. These two parts of me simultaneously exist, and I try to merge them as fit.\\n\\nThere was a period of my youth when I was _obsessed_ with rock operas and concept albums. Listening through an entire album attentively, in order, for a curated experience presented new grounds for me, and is somehow, strangely, comparable to certain \\"algorave\\" experiences. Building my livecoding sets almost feels familiar, like making... computer opera? The events we organize in New York City usually feature 25-40 minute livecoded sets, and it\'s the perfect length for these conceptual experiments - more than a few tracks, less than a whole show, embracing the chaos of improvisation but never actually going out of control. \\n\\nAlgorave is a \\"rave\\", so it\'s also natural to compare livecoding with DJing techno, where the scene is underground, diverse, and innovative, and the music is hypnotizing, consistent, and layered - it\'s a sonic journey that never ends. I think of livecoding music and community similarly, except that the journey does end, after a really good arc for 25-40 mins. \\n\\n**How has your music evolved since you have been livecoding?**\\n\\nI never used to make electronic music at all, and livecoding has made it easier for me to dive deeper into other aspects of music production and performance. What\'s really cool about livecoding is that we really don\'t have to be binded by western tuning systems and music conventions, which continues to be a topic of interest for me. I\'m also on a long, deep dive in finding different samples that can be mixed together, as well as sounds that are directly sourced from my life and my culture. I\'ve been making music with machine sounds from the shop I work at, gongs and bells and traditional Chinese intruments chopped up in different ways, morning assembly music from my middle school years, field recordings, and a lot of materials that feel intimate and important to me.\\n\\n**What projects are you currently working on or planning? What\'s next?**\\n\\nI\'m currently working on leading a livecode.NYC project in collaboration with Wave Farm to create a longer-form radio piece. I\'m also starting to work with more non-livecode musicians and producers, trying to better record, produce and intergrate livecoding with other instruments. Hopefully I\'ll polish and release some music soon. Oh, and learning, teaching and raving to people about Strudel because browser-based Tidal has felt SO intuitive and accessible to introduce to my non-livecode friends (and they are important!!!).\\n\\n### Links to your music / recorded livecoding sessions:\\n\\n- [Video of a recent live set in LA](https://vimeo.com/852553514?share=copy)\\n- [Video of a recent live set in Brooklyn, NY](https://vimeo.com/819746119?share=copy)\\n- [Recording of an hour-long livecoding session on radio](https://soundcloud.com/v10101a/livecoding-on-wgxc-907-fm-audio-buffet)\\n\\n### About\\n\\nViola He is a Shanghai-born, Brooklyn-based interdisciplinary artist, performer, and cultural organizer. Their creative practices engage with DIY electronics, programming, dance/movements, and various time-based media, exploring pathways towards alternative structures, systems and interfaces.\\n\\nUsing algorithmic approaches to enhance, alternate, and obfuscate sounds and images, they work to explore pathways towards alternative structures, systems and interfaces. Viola often dreams about infiltrating digital spaces with physical bodies as tools for intervention, wielding their love/hate relationship with technology to challenge the rigid infrastructures around them. Viola is an organizing member of NYC-based collective Livecode.NYC, and has produced and participated in performance work in NYC, LA, Shanghai, Beijing, Austria, and more.\\n\\n<img\\nsrc={require(\'./viola-02.jpg\').default}\\nalt=\\"a photo of viola, looking down into a computer, with red projection graphics in the background\\"\\nwidth=\\"600\\"\\n/>\\nPhoto by Whitt Sellers"},{"id":"/tidal_playlist-eclectic","metadata":{"permalink":"/blog/tidal_playlist-eclectic","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_playlist-eclectic.md","source":"@site/blog/tidal_playlist-eclectic.md","title":"Tidal Playlist - Eclectic","description":"Here is a playlist of recordings made with Tidal. This is a collection of performances that have stuck with me that I continue to draw inspiration from. It is very eclectic, with many different styles - which I think is wonderful. Tidal, after all, can be used for just about any kind of music making, and we should all celebrate the incredible range of expression being done under the heading of live coding. Enjoy!","date":"2023-09-14T00:00:00.000Z","formattedDate":"September 14, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Playlist - Eclectic","date":"2023-09-14T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - Viola He","permalink":"/blog/tidal_profile_violahe"},"nextItem":{"title":"Tidal Profile - Ghales","permalink":"/blog/tidal_profile_ghales"}},"content":"Here is a playlist of recordings made with Tidal. This is a collection of performances that have stuck with me that I continue to draw inspiration from. It is very eclectic, with many different styles - which I think is wonderful. Tidal, after all, can be used for just about any kind of music making, and we should all celebrate the incredible range of expression being done under the heading of live coding. Enjoy!\\n\\n\\n| Artist  |  recording / performance |\\n| :--------:    | :---------- |\\n| Yaxu | gabba improv - [Algorave 10th Birthday Stream](https://www.youtube.com/watch?v=AkZl2uVO4S0&t=85s) |\\n|  | This is one of my favorite Yaxu performances. It is fun, builds intensity and shows how to exploit just a few samples - gabba + cpu. He also live codes a small dancing robot. Cool! |\\n| Eloi el Bon Noi | [i la sessi\xf3 male\xefda (The cursed session)](https://www.youtube.com/watch?v=rKmHFpXU63k) |\\n|  | Eloi (the good guy) performed this on the Solstice Stream (Dec, 2022) and it burned up the chat with raves. It starts with a radical remix/cutup of the Led Zepplin classic, Kashmir. |\\n| Polymorphic Engine (Martin Gius) | [Codified Waves](https://www.youtube.com/watch?v=ieQ7fA7ah3s&t=59s) |\\n|  | Evocative and mesmerizing acousmatic music based on field recordings of electromagnetic waves manipulated in Tidal. |\\n| Linalab | [Solstice Night Stream](https://www.youtube.com/watch?v=DNRZ6u2ksRI&t=65s) |\\n|  | I really love the vibe here - how it starts in a drone like mode and slowly builds intensity. Nice! |\\n| ndr_brt | [single sample #4: gtr](https://www.youtube.com/watch?v=XYk096aDOcU&t=55s) |\\n|  | Ndr has a whole series of tidal performances done \\"from scratch\\" and many use the \\"single sample\\" approach. The coding is minimalist but so expressive! [bd](https://www.youtube.com/watch?v=mc63VZ-biAo), [MI Clouds drones](https://www.youtube.com/watch?v=Zk3ICtit3tM&t=79s) |\\n| Dan Gorelick| [In seven - TidalCycles arpeggio jam](https://www.youtube.com/watch?v=WisMIMdnQ2A) |\\n|  | Dan strikes me as the \\"Miles Davis\\" of live coding - oh so cool, but masterful and innovative. |\\n| Bernard Gray (cleary)| [av v0.1](https://www.youtube.com/watch?v=oTnmjeVGE3g) |\\n|  | Experimental electronic music - based on artworks converted to audio as a spectrogram. When the synths come in it will blow you away! |\\n| CNDSD | [Solstice Stream - 2021](https://www.youtube.com/watch?v=sdT9iefP3vg&t=18s) |\\n|  | [Solstice Stream - 2022](https://www.youtube.com/watch?v=977AbvG2s04&t=118s) |\\n|  | The mixed media work of CNDSD is in a class all by itself. Enigmatic visual storytelling, haunting sounds and expressive live coding all together. Amazing. I love the morphing faces at the end of the 2022 set as the Euclidan beat takes over. |\\n| Relyt R | [Album Xuixo: Track 1 - Nondegenerate (33 EDO) ](https://relytr.bandcamp.com/album/xuixo) |\\n|  | Relyt R wrote an [incredible blog post](https://tidalcycles.org/blog/blog_topic_relyt_r_xuixo) about this xenharmonic music conceived in an intense techno style. Just read it and listen! |\\n| digital selves | [Eurostar](https://cherche-encore.bandcamp.com/track/eurostar-2) |\\n|  | From the 2022 Bandcamp EP - [error topography](https://cherche-encore.bandcamp.com/album/error-topography). Very cool groove, sharp glitchy rhythmic sounds and intense bass line. Well done! |\\n| Weekly Rave | [Playlist: 3/2023 -> now ](https://www.youtube.com/watch?v=WisMIMdnQ2A) |\\n|  | Cleary & Joanq hold a weekly Rave jam session using Estuary. Sessions are streamed and archived. Lots of great collaborations. [Check it out!](https://www.youtube.com/watch?v=bQjTJcSeiHA&list=PLMBIpibV-wQLvP7jitjnV9E61DfV11235) |\\n\\n### Bonus - Sardine!\\n\\n| Bubo (Rapha\xebl Forment)| [Solstice Stream - Dec, 2022](https://www.youtube.com/watch?v=bM5FXw-5N8s) |\\n| :--------:    | :---------- |\\n|  | Ok, so it\'s not Tidal - but Bubo comes from Tidal, and this is performance is sheer delight! |"},{"id":"/tidal_profile_ghales","metadata":{"permalink":"/blog/tidal_profile_ghales","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_ghales.md","source":"@site/blog/tidal_profile_ghales.md","title":"Tidal Profile - Ghales","description":"|          Tidal Cyclist | Ghales                      |","date":"2023-07-31T00:00:00.000Z","formattedDate":"July 31, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - Ghales","date":"2023-07-31T00:00:00.000Z"},"prevItem":{"title":"Tidal Playlist - Eclectic","permalink":"/blog/tidal_playlist-eclectic"},"nextItem":{"title":"Tidal Music - Xuixo EP by Relyt R","permalink":"/blog/blog_topic_relyt_r_xuixo"}},"content":"|          Tidal Cyclist | Ghales                      |\\n| ---------------------: | :-------------------------- |\\n|               Location | Nomad                       |\\n|       Years with Tidal | 5 yrs                       |\\n|   Other LiveCoding env | p5.js, hydra, foxdot        |\\n| Music available online | [Spotify](https://open.spotify.com/artist/0vkFKjAM0AXFZ9a28wSMqL), [SoundCloud](https://soundcloud.com/ghalesdobeat), [Bandcamp](https://ghales.bandcamp.com/) |\\n|            Code online | [GitHub](https://github.com/ghalestrilo)     |\\n|   Other music/audio sw | Reaper, Ableton, BitWig, Open Stage Control  |\\n|           Comments | [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-ghales/4824) |\\n\\n<img\\nsrc={require(\'./ghales.jpg\').default}\\nalt=\\"ghales\\"\\nwidth=\\"600\\"\\n/>\\n\\n## Livecoding\\n\\n**What do you like about livecoding in Tidal? What inspires you?**\\n\\nFirst, the community. From the moment I watched [Kindohm](https://soundcloud.com/kindohm) play with code I knew I\'d have to try that as well at some point. I started actually getting into live-coding by getting in touch with [CLiC](https://colectivo-de-livecoders.gitlab.io/) and by the UnB Media Lab. I\'ve made friends in these communities and played a number of times with them.\\n\\nAlso, mini-notation, even at its current experimental state, makes a lot more sense to me than sheet for my current work. Mini-notation is fairly easy to write, plus it\'s easy (and fun) to combine functions for some very sophisticated manipulation. In particular I love the ability of using algorithms to shape music - as a composer it felt (since the very first time) like finding a missing piece to a decade old puzzle.\\n\\n**How do you approach your livecoding sessions?**\\n\\nWith a creeping fear that something will break.\\n\\nIt really depends though on whether I\'m playing by myself. When in a group (like [N\xf4made Lab](https://soundcloud.com/nomadelab)) I\'ll probably use [flok](https://flok.cc/) (shoutout [munshkr](https://github.com/munshkr)) as it\'s the most accessible platform, with vanilla tidal. I find that relying too much on custom code for collaborative performance is tricky. Plus it\'s relaxing to play in that environment, as it lifts the pressure off and becomes an exploratory quest for interesting sound instead.\\n\\nWhen playing alone, I aim very high: my goal is for the music to be interesting without the knowledge that it\'s done by code. If an audience can\'t vibe to it, I\'m doing it wrong. This is difficult because general audiences are used to very engaging, dynamic and tightly composed music, which is very hard to pull off with code (especially through live-coding). From experience, either you bring ready-made compositions, or you live-code using some very high-level custom functions.\\n\\n**What functions and coding approaches do you like to use?**\\n\\nHere are some guiding principles I grew to follow:\\n\\n1. **Splitting code between a _palette_ and a _canvas_**. The palette is a set of definitions at the top of a song file - time signatures, tonal keys or even custom functions. Each following block is a section of a song, which I usually tag using `-- @name <name>` so that the comment gets picked up by [verso](https://github.com/ghalestrilo/verso).\\n2. **Using code where it pays off** - fiddling with numbers / fine tuning variables with is a very poor UX. It\'s time consuming and unrewarding. Using a separate controller for variables and using code to consume them makes a lot more sense personally. Recently I\'ve been into midi controllers for that purpose.\\n3. **Avoiding logical constraints** - even without plans to use the full capacity of tidal, I like to trust the platform I\'m using to be suited for whatever exploration I decide to do. For this reason I\'ve been exploring (and looking for solutions) for anything which seems hard to do in tidal. The hardest seem to be controlled (arrangement-based) transitions, time signature changes, long sequences with looping/non-looping parts and tonal modulation.\\n\\nNowadays, I only really use custom functions for controlling tonality and time signature changes. My [custom function repo](https://github.com/ghalestrilo/libtidal) is basically this.\\n\\nFor tonality, I made a function called `k` (key) which is used as `k <index> <pattern>` throughout my [pieces](https://github.com/ghalestrilo/pieces). The first argument is used to refer to a **key** (a combination of a root and a scale mode) by index, which can be set using `setkey <index> <root> <mode>`. That makes modulating and exploring tonal fields very comfortable. I\'ll also sometimes use `setI` to store a pattern and refer to it later with the `^` operator which is very convenient.\\n\\nPutting this together, a lot of my song code will look like:\\n\\n```haskell\\ndo\\n  -- palette\\n  setI \\"theme1\\" \\"0 1 2 3\\"\\n  setkey\' 0 \\"d\\" \\"major\\"\\n\\ndo\\n  -- @name section 1\\n  p \\"test\\" $ (note . k) 0 \\"^theme1\\"\\n\\n-- for brevity I use `nok` which is exactly `note . k`\\n\\ndo\\n  -- @name section 1\\n  p \\"test\\" $ nok 0 \\"^theme1\\"\\n```\\n\\nI also rely heavily on `all`. One trick in particular **really** helps, which is to apply transformatiopn (ie. `chop` or `timeLoop`) via `all` but leaving them bypassed. It works quite well to use a function to switch between `id` and the transformation. This way, if you assign the control parameter to be a midi control (such as a button) you suddenly have a highly interactive performance element to use anytime. Using this trick with `timeLoop` is :ok_hand: by far my favorite thing in tidal yet.\\n\\nIn the future I aim to use all + timeLoop extensively. It really changed the game for me, and I feel that it\'s a very good way of steering a composition in tidal\\n\\n**Do you use Tidal with other tools / environments?**\\n\\nI\'ve used a number of different synths and softwares over the years. Today, it\'s a combination of TidalCycles, Reaper, [U-He Diva](https://u-he.com/products/diva/) and Sitala, plus a midi controller on the side (midi fighter twister). No SuperDirt samples or synths at all.\\n\\nI find this strikes a nice balance for me, allowing for:\\n\\n- Record song midi and manipulating it later\\n- Changing Synth Presets using code - a big thing for my performances\\n- Recording audio in a familiar and lightweight DAW\\n- Having access to a huge preset library\\n- Using a single synth for all instruments\\n\\nI was into hardware synths for a while, but eventually realised that for the requirements above there are really very few options. The only one I could find was the Virus TI, which is sadly very expensive and hard to find (and use). Plus, it became clear the only think I get out of a hardware synth is the controls - the rest can easily be achieved by software IMO.\\n\\n## Tidal Contributions\\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**\\n\\nI consider [verso](https://github.com/ghalestrilo/verso) to be my main live-coding contribution, even at its current stage.\\nIt\'s an algorithmic music-making interface which can be used with different live-coding languages.\\nRight now it supports tidal and I\'m moving on to [Jaffle](https://github.com/roipoussiere/jaffle) next. I really like the concept and will continue to develop it as I have the time.\\n\\nI\'m one of the founders of the Algorave Brazil community.\\nLive-coding has been a things in Rio de Janeiro and S\xe3o Paulo for years, but there wasn\'t a national community chat until recently.\\nThe group is now self-managed and regularly brings newcomers to the FoxDot, Sonic Pi, PureData and TidalCycles communities.\\n\\nI like participating in the [club forum](https://club.tidalcycles.org/), proposing and pitching in on changes, ocasionally helping newcomers find solutions. Whenever I find something exciting I try to share it there as well - such as [Open Stage Control](https://club.tidalcycles.org/t/open-stage-control-tidalcycles/1283).\\nWhen playing with hardware synths I eventually came up with mappings which I shared there as well ([model:cycles](https://club.tidalcycles.org/t/tidaling-on-elektron-machines/3785/10?u=ghales)).\\n\\n**What motivates you to work on Tidal?**\\n\\nTidal strikes me as the best approach out there for generating music with code. It\'s extensible, compact, effective, plus it has a very good community behind it. There\'s a number of things I wish worked differently, and the underlying haskell makes it particularly difficult to change/update, but all in all it\'s a great tool and I like to help improve it whenever I have the time.\\n\\n## Music\\n\\n**Tell us about your livecoding music.**\\n\\nI like making music that doesn\'t sound like it\'s done by code. If I can trick the listener I\'m doing something right. I\'ll also throw in some organic elements in my studio works for good measure.\\n\\nOne trait of my music is stacking loops with different lengths. If done right, it creates an illusion where it\'s almost unclear when a beat starts and ends. It also makes very simple patterns go a long way, since they will combine at different points with different intervals to create something new and unexpected. A great example of this is [Girassol](https://soundcloud.com/ghalesdobeat/girassol) which features two piano melodies stacked. As they shift against each other, different melodies emerge. All in all I like using code to achieve levels of structured randomness and algorithmic patterns for which sheet music is not suited.\\n\\nAt around 17, I started listening to Meshuggah and got really into Math Metal / Mathcore.\\nOne thing that struck me was their [cyclic patterns](https://www.youtube.com/watch?v=Kx0klv82BDA), which are easier to describe than to formalise through sheet.\\nOne particular instance is Sonic Pi\'s [ring](https://sonic-pi.net/tutorial.html#section-8-4), whereby two sequences (pitches and lengths) with different element counts can be combined into a third sequence which loops with a much longer length.\\nAnother example I tried to code multiple times is [Perichoresis](https://www.youtube.com/watch?v=oxT6CxhBGbo) by Ishraqiyun - they refer to _ring_ as [Tessellations](https://medium.com/@luis.misiara/interview-trey-spruance-d0cd9a78eef1) or just _Geometric Patterns_.\\nAt the time I did not realise these compositions are algorithmic.\\nI started developing my own notation system to achieve similar things with bandmates. During college I learned about tidal - code turned out to be the perfect tool to code these songs that have this special personal meaning.\\n\\n**How has your music evolved since you have been livecoding?**\\n\\nI\'ve been taught to live-code by [Alexandre Rangel](https://www.quasecinema.org/) and [Joenio](https://joenio.me/) (aka. @djalgoritmo). I also learned a lot from the University of Brasilia (UnB) Media Lab and the [N\xf4made Lab](<(https://soundcloud.com/nomadelab)>) collective.\\n\\n<img\\nsrc={require(\'./nomadelab.jpeg\').default}\\nalt=\\"ghales\\"\\nwidth=\\"600\\"\\n/>\\n\\nI started releasing on my own with [Pragma](https://open.spotify.com/album/47Il3SA4T7JIQeXdRiLFer) to learn about releasing music on Spotify and other streaming platforms. It was an live improvisation, live-recorded EP with 3 songs. Pretty generic ambient techno inspired by some Aphex Twin.\\n\\nI consider [Isohedra](https://ghales.com/music/isohedra/) to be my first proper algorithmic album - it was launched at the start of the pandemic. At that point I was heavily invested in superdirt samples and synths. Also, trying to always do things the \\"live coding way\\" - as in, not relying on DAWs or hardware. The album is very loungey and geometric, and uses some very rudimentary timbres, but to this day I quite enjoy its use of fading arrangements.\\n\\nThe next release - [Memento](https://ghales.com/music/memento/) - was really big for me. It was my first release with lyrics and vocals. At this point I was using an Elektron Model:Cycles - which I did for years - for drums, basses and synth sounds.\\n\\n[Sino](https://open.spotify.com/track/36qsHSD3US85HRJX3PYG4o?si=b322459540234428) was a song that really changed a lot the direction of my music. It threw me back to the drum grooves I used to love but stopped listening to years ago. I realised that\'s something I wanted to do a lot more.\\n\\nFor live settings, I try to reinterpret my own music into something that fits the audience. I played a techno set in Buenos Aires through [NBTR](https://soundcloud.com/no-breakfast-records) with my friends [Persik](https://www.instagram.com/persik.nbtr/), [Fakin](https://www.instagram.com/fakin.techno/) and [Alther](https://www.instagram.com/hernan_alt/). For that set, I sliced together songs from [Memento](https://ghales.com/music/memento/) and [Isohedra](https://ghales.com/music/isohedra/) and threw drums on top - it worked. Months later, I started playing hip-hop gigs with [Kaleb](https://www.instagram.com/kalebmesmo/), a talented pianist and singer friend.\\n\\n**What samples or instruments do you like to work with?**\\n\\nI\'ve used a number of different synths and softwares over the years. Today, it\'s a combination of TidalCycles, Reaper, [U-He Diva](https://u-he.com/products/diva/) and Sitala, plus a midi controller on the side (midi fighter twister). No SuperDirt samples or synths at all. I use organic drum samples cause it good \ud83d\udc4d\ud83c\udffc\\n\\nI\'ve bought and downloaded a few sample packs from Pocket Operators, the Model Cycles, etc. In particular, [Wavparty](https://wavparty.com/) has been an amazing resource for that!! But in the end I resorted back the a comfortable combination of recorded drums and softsynths. It works best for me.\\n\\n**What projects are you currently working on or planning? What\'s next?**\\n\\n[Prece](https://ghales.com/music/prece/) is my latest work - it\'s being released as I write this doc \ud83d\ude01\\n\\nPrece is another instrumental album, but with much more polished sound. I used all the synths I owned on this: a Yamaha Reface CP, an Audiothingies MicroMonsta plus the Model:Cycles. It also features recorded guitars and sampled drums. It\'s been produced by [Jota Dale](https://instagram.com/jotadale) and released via [Torto Disco](https://tortodisco.com/). It\'s my longest release - One hour, 10 tracks long - and features the best production quality I\'ve had yed.\\n\\nLater this year I\'ll be releasing [Include](https://ghales.com/music/include/), a video series of live performances featuring six musicians I really admire from Brasilia - picture Live-Coding \\"Sofar Sounds\\". It\'s been in the works for two years with a large production team and we\'re very excited about the result.\\n\\nAfter that frankly I\'m just taking a break. I\'ve left some songs saved for whenever I want to make music again, but at this point I\'m focusing a lot on my career as a software engineer. Music making takes a lot of time and effort, and I really need to pick my battles at this point, especially considering I make music for free and it doesn\'t pay my bills.\\n\\n### Links to your music / recorded livecoding sessions\\n\\nMy music is released through Torto Disco and can be found on [their website](https://tortodisco.com/). A full and up-to-date list of releases can also be found on my [homepage](https://ghales.com/music). You can also hear me on your favorite platform via the links below:\\n\\n#### Spotify\\n\\n- [Spotify: Prece](https://open.spotify.com/album/7tfJ85Qt7KoGd3rPVDxMqX)\\n- [Spotify: Memento](https://open.spotify.com/album/6aUF91uGLVwpfrKbkcOlko)\\n- [Spotify: Isohedra](https://open.spotify.com/album/4AQukgo5BCAsUE55WQ0daX)\\n- [Spotify: Pragma](https://open.spotify.com/album/47Il3SA4T7JIQeXdRiLFer)\\n\\n#### Soundcloud\\n\\n- [SoundCloud: Prece](https://soundcloud.com/ghalesdobeat/sets/prece)\\n- [SoundCloud: Memento](https://soundcloud.com/ghalesdobeat/sets/memento)\\n- [SoundCloud: Isohedra](https://soundcloud.com/ghalesdobeat/sets/isohedra)\\n\\n#### Bandcamp\\n\\nFind me on bandcamp [here](https://ghales.bandcamp.com/)\\n\\n#### Live Sessions\\n\\n- [Solstice](https://www.youtube.com/watch?v=6B3A41214Mo)\\n- Microjams: [#1](https://www.youtube.com/watch?v=QRvv1RRSuSc), [#2](https://www.youtube.com/watch?v=DHLgy0tf5MY), [#3](https://www.youtube.com/watch?v=LgIppM7lHOM), [#4](https://www.youtube.com/watch?v=QRvv1RRSuSc), [#5](https://www.youtube.com/watch?v=JVAPtQDfW_M)"},{"id":"/blog_topic_relyt_r_xuixo","metadata":{"permalink":"/blog/blog_topic_relyt_r_xuixo","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/blog_topic_relyt_r_xuixo.md","source":"@site/blog/blog_topic_relyt_r_xuixo.md","title":"Tidal Music - Xuixo EP by Relyt R","description":"| Tidal Musician | Relyt R    |","date":"2023-07-07T00:00:00.000Z","formattedDate":"July 7, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Music - Xuixo EP by Relyt R","date":"2023-07-07T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - Ghales","permalink":"/blog/tidal_profile_ghales"},"nextItem":{"title":"Tidal Visualization with Didactic Pattern Visualizer","permalink":"/blog/blog_topic_visualizer"}},"content":"| Tidal Musician | Relyt R    |\\n| --------:      | :---------- |\\n| aka            | R Tyler (https://instagram.com/1000instamilligrams) |\\n| Location | San Francisco, California |\\n| Album/Release | Xuixo |\\n| Genre | Xenharmonic, Techno, Algorave, Microtonal |\\n| Available | [bandcamp](https://relytr.bandcamp.com/album/xuixo), Spotify, Youtube |\\n| Release Date | June 28th, 2023 |\\n| Comments | [Club Tidal Forum Post](https://club.tidalcycles.org/t/blog-topic-tidal-music-xuixo-ep-by-relyt-r/4780) |\\n\\n<img\\n  src={require(\'./xuixo_art.png\').default}\\n  alt=\\"Xuixo Album Art\\"\\n  width=\\"600\\"\\n/>\\n\\n## Introduction \\n\\nWe\'ve been listening to music with the same 12 notes (C, C#, D, Eb, etc.) for hundreds of years, thanks to 18th century Europeans. Times have certainly changed. Why does our music not reflect that? A small but active contingent of artists recognizes and challenges this status quo and creates microtonal music using notes without analogs in 12-tone equal temperament. The name given for music composed with alien, non-12-tone harmonies is \'xenharmonic\'.\\n\\nXuixo, a 6-track EP released on the xenharmonic label [split-notes](http://split-notes.com/) is the first studio EP by Relyt R, the alias I created for microtonal algorave. Relyt R is a focused split from my other algorave work as [R Tyler](https://instagram.com/1000instamilligrams).  The Xuixo EP features algorithmic and machine learning enabled techno and dance music using non-Western tunings.  19-, 21-, and 33-tone equal temperaments were chosen to synthesize alien harmonies and melodies with notes exterior to the common 12.\\n\\nMy motivation for incorporating live-coding, machine learning, techno, and xenharmonic scales is to imagine how music in the future may exist--with a radically different sonic palette. The intention behind Xuixo EP was to use this set of digital tools and custom code bases to evoke **wonder about an algorithmic future**.  Perhaps our future will be alien and dystopian. If so, a fast, brutal, and bizarre xenharmonic techno soundtrack would be fitting.\\n\\n### Track Highlights\\n\\nI\'m going to highlight code and methodology behind three tracks:\\n- Nondegenerate\\n- Three\\n- 10 Megakelvin\\n\\n*Nondegenerate* will be the longest description as I\'d like to explain the microtonal setup used throughout the album.\\n\\n#### \\"Nondegenerate\\" (33 EDO)\\n\\nChanneling a dystopian sci-fi rave, the sub-heavy techno track *Nondegenerate* opens the album at 170 BPM and 33 notes per octave (EDO = equal divisions per octave). \\n\\nThe microtunable VST [Arturia Pigments](https://www.arturia.com/products/software-instruments/pigments/overview) is used for all synth sounds, including the arp, chords, and sub bass.  This [list of microtunable VST synths on the xenharmonic wiki](https://en.xen.wiki/w/List_of_microtonal_software_plugins) is how I first heard about Pigments.  To microtune Pigments I used [Sevish\'s scale workshop](https://sevish.com/scaleworkshop/?version=2.1.0), exported a `.scl` file for 33-EDO, and loaded it into Pigments. To create this tuning file, the steps are:   \\n\\n`New Scale -> Equal Temperament -> \\"Number of Divisions\\" = 33, \\"Interval to divide\\" = 2/1 -> Export Scala scale (.scl)`\\n\\nOn this track I controlled Ableton Live with TidalCycles via MIDI and recorded the results. This track was not performed and recorded live--clips from TidalCycles were pieced together over a DJ-friendly arrangement structure.  The rigidity of 8- and 16-bar arrangement structure seems to be foundational or omnipresent in (Western) dance music so I wanted to enforce that structure for this piece.\\n\\nThe way I played and composed the arpeggio in TidalCycles is with several custom functions I wrote (and [one from polymorphic.engine](https://club.tidalcycles.org/t/pattern-to-list/2982)). They are constructed from base TidalCycles functions `nTake`, `toScale\'` (for non-12-tone scales), and `segment`. Essentially, I use a custom function `takeArp\'` to map a math function to a microtonal scale and construct an isorhythm out of it. \\n\\nA little more detail before I share the code:  \\n- I start with a mathematical trigonometric function of time `y(t)`\\n- quantize it to a certain number of samples `{t}` with `segment`\\n- map the values `{y(t)}` to an ordered cycle of pitches in a scale (embedded in a 33-note chromatic scale) with `tScale\'`\\n- use [state memory](https://tidalcycles.org/docs/reference/state_values/) (with `nT` derived from `nTake`) so that everytime a rhythmic onset is encountered and scheduled, the next note is taken from the cycle of pitches, creating an isorhythm.    \\n\\nHere is the code to make `takeArp\'`:\\n\\n```haskell\\nlet\\n  -- allows writing patterns (pseudo-patterns) instead of lists.\\n  -- useful for `nTake` and `toScale` family functions.\\n  patternToList pat = map value $ sortOn whole $ queryArc pat (Arc 0 1)\\n  -- toScale\' but with pseudo-pattern syntax\\n  -- zEDO is the EDO; the number of notes in the non-12 chromatic scale.\\n  tScale\' zEDO scalePat pat = toScale\' zEDO (patternToList scalePat) pat\\n  -- nTake but with pseudo-pattern syntax and a number to take.\\n  -- requires a name for the state counter.\\n  nT name amt p = nTake name (take amt (cycle (patternToList p)))\\n  -- the 6-argument function that combines everything above.\\n  takeArp\' name amt zEDO scalePat segAmt func =\\n      nT name amt $ tScale\' zEDO scalePat\\n      $ fromIntegral <$> round <$> segment segAmt (func)\\n```\\n\\nThen I can convert trig functions into scale-based state-memory arpeggios:\\n\\n```haskell\\nd1 $ struct \\"t(13,16)\\" $ takeArp\' \\"nondegenerate\\" 9 33 \\n     \\"0  3  8 12 22 24\\" 15 (slow 3 $ range (-5) 8 $ sine*sine) #\\n     s \\"midi\\" # midichan 1\\n```\\n\\nThis `takeArp\'` function lets you dramatically alter the melody by changing:\\n- the trig function\\n- its numeric range\\n- its frequency (with `slow` or `fast`)\\n- its segmentation\\n- the scale itself\\n- the number of values stored in the `nTake` counter\\n- the rhythmic onsets (specified here using `struct`)\\n\\n> This is not the exact code I used for the melody (I lost the code with `:q!` in vim) but it is very close.\\n\\n#### Microtonal structure and production \\nI\'ll briefly go over chords, bass, and production before highlighting the next two tracks. This section goes into a bit of microtonal theory, then plug-ins and techniques used for production.\\n\\n- The chords stabs have the pitches `[0, 4, 9, 14, 22]` in 33-tone, so root, neutral second, Just minor 3rd, perfect 4th, minor 6th.  It\'s a kind of a second-inversion minor 7 with a neutral sixth.  I find the [EDJI ruler](http://micro.soonlabel.com/Scott_Thompson/edjiruler.html) to be very helpful for learning a new temperament. I also use some [custom Python tuning tools](https://github.com/TylerMclaughlin/tuning_tools) I made to [convert 12-EDO pitch classes to non-12-EDO approximations](https://github.com/TylerMclaughlin/tuning_tools/blob/master/twelve_to_edo_alternatives.py), but because of the neutral sixth, this chord is unlike any found in 12-EDO.\\n- The bass pattern is simple, with a steady stream of 16th notes except there are no 16th notes on the quarter note onsets where the kick drum plays.  This makes the kick and bass sound more like a single instrument and helps with mixing.  Here\'s the pattern visualized on a piano roll: \\n\\n<img\\n  src={require(\'./xuixo_nondegenerate_bass.png\').default}\\n  alt=\\"piano roll bass\\"\\n  width=\\"600\\"\\n/>\\n\\n- The melodic contour in this bass ostinato uses theory from Lerdahl and Jackendoff\'s [Generative theory of tonal music](https://en.wikipedia.org/wiki/Generative_theory_of_tonal_music), namely the `4 1 2 1 3 1 2 1` pattern found in music and linguistics (refer to G. Toussaint\'s \'Geometry of Musical Rhythm\' for an accessible intro). TidalCycles mininotation makes this almost effortless:\\n\\n```haskell\\n-- bass melody\\nn \\"~ 0 0 <<7 5 > 3>\\"\\n```\\n\\n- Regarding the microtones in the bass melody, the notes divide 2.5 semitones (seven 33-EDO steps) into four pitches so the melody is quite microtonal yet still perceived as four distinct pitches.  To add an interesting timbral effect, I layered two bass oscillators, with the second pitched 15 33-EDO steps apart (545.5 cents, an approximation of the 11th harmonic). This harmonization really makes the bass shine and sound cool even on trashy speakers. It\'s almost like additive synthesis with an extra 11th harmonic. I fnd the harmonic series to be an indispensible reference when sound designing percussion and bass.\\n\\n- For mixing and production, I used drum bus limiting, multiband sidechaining, mid-side EQ, a mastering chain with the stock Ableton limiter, Rift by Minimal Audio for distortion on the chords and hi-hats, and Output Portal for delay effects. For sub and bass compatibility, I followed Slynk\'s recipe for [making sub bass sound good on any sound system](https://www.youtube.com/watch?v=ecKbeDfJxtQ). \\n\\n#### \\"Three\\"\\n\\nThe experimental club track \\"Three\\" was my first production after I coded a machine learning tool in Python. I named it [WAV Clustering Workflow](https://github.com/TylerMclaughlin/wav_clustering_workflow) (WCW) and I use it for clustering drum samples by acoustic similarity. I used WCW to cluster [18000 vintage drum machine samples from kb6](https://samples.kb6.de/) and browsed the generated file folders corresponding to clusters (see the WCW `readme.md` for more info). One of the cluster folders in particular was full of insane laser sound effects, so I simply played through them, in order more or less (hierarchical clustering means within a cluster, sounds are further sorted by subclusters). I found a similar folder with short closed hi-hats. To play the sounds I drag 128 samples at a time in an Ableton drum rack then play them in order with: \\n\\n```haskell\\nfast 16 $ slow 128 $ n \\"0 .. 127\\" # s \\"midi\\" # midichan 1\\n```\\n\\nIn Ableton\'s drum racks you can assign \'choke groups\'. This allows you to mute samples when another sample from the assigned group triggers.  This prevent samples from bleeding into each other, and is just like using `cut` in TidalCycles for audio samples in SuperCollider (a trick I learned from [Kindohm](https://www.youtube.com/watch?v=smQOiFt8e4Q)).\\n\\n- For the dynamically stereo-panned stream of ultra-compressed bass notes at around the 1:20 timestamp, I actually play all 128 sounds in order, and kept all the samples that came out of WCW.  **It\'s the sound of a sweep through neighboring notes in a cluster of kick drums in acoustic latent space**--very satisfying and wild sounding.  I added OTT (Ableton Live Multiband dynamics) at 100% (haha) then I added binaural panning using the [Envelop max4live devices](https://envelop.us/page/software) on this and other instrument tracks, with LFOs controlling the X and Y coordinates.\\n\\n- I also used a NEJI tuning (near equal just intonation, a concept I learned from [Zhea Erose](https://www.youtube.com/@ZheannaErose/videos) in the Xenharmonic Alliance discord) using my [NEJI calculator](https://github.com/TylerMclaughlin/neji_calculator) to export a scala file for the wobbly vocal-like chord that\'s played in bursts of 7 (starting at 0:03 timestamp).\\n\\n- In a slower track like this, using groove or swing is really helpful. I do this by patterning `nudge` in TidalCycles or by using Roger Linn\'s MPC 16th note grooves in Ableton).  The overall composition isn\'t that crazy, but it\'s the machine-learning for sound selection and overall contrast that makes it interesting.\\n\\n#### \\"10 Megakelvin\\" (21 EDO)\\n\\nThis track was fully live-coded in TidalCycles with minimal or zero tweaks after recording. I used a 21-EDO `.scl` file from Sevish\'s scale workshop and microtuned several instances of Arturia Pigments, similar to how I set up synths for \\"Nondegenerate\\" above and for other tracks on the album.  I decided to use an 18-beat rhythm because it\'s close to 16, and it\'s still an even number, so it\'s still amenable to head-nodding and/or dancing. \\n\\nSaying **no to twelve notes** and **no to 16 beats** resulted in something incredibly bizarre. When I began this production, I was inspired by the sound design of the late producer [Qebrus](https://exophobiaorgqebrus.bandcamp.com/). But what I arrived at was completely different. The TidalCycles code for this track is about 100 lines. It makes ample use of the non-default TidalCycles function `ncat` written by pulu on the TidalCycles discord: \\n\\n```haskell\\nlet ncat = seqPLoop . go 0                                                        \\n      where                                                                       \\n        go _     []          = []                                                 \\n        go t_acc ((t, p):ps) = (t_acc, t\', p) : go t\' ps                          \\n          where                                                                   \\n            t\' = t_acc + t\\n```\\n\\nIt\'s basically `cat` but you specify how long the subpatterns last (see code below for usage). `ncat` allows me to spread a bunch of wild and contrasting sounds over a long cycle, and it\'s fun for improvising because you can change how long any one of the subpatterns lasts, and doing so shifts all the other patterns. In \\"10 Megakelvin\\" I use `ncat` to interweave drum samples from from the Modular Drums from Mars collection together with extremely sci-fi microtonal chords.  I\'ve found the main utility for this kind of horizontal sequencing and concatenation is it makes things more monophonic and musical (one idea at a time).  I find regular `cat` to be maybe too predictable or constant.  Here is most of the code I used for \\"10 Megakelvin\\":\\n\\n```haskell\\nsetcps(70/120)\\n\\n-- pitch notes down by 24 semitones for ableton drum racks so 0 = C1 \\nlet drumz = (|- n 24)\\n\\n-- sparse modular drum sounds and xenharmonic arpeggios\\nd1 $ every 5 (|+ n 3) $  mask \\"~ t t ~\\" $ ncat [\\n     (1.5, n (tScale\' 21 \\"0 5 7 12 17 28\\" \\"0 .. 17\\") # m 2 ),\\n     (0.5, drumz $ struct (timeline [5,3, 3, 7]) $ nT \\"mdfm\\" 14 \\"0 .. 14\\" # m 3),\\n     (0.5, n (tScale\' 21 \\"0 5 7 12 17 28\\" \\"0 .. 17\\")  # m 4),\\n     (1.5, drumz $ struct (timeline [5,3, 3, 7]) $ nT \\"mdfm\\" 14 \\"0 .. 14\\" # m 5),\\n     (1, n (tScale\' 21 \\"4 5 8 12 17 28\\" \\"0 .. 17\\") # m 2),\\n     (1.0, drumz $ struct (timeline [5,3, 3, 7]) $ nT \\"mdfm\\" 14 \\"0 .. 14\\" # m 3),\\n     (0.5, n (tScale\' 21 \\"0 5 7 12 17 28\\" \\"0 .. 17\\")  # m 4),\\n     (1.0, drumz $ struct (timeline [5,3, 3, 7]) $ nT \\"mdfm\\" 14 \\"0 .. 14\\" # m 5),\\n     (0.5, drumz $ struct (timeline [5,3, 3, 7]) $ nT \\"mdfm\\" 14 \\"0 .. 14\\" # m 1)\\n] # amp \\"0.6 0.2!5  0.6 0.5!5 0.6 0.5!5\\"\\n\\n\\n-- 18 beat two step rhythm.  1 = kick, 8 = hi hat, 3 = clap\\nd2 $ drumz $ n \\"1 ~ 8 ~   8 ~ 8 ~ 8  [1, 3] ~ 8 <~0>  8 ~ <~[8,0]> ~ 8 \\" # m 1\\n\\n\\n-- bass, toms, sci-fi chords, drum break with bongos\\nd6 $ every 5 (rev) $ every 9 (mask \\"~ t\\") $ every 7 (fast \\"<1.0 1.0 1.00  1.0>\\") $ stack [\\n    ncat [\\n     ( 7, struct \\"~ t t ~  t t ~ t   t t t ~   t t ~ ~  t t\\" $  nT \\"c\\" 4 (tScale\' 21 \\"0 3 6 9 12\\" \\"0 .. 8\\") # m 6),\\n    (1, n (tScale\' 21 \\"0 3 6 9 12 15 18\\" \\"[0, 1, 2, 3, 6, 7, 8]\\" |+  \\"<5>\\") # m 7),\\n     ( 7, struct \\"~ t t ~  t t ~ t   t t t ~   t t ~ ~  t t\\" $  nT \\"c\\" 4 (tScale\' 21 \\"0 3 6 9 12\\" \\"0 .. 8\\") # m 6),\\n    (1, n (tScale\' 21 \\"0 3 6 9 12 15 18\\" \\"0\\") ),\\n    (1, n (tScale\' 21 \\"0 3 6 9 12 15 18\\" \\"[0 2  6 8](12, 18)\\" ) # m 8),\\n     ( 1, struct \\"~ t t ~  t t ~ t   t t t ~   t t ~ ~  t t\\" $  nT \\"b2\\" 4 (tScale\' 21 \\"0 9 6 3 0\\" \\"0 .. 8\\") # m 6)\\n    ],\\n    mask  \\"t t\\" $ mask \\"<~t> ~ t <t ~ ~ ~>\\" $ every 7 (|+ n 1) $  drumz $ n \\"[<10 8 8 8 8 8 8 8>*2]!9\\" # m 1,\\n    -- sliced up acoustic drum break with bongos\\n    drumz $ every 5 (|+ n 12) $ (|+ n 2) $ n \\"0 .. 17\\" # m 9\\n]\\n\\n-- drum break only\\nd9 $ drumz $ every 5 (|+ n 12) $ (|+ n 2) $ n \\"0 .. 17\\" # m 9\\n\\n```\\n### Production Workflow\\nI\'ll conclude this section with some notes on my production workflow.\\n\\nI tend to mix, compress, and limit as I\'m composing and coding. I use a technique called [Brauerizing](https://brauerizing.wordpress.com/2014/03/19/brauerizing-a-how-to-guide/) where I group different instruments (drums, basses, melodies, harmonies) and compress and limit each group individually. Then I compress and limit on the master bus.  This glues the sounds together hierarchically and makes all the elements interact dynamically.  I almost consider it part of the composition because you need to consider: how much do you want your independent signals to overlap, where do you want negative space, etc. \\n\\n- This track *10 Megakelvin* is unusual because I didn\'t use any distortion, just heavy amounts of compression and a little Valhalla Reverb. For ear candy, I put an unsynced LFO on the cutoff frequency of a low-pass filter on the acoustic drum break--this technique helps make loops sound less repetitive and makes the whole track sort of wash and swell.\\n- On the hi-hats I use a free max4live device called \'Granular Mirror Maze\', which I heard about from a reddit AMA with Max Cooper.  It adds to these drums a really unique metallic sound that\'s distinct from normal stereo delay with feedback.\\n\\n## About Relyt R\\n\\nRelyt R is my new alias, the alter ego of Silicon Valley algorave artist and [AV Club SF](https://avclubsf.com) performer [R Tyler](https://instagram.com/1000instamilligrams). While R Tyler is influenced by jazz, prog, house, IDM, classical, and videogame music, Relyt R is a compartmentalized alias for xenharmonic techno at higher BPMs, alien and futuristic sounds, and brutalist sound design via machine learning.\\n \\nXuixo is my first release under this new alias, and I am fortunate to have had it released on [Sevish\'s xenharmonic label split-notes](http://split-notes.com). \\nI have been producing xenharmonic dance music since 2017 and live-coding music in TidalCycles since 2018. \\n\\nBeyond the topics in this blog post, I am captivated by 3D art, molecular biology, and sea creatures. I\'d like to thank the friends who have helped me along the way to this release, especially those who acquiesced to offering an initial vibe-check and listened to my EP when it was still a demo."},{"id":"/blog_topic_visualizer","metadata":{"permalink":"/blog/blog_topic_visualizer","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/blog_topic_visualizer.md","source":"@site/blog/blog_topic_visualizer.md","title":"Tidal Visualization with Didactic Pattern Visualizer","description":"| Developer | Iv\xe1n Abreu |","date":"2023-07-01T00:00:00.000Z","formattedDate":"July 1, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Visualization with Didactic Pattern Visualizer","date":"2023-07-01T00:00:00.000Z"},"prevItem":{"title":"Tidal Music - Xuixo EP by Relyt R","permalink":"/blog/blog_topic_relyt_r_xuixo"},"nextItem":{"title":"Tidal Profile - Helen Papaioannou","permalink":"/blog/tidal_profile_HelenPapaioannou"}},"content":"| Developer | [Iv\xe1n Abreu](https://ivanabreu.net/) |\\n| ---------------------: | :-------------- |\\n| Source code | [GitHub](https://github.com/ivan-abreu/didacticpatternvisualizer/tree/main) |\\n| Visualizing Application | [Processing](https://processing.org/) |\\n\\n## Introduction\\nDidactic Pattern Visualizer (DPV) is an easy way to visualize sound patterns from Tidal Cycles. It was created by the artist and creative technologist Iv\xe1n Abreu \\"...to study the potential and complexity of the syntax of the pattern system for sequencing Tidal Cycles sounds.\\" It utilizes the open source visualization program *[Processing](https://processing.org/)* to provide a scrolling grid where colored shapes appear in rhythm reflecting the flow of Tidal events (notes). The GitHub materials also includes Tidal Cycles examples using DPV by the musician and digital Artist [CNDSD](http://www.malitzincortes.net/).\\n\\nTo use DPV (summary):\\n- Install and configure the Processing application to receive OSC messages from Tidal\\n- Load the OSC and Tidal configurations each time you use it (or load it with your BootTidal.hs)\\n- Set the scrolling grid parameters for your Tidal session\\n- Add a connection parameter to each pattern you want to visualize\\n\\n### Installation\\nThe GitHub source includes a detailed [installation/configuration guide](https://github.com/ivan-abreu/didacticpatternvisualizer/blob/main/installation.md). The main step is to install the Processing application and add the oscP5 library file. You also need to download the Processing runtime pde files that make up the DPV codebase.\\n\\n### OSC targets\\nDPV leverages the ability of Tidal to send OSC messages to multiple targets (which is covered in the Tidal [OSC docs](https://tidalcycles.org/docs/configuration/MIDIOSC/osc#multiple-targets-and-messages).) DPV listens to OSC messages on port 1818. With the dual targets, every Tidal channel that has the *\\"connectionN\\"* parameter set will display the visual representation of notes.\\n\\n## Examples\\nThe [Readme](https://github.com/ivan-abreu/didacticpatternvisualizer/tree/main#readme) page includes an good set of examples  that include Tidal code along with mp4 files that play the audio with visualizations. There is also musical examples and code provided by the digital artist [CNDSD](https://vimeo.com/cndsd) - well know for expanding boundaries in live coding and interdisciplinary art forms.   \\n\\n## Usage\\nIn the ReadMe, Iv\xe1n notes that there are multiple ways to use DPV:\\n- As a tool for composing - for the visual feedback of ordering and sound intentions.\\n- During live performance, to help unfold the musical structure and then emphasize and direct attention to rhythmic interactions of multiple sound layers.\\n\\n## Creative Example - composed live code with visualization\\nThe example below shows how I used DPV to support composing prepared code with rhythmic patterns that use cross-rhythms, polymeter, and irregular beat patterns. I found it to be really helpful to see exactly what is happening within the cycles and observing how the note placements change as I make small adjustments to pattern values.\\n\\n- Screen recording of the full session: [Erratic Rhythms with visualization](https://youtu.be/QgCi6n5ZPRI)\\n- Tidal code: [GitHub - Erratic Rhythms](https://github.com/HighHarmonics2/livecoding/tree/main/tidal/erraticRhythms)\\n\\n### Description\\n*Erratic Rhythms* has 4 separate parts, each with its own distinct rhythmic character. The patterns were created so that each part stands out without \\"lining up\\" on the beats. The piece evolves so that the parts are played in different groups of 2 and 3 parts sounding together. Each part has a different timbre, using synthesizers available in SuperDirt (superhex, psin, supergong, soskick).\\n\\nThe organizing idea is to have fully independent parts - each with a distinctive character - that still work well together. To ensure part independence, I keep the rhythmic values of each part sounding in different parts of the beat. That is where the visualization and DPV really helped. During the stage of code preparation, I would experiment with different pattern values and closely watch the visualizations to see where the rhythms land, and then make adjustments to find the right values. During a performance session, I improvise on the prepared code options and use the visualization to give me a sense of how everything fits together and what I should do next.\\n\\n## Examples - Erratic Rhythms\\n1 [play](https://youtu.be/QgCi6n5ZPRI&t=65s) \\n\\n<img\\n  src={require(\'./hh-visualizer1.jpg\').default}\\n  alt=\\"Erratic rhythms - visualize ex 1\\"\\n  width=\\"600\\"\\n/>\\n\\n- d1 (lower part): 8 beat pattern on the beat with regular subdivisions\\n- d2 (upper part): 9 note pattern using a polymetric subdivision value of `%5.2` and `nudge 0.2`\\n\\n```haskell\\nd1 $ freq \\"[70 ~ 800] [<500 ~ > < ~ ~ <300*2 300*3> > [1170 ~ 900]]\\" # sound \\"superhex\\"\\n  # connectionN 4 # sizeMin 12 # sizeMax 80 # figure \\"rect\\" # color \\"0519f5\\" -- DVP OSC values\\n\\nd2 $ freq \\"{100 200 400 800 900 1100 1300 1500 1600}%<5.2>\\" # sound \\"psin\\"  #nudge 0.2\\n  # connectionN 3 # sizeMin 12 # sizeMax 60 # color \\"8905f5\\"\\n```\\n\\n2 [play](https://youtu.be/QgCi6n5ZPRI&t=172s)  \\n<img\\n  src={require(\'./hh-visualizer2.jpg\').default}\\n  alt=\\"Erratic rhythms - visualize ex 2\\"\\n  width=\\"600\\"\\n/>\\n\\n- d2 (lower): 9 note pattern, with polymetric subdivision value of `%7.4`\\n- d3 (middle): )17 note pattern with different metric divisor values `[supergong!17]/<3.4 5.2 1.2>`\\npattern speed changes with each cycle\\n- d4 (upper): 3 notes against 5 beats with notes offset with rests\\n\\n```haskell\\nd2 $ freq \\"{100 200 400 800 900 1100 1300 1500 1600}%<7.4>\\" # sound \\"psin\\"\\n\\nd3 $ mask (\\"1 0 1\\") $ s \\"[supergong!17]/<3.4 5.2 1.2>\\" #nudge 0.2\\n  # connectionN 2 # sizeMin 10 # sizeMax 20 # figure \\"circle\\" # color \\"2df505\\"\\n\\nd4 $ freq \\"~ 400 ~ 800 [~ <1300 1600> ~ ~]\\" # s \\"soskick\\"\\n  # connectionN 1 # sizeMin 12 # sizeMax 80 # figure \\"circle\\" # color \\"f58711\\"\\n```\\n\\n3 [play](https://youtu.be/QgCi6n5ZPRI&t=194s)  \\n\\n<img\\n  src={require(\'./hh-visualizer3.jpg\').default}\\n  alt=\\"Erratic rhythms - visualize ex 3\\"\\n  width=\\"600\\"\\n/>\\n\\n- d2: 9 note pattern with polymetric subdivision of 16\\n- d3: 17 note pattern with alternating polymetric subdivisions `%<1 1.4 0.8>`\\n\\n```haskell\\nd2 $ freq \\"{1100 200 400 800 900 1100 1300 1500 1600}%16\\"  # sound \\"psin\\"\\n\\nd3 $ mask (\\"1 1 1 0 1\\") $ sound \\"[supergong!17]/<1 1.4 0.8>\\" #nudge 0.2\\n   #connectionN 2 #sizeMin 10 #sizeMax 20 #figure \\"circle\\" #color \\"2df505\\"\\n```\\n\\n4 [play](https://youtu.be/QgCi6n5ZPRI&t=265s)  \\n\\n<img\\n  src={require(\'./hh-visualizer3.jpg\').default}\\n  alt=\\"Erratic rhythms - visualize ex 3\\"\\n  width=\\"600\\"\\n/>\\n\\n\\n```haskell\\nd2 $ jux (rev) $ freq \\"{100 200 400 800 900 100 1300 1500 1600 1800 2100 2400 ~}%11\\"  # sound \\"psin\\"\\n  # connectionN 3 # sizeMin 12 # sizeMax 60 # color \\"8905f5\\" # nudge 0.2\\n\\nd3 $ jux (rev) $ sound \\"[supergong!17]/<0.6 1>\\" # nudge 0.3\\n  # connectionN 2 # sizeMin 10 # sizeMax 20 # figure \\"circle\\" # color \\"2df505\\"\\n\\nd4 $ fast 0.5 $ every 2 (degradeBy \\"<0.2 0.5 0.8>\\") $ freq (\\"~ 400 ~ 800 [~ <1300 1600> ~!2]\\" |* 0.5) # s \\"soskick\\"\\n    # connectionN 1 # sizeMin 12 # sizeMax 80 # figure \\"circle\\" # color \\"f58711\\"\\n```\\nSo that\'s it! \\n- Full performance: [Erratic Rhythms - with visualization](https://youtu.be/QgCi6n5ZPRI)\\n- Tidal code: [GitHub - Erratic Rhythms](https://github.com/HighHarmonics2/livecoding/tree/main/tidal/erraticRhythms)\\n\\nCheck out Iv\xe1n\'s [Didactic Pattern Visualizer](https://github.com/ivan-abreu/didacticpatternvisualizer/tree/main)\\n\\nHighHarmonics"},{"id":"/tidal_profile_HelenPapaioannou","metadata":{"permalink":"/blog/tidal_profile_HelenPapaioannou","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_HelenPapaioannou.md","source":"@site/blog/tidal_profile_HelenPapaioannou.md","title":"Tidal Profile - Helen Papaioannou","description":"| Tidal Cyclist  | Helen Papaioannou    |","date":"2023-06-16T00:00:00.000Z","formattedDate":"June 16, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - Helen Papaioannou","date":"2023-06-16T00:00:00.000Z"},"prevItem":{"title":"Tidal Visualization with Didactic Pattern Visualizer","permalink":"/blog/blog_topic_visualizer"},"nextItem":{"title":"QBRNTHSS - making a live coding album","permalink":"/blog/blog_topic_qbrnthss"}},"content":"| Tidal Cyclist  | Helen Papaioannou    |\\n| --------:    | :---------- |\\n| aka          | Kar Pouzi / Papaloannov |\\n| Location     | Yorkshire, UK (currently Sheffield\u2026soon to be\u2026somewhere else in Yorkshire!) |\\n| Years with Tidal | 4 yrs intermittently |\\n| Music available online | YouTube, [BandCamp](https://dontdronealone.bandcamp.com/album/red-sprite)|\\n| Other music/audio sw | Baritone sax, synthesizers, Ableton, bells, toys, games, scores |\\n\\n## Livecoding\\n\\n**What do you like about livecoding in Tidal? What inspires you?**  \\nFor me, Tidal is a super-fun environment that affords many possibilities and surprises, right from the outset of starting as a beginner. I enjoy the feeling of being able to make changes with intention and the musical surprises that arise from unexpected interactions with functions, misunderstandings and errors. I also like that it\u2019s relatively easy to start making music even with limited experience of different functions and syntax.\\n\\n**How do you approach your livecoding sessions?**  \\nI use Tidal for a variety of purposes, sometimes for live situations, sometimes to create and record music that I then layer with other sounds (e.g. performing with baritone sax or synthesizers) and produce into tracks. For me, Tidal is a good tool to come to when I don\u2019t have or want a clear idea of what I want to do; even small changes to patterns can lead you down a musical rabbit hole you didn\u2019t foresee.\\n\\n**What coding approaches do you like to use?**  \\nAt the moment I\u2019ve been mainly having fun in Tidal by working with one sample, or a very small palette of samples. I have a lot of fun with limitations. Here\u2019s an example of doing something super simple with the same sample, using sometimesBy & silly increments of \u2018fast/slow\u2019, or random speed ranges, and sequences of the same sample repeated a different amount of times\u2026I like to push things until they break & often they do! I\u2019ve seen other people doing fun stuff with inverse patterns which I also often use.\\n\\n```haskell\\nlet\\ninverse 0 = 1\\ninverse 1 = 0\\n\\ndo\\nlet pat = \\"[1 0 1 0 0]\\"\\nd1 $ gain pat # s \\"ehit\\" # up \\"<-12>\\" # cps 1\\nd2 $ gain pat # s \\"ehit\\" # up \\"<-7>\\"\\nd3 $ gain pat # s \\"ehit\\"\\n--- ...\\n\\ndo\\nlet pat = \\"[1 0 1 0 0]\\"\\nd1 $ sometimesBy 0.3 (fast \\"0.99\\") $ gain pat # s \\"ehit\\" # up \\"<-12>\\" # cps 1\\nd2 $ sometimesBy 0.3 (fast \\"1.001\\") $ gain pat # s \\"ehit\\" # up \\"<-7>\\"\\nd3 $ gain (inverse <$> pat) # s \\"ehit\\"\\n\\n--- ...\\n\\ndo\\nlet pat = \\"[<1*11 1*12 1*13> 0 <1*10 1*14 1*16> 0 0]\\"\\nd1 $ sometimesBy 0.4 (palindrome) $ gain pat # s \\"ehit\\" # up \\"-12\\" # cps 1\\nd2 $ sometimesBy 0.4 (palindrome) $ gain pat # s \\"ehit\\" # up \\"-7\\"\\nd3 $ sometimesBy 0.4 (palindrome) $ gain pat # s \\"ehit\\"\\n```\\n\\nStarting from patterns of Greek dances, like hasaposerviko, make for fun improvs which could go anywhere\\n```haskell\\nd1 $ s \\"[~ ebd ~ ebd, ~ clap ~ clap:10, ~ <met:4?>, [fing ~ clap]*4]\\" # pan (rand)\\nd2 $ loopAt 4 $ s \\"hv\\" # n (irand 20)\\nd3 $ s \\"[[zouki2*2 zouki2]*4]\\" # n (irand 30)\\nd4 $ every 4 (|+ up \\"7\\") $ up \\"[-5 2]\\" # s \\"BruBass:2\\"\\n```\\n\\n**Do you use Tidal with other tools / environments?**  \\nYeah, I\u2019m not very faithful to any particular environment; I pick & choose depending on what I\u2019m doing and how I feel. I often end up recording improvisations or specific results of code I like in Tidal into a DAW and sometimes layer other things on top. Or I use Tidal to control synthesizers via MIDI.\\n\\n## Tidal Contributions\\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\nI have used Tidal in educational workshops and enjoy seeing how it excites people and inspires interest in music making more generally. I generally introduce/incorporate a variety of different approaches to music making when delivering workshops or teaching.\\n\\n## Music\\n\\n**What projects are you currently working on or planning? What\'s next?**  \\n- Ultraniche label is releasing one of my Kar Pouzi singles, Clippity Clop, in 2023. This track was originally an improvisation I did in a live set with Tidal, made with one electronic stab sample. I then revisited the code, recorded the output & played some sax on top, in unison with the resulting pattern generated in Tidal.\\n- I\u2019m slowly working towards a solo Kar Pouzi release in 2024, including tracks made using a variety of tools, including Tidal amongst other things.\\n- I\u2019m also writing a piece for 2 percussionists and touring an audiovisual collaboration in Japan with artist [Noriko Okaku](https://norikookaku.com/noriko-okaku).\\n- I\'ve been playing in a new, very quiet duo with percussionist Charlie Collins, which we\'re excited to perform & record soon.\\n\\n### Links to music  \\n- [My website](https://www.helenpapaioannou.com)\\n- [Kar Pouzi (solo)](https://dontdronealone.bandcamp.com/album/red-sprite)\\n- [Garlic Hug (EP)](https://aphelioneditions.bandcamp.com/album/the-truth-about-carbs) + [Party video](https://www.youtube.com/watch?v=PIlwngC4Csk)\\n- Here\'s a video interview I made for [florilegio](https://www.youtube.com/watch?v=yxH4ilCWMr0).\\n\\n#### Background\\n\\nI work with a mixture of approaches and tools in my music, sometimes improvising from scratch (with saxophone, synthesizers, or Tidal), sometimes composing things from start to finish (be it through a DAW or a score, sometimes incorporating Tidal in electronic works), or using pattern games and scenarios with ensembles which are somewhere in between.\\n\\n\\n<img\\n  src={require(\'./papaioannou_unicorn.jpg\').default}\\n  alt=\\"Helen with Unicorn\\"\\n  width=\\"400\\"\\n/>"},{"id":"/blog_topic_qbrnthss","metadata":{"permalink":"/blog/blog_topic_qbrnthss","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/blog_topic_qbrnthss.md","source":"@site/blog/blog_topic_qbrnthss.md","title":"QBRNTHSS - making a live coding album","description":"| Tidal musician | Ramon Casamaj\xf3 |","date":"2023-06-12T00:00:00.000Z","formattedDate":"June 12, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"QBRNTHSS - making a live coding album","date":"2023-06-12T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - Helen Papaioannou","permalink":"/blog/tidal_profile_HelenPapaioannou"},"nextItem":{"title":"Tidal Profile - Eloi el Bon Noi (Eloi the good guy)","permalink":"/blog/tidal_profile_Eloi_el_Bon_Noi"}},"content":"| Tidal musician | Ramon Casamaj\xf3 |\\n| ---------------------: | :-------------- |\\n| aka | QBRNTHSS |\\n| Location | Barcelona (Sp) |\\n| Album/Release | **The Magic Words Are Squeamish Ossifrage** |\\n| Genre | Glitch/Noise, Electronic, Experimental |\\n| Available | [Interworld Media - Bandcamp](https://interworldmedia.bandcamp.com/album/the-magic-words-are-squeamish-ossifrage) |\\n| Release date | 21/04/2023 |\\n\\n## Summary\\n\\nMy name is Ramon Casamaj\xf3 - aka *QBRNTHSS* (pronounced \u201cquebrantahuesos\u201d, meaning \u201cbearded vulture\u201d in Spanish). QBRNTHSS is the alias I use for my solo works focused on electronics. This post covers the live coding, mixing and recording process I used in my album, recently released through Interworld Media on Bandcamp.  \\n\\nThe album title - *The Magic Words Are Squeamish Ossifrage* is the plain text solution to many cryptographic challenges, a tradition originated in a challenge set by the authors of the RSA encryption algorithm in 1977. It is my first full-length album as QBRNTHSS, the result of more than a year of live performances and rehearsals using Tidal Cycles and Supercollider as main instruments. It\u2019s published on the Sheffield label [Interworld Media](https://www.interworld.media/releases/the-magic-words-are-squeamish-ossifrage/) in digital download and cassette tape, and aesthetically it\u2019s a mixture of synthetic textures, noisy ambients and broken rhythms.\\n\\nI\u2019m going to explain the recording process used for the whole album - except one track that was recorded previously without live coding, but I feel it fits in perfectly...I bet you can\'t guess what track it is :-)\\n\\n### Hardware and software used\\n\\nThe album was recorded and mixed in different locations with this hardware and software equipment:  \\n\\n- Lenovo ThinkPad T14 with Manjaro Linux\\n- Focusrite Scarlett 2i4\\n- Effects pedals: Boss DD-7 digital delay, TC Electronic Hall of Fame 2, Meris Ottobit Jr., Boss Metal Zone 2\\n- Korg Nanokontrol 2 midi controller\\n- Cadence (JACK)\\n- Carla plugin host\\n- VST synthesizers: Odin 2, Helm, Yoshimi\\n- Supercollider\\n- Tidal Cycles\\n- Ardour (DAW)\\n\\nAs sound sources I used some samples that I\u2019ve been collecting for a while (specially the percussion ones), some other samples that I have recorded by myself, and Supercollider synths made by the community and a few ones by myself.\\n\\nAfter the recording and mixing process the album was mastered by Alfonso EVEL at EVEL Records.\\n\\n### Recording process\\n\\nThe record is the culmination of about a year performing and rehearsing. At some point I had a bunch of good ideas (at least that\u2019s my impression), and the motivation to make a new album. But I didn\'t want to just record what I was doing live, my goal wasn\u2019t to document my live practice. I wanted to do an album that was interesting and enjoyable for itself, an album that I would buy myself and listen to at home.  \\n\\nFrom the beginning my conception of the album was to be a collection of short or concrete sound passages, the previous ideas went in this direction too. I didn\u2019t want to record long soundscapes that evolve slowly over many minutes, which I love too, but that wasn\'t the point here.  \\n\\nAlso some time before the recording I had started to use some effects pedals to process the sound and make the live performances more dynamic and fun, so I wanted to use them on the album.\\n\\nI decided to record on multiple tracks on the DAW (Ardour), and in more than one take when it was necessary. That allows me to:\\n\\n- Polish the mix in the daw.\\n- Apply more controlled dynamic changes from Tidal Cycles than if I had to record in one single take. I could focus on some parts of the song one after another.\\n- Process some parts separately with the effects pedals afterwards.\\n\\nThat said, I didn\u2019t record every sound in a separate track, just what I needed to let me construct the song comfortably. On the other hand I didn\u2019t do overdubs once a track was recorded, only little edits sometimes.\\n\\nSo basically the record process for a song went like this:\\n- Play and record the different tracks from Tidal Cycles to Ardour.\\n- In Ardour adjust the mix and do some edits if necessary.\\n- With an effects loop record again some tracks through the effects pedals, applying as I like it.\\n- Finalize the mix with the final touches: adjusting volumes, final edits (some fade-ins or fade-outs, cutting some starting or ending parts, etc), and do some stereo panning in some tracks.\\n\\n### Code\\nAs an example, here is the code and DAW screenshots for the second song on the album, entitled *Bone:*\\n\\n```haskell\\nsetcps (60/60)\\n\\n-- sustain loop\\nd1\\n$ trigger 1\\n$ s \\"snoisefb*5\\" # n \\"<b5\'min7>\\"\\n# voice 1\\n# sustain (rangex 0.025 0.9 $ slow 100 $ tri)\\n# lock 1 # delay 0.2 # delayt 0.1 # delayfb 0.2\\n# accelerate 1 # speed 3\\n# pitch1 (range 0.02 0.1 $ slow 27 $ sine)\\n# resonance 2.5 # gain 0.75\\n# octer 1\\n\\ndo\\n  let pats =\\n    \\t[\\n      \\t(\\"pl\\", s \\"HIHATS:6*4\\" # n ((irand 5)+10) # sustain 0.5),\\n      \\t(\\"cr\\", s \\"KORGER1*4\\" # n ((irand 4)+29) # sustain 0.1),\\n      \\t(\\"cl\\", s \\"~ claps ~ claps ~\\" # n ((irand 5)+2)),\\n      \\t(\\"bb\\", s \\"[BASEDRUMS:22*4, BASEDRUMS:41*4]\\"),\\n      \\t(\\"bs\\", s \\"BASEDRUMS\\" # gain 0.96 # n (choose [9,14,17,19,29,33])),\\n      \\t(\\"sl\\", s \\"~\\")\\n    \\t]\\n  d2 $ fast 2 $ ur 6 \\"[{pl} sl bb]\\" pats[]\\n  d1\\n\\t$ stb 0.3 (fast 2)\\n\\t$ s \\"snoisefb*5\\" # n \\"<b5\'min7>\\"\\n\\t# voice 1 # sustain 0.025\\n\\t# lock 1 # dly 0.2 0.1 0.2\\n\\t# accelerate 1 # speed 3\\n\\t# pitch1 (rgs 0.01 0.1 12)\\n\\t# resonance 2.5 # gain 0.75\\n\\t# octer 1\\n\\nd3\\n$ trigger 3\\n$ slow 11\\n$ s \\"wndelayfb\\" # n \\"c\\"\\n# gain 0.9\\n\\nxfadeIn 4 30\\n$ slow 10\\n$ off 0.01 (# fshift ((cF 0 \\"23\\")*220))\\n$ stb 0.3 (stutter 3 (1/32))\\n$ degradeBy 0.4\\n$ stb 0.4 (jux rev)\\n$ n (scramble 3 (arpg \\"<a5\'min7>\\")) -- ff5\'min9 d6\'sus4\\n# s \\"sawdelayfb\\"\\n-- # pan rand\\n# sustain 5 # gain 0.9 # orbit 3\\n\\nd5\\n$ n \\"c3\\" # s \\"fu\\"\\n-- # octave ((irand 5)+3)\\n# reps (((cF 0 \\"21\\")*3)+2)\\n# ftime (cF 0 \\"22\\")\\n# pan (rgs 0 1 2)\\n# gain 0.9\\n# lpf 1250\\n\\nxfadeIn 1 19 sil -- fb\\nxfadeIn 2 20 silence -- beats\\nd3 sil -- perc dly\\nxfadeIn 4 20 silence -- arpg\\nxfadeIn 5 20 silence\\n\\n```\\n\\n### DAW - Ardour\\nThe Ardour screenshot reflects the status after the first recording step. This is what I\u2019ve recorded in every daw track:  \\n\\n- d1 -> feedback synth\\n- d2 -> perc\\n- d3 -> delay perc\\n- d4 -> synth arpg\\n- d5 -> synth bloop\\n\\n\\n<img\\n  src={require(\'./qbrnthss-ardour1.png\').default}\\n  alt=\\"Ardour DAW view\\"\\n  width=\\"600\\"\\n/>\\n\\nNext, the Ardour screenshot shows the status after the effects loop recording step, where some edits and extra tracks with the effects pedals were applied:  \\n\\n- I changed the beginning of the song discarding the first part of the \u201cfeedback synth\u201d track (you can see the final track as \u201cfeedback perc\u201d and the original \u201cfeedback_perc_ini\u201d muted).\\n- I used the Boss delay pedal to add some dub flavor to the original track \\"perc\\", resulting in \u201cdrums_dly\u201d left and right (see the original track as \u201cdrums\u201d muted).\\n- I used the TC Electronic pedal to add some reverb to the original  \u201cdelay perc\u201d track, resulting in \u201cperc_delay_fx\u201d left and right (see the original track as \u201cperc_dly\u201d muted).\\n\\n<img\\n  src={require(\'./qbrnthss-ardour2.png\').default}\\n  alt=\\"Ardour DAW view 2\\"\\n  width=\\"600\\"\\n/>\\n\\nSo that\u2019s it. Hope that this post is interesting and that you can listen to *The Magic Words Are Squeamish Ossifrage.* Working on it was a challenge that I have enjoyed a lot, and I love the results\u2026 I think that finally I will buy the album!\\n\\n### More info\\nFor next gigs and more info you can follow me at:  \\n- http://callitanything.org\\n- https://www.instagram.com/rcasamajo/\\n- https://mastodon.online/@QBRNTHSS\\n- https://twitter.com/rcasamajo"},{"id":"/tidal_profile_Eloi_el_Bon_Noi","metadata":{"permalink":"/blog/tidal_profile_Eloi_el_Bon_Noi","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_Eloi_el_Bon_Noi.md","source":"@site/blog/tidal_profile_Eloi_el_Bon_Noi.md","title":"Tidal Profile - Eloi el Bon Noi (Eloi the good guy)","description":"| Tidal Cyclist  | Eloi Isern |","date":"2023-05-26T00:00:00.000Z","formattedDate":"May 26, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - Eloi el Bon Noi (Eloi the good guy)","date":"2023-05-26T00:00:00.000Z"},"prevItem":{"title":"QBRNTHSS - making a live coding album","permalink":"/blog/blog_topic_qbrnthss"},"nextItem":{"title":"How Link became Tidal\'s scheduler","permalink":"/blog/link_as_scheduler"}},"content":"| Tidal Cyclist  | Eloi Isern |\\n| --------:    | :---------- |\\n| aka          | Eloi el Bon Noi |\\n| Location     | Centelles (Spain) |\\n| Years with Tidal | 4 yrs |\\n| Other LiveCoding env | SonicPi, Hydra |\\n| Music available online | [YouTube](https://www.youtube.com/user/ieloi/playlists), [BandCamp](https://eloielbonnoi.bandcamp.com/music) |\\n| Code online  | https://github.com/eloielbonnoi |\\n| Other music/audio sw | Ableton Live, Audacity |\\n| Comments | [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-eloi-el-bon-noi/4716)|\\n\\n<img\\n  src={require(\'./eloi_09.jpg\').default}\\n  alt=\\"Eloi with logo\\"\\n  width=\\"600\\"\\n/>\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal?**  \\nFor me tidal cycles is a compositional tool because it allows me to make the complex music I\'ve always dreamed of and do it very quickly, and more importantly, it allows me to perform it by myself in any circumstance.\\nI\'m particularly interested in the ability to create complex iterative structures and the flexibility it gives you to manipulate the sound. Sometimes, when I finish writing one of my endless scripts, I\'ll run it and spend some time listening to what Tidal comes up with. *I\'m fascinated by the code\'s ability to generate unexpected structures all the time.*\\n\\n**What inspires you?**   \\nI am often inspired by the work of other composers and live coders. I\'m always looking for sessions on YouTube of artists I\'m interested in. I don\'t have a programming background so I often design my processes starting from those of other colleagues. In terms of genres, I spent a few years listening to a lot of 20th and 21st century contemporary music, but now I\'m quite interested in the experimental electronic music scene. Lately I\'ve been listening to a lot of glitch music that I discover on Bandcamp. I love browsing Bandcamp.\\n\\n**How do you approach your livecoding sessions?**  \\nI am currently presenting a series of short pieces, the \\"Rumble machines\\", which is basically a catalogue of algorithmic processes for generating sound and modeling it on the fly. It\'s a show designed to be listened to in good conditions, but it is not oriented to the dance floor. I\'m working on the possibilities of a script that allows me to mix pieces from other artists and manipulate them with the typical Tidal Cycles processes because I want to be able to offer a rave show.\\n\\n**What functions and coding approaches do you like to use?**  \\nI\'m super fan of the `slice` function. It works well with quantized loops. I use to modify the inner pattern on the fly. Starting here...\\n\\n```haskell\\nd1\\n  $ slice 8 \\"0 1 2 3 4 5 6 7\\"\\n  $ s \\"yourLoop\\"\\n\\n```\\n...and ending somewhere close to this\\n\\n```haskell\\nd1\\n  $ slice 8 \\"<0 [ 3 4]> 1!2 3*[4|8|2] [2 4 6] 5 <~ 6> <7 2>*[1|8|12]\\"\\n  $ s \\"yourloop\\"\\n\\n```\\n\\nThanks to live coders like [Hiroki Matsui](https://www.youtube.com/@hirokimtplc/videos) I\'ve rediscovered the `spread`($) function. I learned a lot from his work.\\n\\n```haskell\\ndo\\n  setcps (90/60/4)  \\n  d1\\n    $ fast 2\\n    $ stack [\\n             spread ($) [id, rev, (|+| accelerate \\"1 2\\"), (|+| coarse \\"16 32 24\\"), chop 16, stut 4 0.25 0.05 ] $\\n             cat [\\n              (sound \\"amencutup*8\\" # n (irand 32)) |+  accelerate (2),\\n              (sound \\"v*4\\" # n (irand 6)) |+| pan \\"[0 1]*4\\",\\n              (sound \\"casio*8\\" # n (irand 6)),\\n              (sound \\"ulgab*8\\" # n (irand 6)) |+| pan \\"[0 1]*4\\"\\n                  ]|+| unit \\"c\\" |+| speed 8 # room 0.4,\\n          whenmod 8 3 (const silence) $\\n           stack [\\n                    midinote (slow 2 $ (run 16) * 10 + 60)\\n                    # s \\"supergong\\"# pan (slow 7 $ range 0.8 0.2 $ sine) ,\\n                    midinote (fast 1 $ (run 16) * 10 + 60)\\n                    # s \\"supermandolin\\" # pan (slow 7 $ range 0.2 0.8 $ sine)\\n                  ]]\\n                    # decay \\"[1 0.2]/4\\"\\n                    # voice \\"[0.5 0]/8\\"\\n                    # sustain (slow 7 $ range 5 0.5 $ sine)\\n                    # room (range 0.4 0.9 $ slow 17 sine) # size(range 0.3 0.6 $ slow 17 sine)\\n\\n````\\n\\n<img\\n  src={require(\'./eloi_02a.jpg\').default}\\n  alt=\\"Eloi w\\"\\n  width=\\"600\\"\\n/>\\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\nI try to stay connected with the activities scheduled by the TopLap Barcelona community - attending our monthly *from scratch* sessions, being part of the festivals we program and giving Tidal workshops whenever I can. I\'m very fortunate to belong to this community and I feel very close to them. I\'m recently creating a live coding community in one of the universities in Barcelona. It is still an early project, but I hope that next year many students will join us.\\n\\nI take this space to make a reflection: *is the global live coding community getting old? In other words, are we managing to engage young people (post teenagers in their twenties)?*\\n\\n**Do you use Tidal with other tools / environments?**  \\nYes, I drive every orbit to a single track in Ableton Live adding compression, EQ and some limiter to each one. I also add some mastering patch to the main output.\\n\\n## Music  \\n\\n**How has your music evolved since you have been livecoding?**  \\nWithout Tidal Cycles I would not be able to produce my music or at least not as quickly. I try to think of my pieces as sound sculptures. Sound that moves and mutates structured by a chaotic order. I like the contrast between minimalist, almost pointillist fragments and noisy passages.\\nWorking with other musicians has always been conflicting for me for several reasons: the commitment, my questionable leadership skills... Discovering Tidal cycles has allowed me to make all the noise I wanted without needing anyone. This autonomy has then allowed me to collaborate with other artists in a much \\"healthier\\" way. **Thank you Alex!**\\n\\n**What projects are you currently working on or planning? What\'s next?**   \\n- My live coding practice is mainly focused on the creation of new material to be published at the end of the year and to be able to do many concerts in 2024. Although Tidal is a tool that saves you a lot of time, I\'m quite slow in composing and very demanding on myself. The preparation of the live shows takes me a lot of time.\\n- I collaborate with Eloy Fern\xe1ndez Porta, a very interesting writer and thinker with whom we do spoken word sessions. Curiously we are both named Eloi, an unusual name.\\n- I also have a project **Noi$** with [White P\xe8rill](https://whiteperill.bandcamp.com/) in which we make improvised electronic music from scratch. In our shows I use the screen to tell the biography of a composer with humor interspersed with code and writing.\\n\\n    - [Noi$: Toplap Barcelona - Viu Multichannel Expansion](https://www.youtube.com/watch?v=jwX3TpOaodo&list=PLPpU9K6Wgm8tmhWsAwBRPr2rIy3xtKKeN&index=6&ab_channel=TOPLAP_BARCELONA)\\n\\n    - [Noi$: Bandcamp](https://elsnois.bandcamp.com/music)\\n\\n- In 2024 I will collaborate with a very interesting poetess and a flamenco singer. I will keep you posted. I am very excited!\\n\\n### Music / recorded livecoding sessions:\\n- https://eloielbonnoi.com/\\n- https://www.youtube.com/user/ieloi/playlists\\n- https://eloielbonnoi.bandcamp.com/album/siroll-sofisticat\\n- https://linktr.ee/eloielbonnoi\\n\\nComments: [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-eloi-el-bon-noi/4716)"},{"id":"/link_as_scheduler","metadata":{"permalink":"/blog/link_as_scheduler","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/link_as_scheduler.md","source":"@site/blog/link_as_scheduler.md","title":"How Link became Tidal\'s scheduler","description":"Introduction","date":"2023-05-19T00:00:00.000Z","formattedDate":"May 19, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"How Link became Tidal\'s scheduler","date":"2023-05-19T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - Eloi el Bon Noi (Eloi the good guy)","permalink":"/blog/tidal_profile_Eloi_el_Bon_Noi"},"nextItem":{"title":"Prepared Code with ghostchamb3r","permalink":"/blog/blog_topic_ghostchamb3r"}},"content":"## Introduction\\r\\n\\r\\nHello, I\'m Pierre Krafft, aka Zalastax, a software engineer and hobby-musician from Gothenburg, Sweden. I\'ve been enjoying Tidal since late 2021 after first dabbling a bit with Orca and, way before that, Sonic Pi. I primarily use Tidal to control hardware synthesizers using MIDI. Tidal is a really neat sequencer and I think there\'s a lot of untapped potential which I hope to explore more in the future.\\r\\n\\r\\nThis post shares my experience of replacing a significant part of the Tidal internals.\\r\\nWhat I achieved is a direct integration from Tidal with Link,\\r\\nwhich is a library for synchronizing musical time between applications.\\r\\n\\r\\nIn this post, I\'ll explain why Link integration was important to me,\\r\\nprovide an introduction to Tidal internals (with a focus on scheduling),\\r\\nsome important concepts of Link,\\r\\nand how I overcame some really tough challenges!\\r\\n\\r\\n## The idea\\r\\nI make music with friends who use traditional synth setups.\\r\\nTo have our synths play in sync, we connect them over MIDI.\\r\\nBut when I started using Tidal,\\r\\nsetting up the MIDI clock was not so convenient and I was afraid of it crashing, which would stop the show for everyone.\\r\\nSo I started looking for a way to have a stable MIDI clock\\r\\nand connect it with Tidal.\\r\\nSoon thereafter, I learned about Link.\\r\\n\\r\\nThe purpose of Link is to \\"synchronize musical beat, tempo, phase [...] across multiple applications running on one or more devices.\\" Unlike traditional MIDI clock synchronization, which relies on a single device acting as the master clock and sending timing information to all connected devices, Link uses a peer-to-peer network protocol to allow all devices to communicate with each other and agree on a common tempo and beat phase. This allows for more accurate and stable synchronization between devices, even if the tempo changes or if devices are added or removed from the network. Additionally, Link provides a way to sync devices wirelessly, eliminating the need for physical connections between devices.\\r\\n\\r\\nMy idea was to have some application listen to the MIDI clock and use Link to sync Tidal with that MIDI clock.\\r\\nI learned later that Link is not meant to be used that way,\\r\\nbut the idea got me started on integrating Tidal with Link...\\r\\n\\r\\n## I get started\\r\\n\\r\\nNovember 2021 is the start of my journey for adding Link support to Tidal.\\r\\nI started discussing the path forward with Yaxu, Tidal\'s inventor, in two Github Issues ([1](https://github.com/yaxu/hylia-haskell/issues/1), [2](https://codeberg.org/uzu/tidal/issues/660)).\\r\\nYaxu had already done some thinking about adding Link to Tidal and he had also done some exploration that I could learn from.\\r\\nHis positive responses motivated me and brought me confidence that this was a pursuit worth taking!\\r\\n\\r\\nOne of the main challenges of integrating Link with Tidal was that Tidal is written in Haskell, while Link is a C++ library. I knew that C++ libraries can be exposed as C libraries, and Haskell can interact with C libraries through a mechanism called the \\"Foreign Function Interface\\" (FFI), but I had never done so before.\\r\\nNonetheless, I set out to create a basic Link integration in Haskell and I fairly quickly had something that compiled.\\r\\nIn the world of Haskell, this is often a huge success which means you can pack up - work\'s done!\\r\\nBut in this case, work was far from done...\\r\\n\\r\\n## Challenges\\r\\n\\r\\nSome parts of the Link library was working, but when calling the crucial code `this->link.enable(true);`, GHC (the Haskell compiler / interpreter) crashed.\\r\\n\\r\\nDebugging internal GHC crashes is tricky for most people, so I made many twists and turns to find out what might be wrong.\\r\\nSeveral long nights were spent reinstalling Haskell and battling build system configuration.\\r\\nThe full details are documented in [the issue for Link support in Tidal](https://codeberg.org/uzu/tidal/issues/660), but the short story is that I found out that could avoid the crash by including Link as a shared Library.\\r\\nThis workaround was not suitable for the final release of Link support, but it let me continue the work.\\r\\n\\r\\nAfter making great progress on the Link integration, I became ready to start replacing the workaround.\\r\\n6 weeks into my ambitious project, I was ready to report an [issue to the Haskell maintainers](https://gitlab.haskell.org/ghc/ghc/-/issues/20918).\\r\\nI reported that my program worked when using `cabal v2-run` but not `cabal v2-repl`.\\r\\nSince Tidal uses GHCi (the REPL), this problem was crucial to resolve.\\r\\n\\r\\nSeveral GHC maintainers pitched in, offering suggestions and trying to reproduce my issue.\\r\\nUnfortunately, I could reproduce the issue, but the GHC maintainers were not as successful so interest faded.\\r\\n\\r\\nI went ahead and reproduced the issue several times, but only on Windows - not Linux, and even got a friend to reproduce it on their machine.\\r\\nHowever, this did not immediately rekindle the interest of the maintainers.\\r\\n\\r\\nI started digging deeper to identify the root cause.\\r\\nFirst by using WinDbg, but the call stacks and multiple threads were too convoluted for me to digest.\\r\\nSo I resorted to print-debugging, working my way through the C++ code, adding printouts everywhere.\\r\\nSoon thereafter, I had my eureka moment!\\r\\nI isolated the issue to be caused by using C++ Exceptions!\\r\\nEven caught exceptions caused issues for GHCi, but not for the compiled executable.\\r\\n\\r\\nI could now provide a [minimal example](https://github.com/Zalastax/ghc-bug-20918) and, one day later, a Haskell maintainer replied with a [detailed analysis](https://gitlab.haskell.org/ghc/ghc/-/issues/20918#note_414002), which I quote here in full:\\r\\n> The RTS\'s Runtime linker doesn\'t support C++ exceptions on any platform in non-dynamic way. Historically we\'ve never needed to as not many C++ code was being used.  It works on Linux because it defaults to dynamic way, which gets the system loader to handle the heavy lifting.\\r\\n>\\r\\n> On Windows we don\'t handle .xdata and .pdata sections, so once you get an exception the OS unwinder asks us if we can handle the exception and we say no and move on and the crash occurs. You don\'t see GHC\'s panic message because the dynamic code is created outside of GHC\'s VEH region.\\r\\n> \\r\\n>> If I instead build a .dll and make my FFI calls towards that .dll, the code does not crash in GHCi\\r\\n>\\r\\n> Yes for the same reason as it works on Linux, the exception will be handled by the system unwinder.\\r\\n>\\r\\n> Now supporting this on Windows these days is a lot easier than it used to be.  GHC Already has a native exception handling in place for itself in the VEH handlers. and we\'ve dropped support for x86. x86_64 uses exception tables but gives us an easy way to extend the exception tables for dynamic code like JITed code.\\r\\n\\r\\n3 months later, the issue was fully fixed and ready to be included in GHC 9.4.2.\\r\\nThis let me finally remove the workaround, use Link directly instead of as a shared library,\\r\\nand integrate my work to the Tidal repository.\\r\\nThis bug in GHC is the reason Tidal 1.9 requires GHC 9.4.2 or later on Windows.\\r\\n\\r\\nI\'m very proud of my perseverence to resolve this issue.\\r\\nI started my attemps late November 2021 and merged the code to Tidal early July 2022.\\r\\n\\r\\n## Link and Tidal integration: Architecture Overview\\r\\n\\r\\nThe integration of Link with Tidal posed several challenges but the end result was a success. In this section, we provide an overview of the architecture of the Link and Tidal integration and discuss the design choices made along the way. This information can serve as a guide for those who wish to create their own Link integration in different projects.\\r\\n\\r\\n### Tidal Innards\\r\\n\\r\\nLet\'s start by exploring some Tidal Innards. For a more complete reference, please refer to [What is a pattern?](https://tidalcycles.org/docs/innards/what_is_a_pattern).\\r\\n\\r\\nSome important concepts in Tidal innards are Arc, Part and Event:\\r\\n```\\r\\n-- | A time arc (start and end)\\r\\ntype Arc = (Time, Time)\\r\\n\\r\\n-- Tidal often needs to represent a Part of an Arc.\\r\\n-- It does so with two arcs, the first representing the whole of the part,\\r\\n-- and the second the part itself.\\r\\n-- Often both arcs will be the same,\\r\\n-- which simply means that we have a whole that has a single part.\\r\\n--\\r\\n-- | The second arc (the part) should be equal to or fit inside the\\r\\n-- first one (the whole that it\'s a part of).\\r\\ntype Part = (Arc, Arc)\\r\\n\\r\\n-- | An event is a value that\'s active during a timespan\\r\\ntype Event a = (Part, a)\\r\\n```\\r\\n\\r\\nTidal processes musical patterns by querying for all Events within an Arc.\\r\\nThe Events returned by the query are distributed to targets such as SuperCollider.\\r\\nThese details remained unchanged when moving to Link as the base for the scheduler.\\r\\n\\r\\n### Link Concepts\\r\\n\\r\\nThe Link API is responsible for converting between beats/cycles on a shared timeline and a clock that corresponds to when the sound should play from the speaker.\\r\\nThe concept is visualized in a timeline diagram below.\\r\\nTwo Link instances are shown.\\r\\nThe top and bottom of the diagram show how the two instances have their own beat counter.\\r\\nHowever, the beats have a shared phase - they align over bar or loop boundaries.\\r\\nI created the diagram below with alignment every 8 bars.\\r\\n\\r\\n![link timeline diagram](./link_timeline.png)\\r\\n\\r\\nThe API between Tempo.hs and Stream.hs hides how Link is called.\\r\\nThis helps separate concerns but could also enable alternative time keeping mechanisms.\\r\\nIt should not be too difficult to implement the API using the local system clock and memory to keep track of a local timeline.\\r\\nPlease reach out if you would like to create such an implementation!\\r\\nDoing so could open the door for adding back other synchronization mechanisms again :)\\r\\n\\r\\nThe API between Tempo.hs and Stream.hs includes the following operations:\\r\\n\\r\\n```\\r\\ndata LinkOperations = LinkOperations {\\r\\n  timeAtBeat    :: Link.Beat -> IO Link.Micros,\\r\\n  timeToCycles  :: Link.Micros -> IO P.Time,\\r\\n  getTempo      :: IO Link.BPM,\\r\\n  setTempo      :: Link.BPM -> Link.Micros -> IO (),\\r\\n  linkToOscTime :: Link.Micros -> O.Time,\\r\\n  beatToCycles  :: CDouble -> CDouble,\\r\\n  cyclesToBeat  :: CDouble -> CDouble\\r\\n}\\r\\n```\\r\\n\\r\\n#### Calling the Link API from Haskell\\r\\n\\r\\nAs mentioned in [Troubles](#Troubles), Link is a C++ library and the Haskell integration is done using the \\"Foreign Function Interface\\" (FFI).\\r\\nHaskell has some support for integrating directly with C++,\\r\\nbut it seemed too difficult to use for my taste.\\r\\n\\r\\nFortunately, while I was working on my implementation,\\r\\nLink released a C-wrapper of their library.\\r\\nIntegrating with C-libraries from Haskell is fairly easy,\\r\\nand mostly comes down to setting up the compiler correctly and defining the C-functions in a .hsc-file.\\r\\n\\r\\nConversion is straight forward:\\r\\n```Haskell\\r\\n-- Haskell\\r\\ndata AbletonLinkImpl\\r\\ndata SessionStateImpl\\r\\n\\r\\nnewtype AbletonLink = AbletonLink (Ptr AbletonLinkImpl)\\r\\nnewtype SessionState = SessionState (Ptr SessionStateImpl)\\r\\n\\r\\nforeign import ccall \\"abl_link.h abl_link_commit_app_session_state\\"\\r\\n  commitAppSessionState :: AbletonLink -> SessionState -> IO ()\\r\\n```\\r\\n\\r\\n```C\\r\\n// C\\r\\n\\r\\n typedef struct abl_link\\r\\n  {\\r\\n    void *impl;\\r\\n  } abl_link;\\r\\n\\r\\n  typedef struct abl_link_session_state\\r\\n  {\\r\\n    void *impl;\\r\\n  } abl_link_session_state;\\r\\n\\r\\nvoid abl_link_commit_app_session_state(\\r\\n    abl_link link, abl_link_session_state session_state);\\r\\n```\\r\\n\\r\\n### Ticks and Processing Ahead\\r\\n\\r\\nTidal needs to process events a few hundred milliseconds early so that the event can reach the sound engine/synthesizer in time.\\r\\nOtherwise, the event would play late from the speaker, and we would not be synchronized with others in the same Link session.\\r\\nThe processing ahead is configured via `cProcessAhead`.\\r\\n\\r\\nThe scheduler is based on \\"logical time\\" that uses a tick based system.\\r\\nThis means that the implementation keeps track of the starting time and the length of each \\"tick\\" in order to step time forward in equal chunks.\\r\\nTo turn the tick number into a \\"logical time\\", the following formula is used:\\r\\n\\r\\n```\\r\\nlogicalTime startTime ticks\' = startTime + ticks\' * frameTimespan\\r\\n```\\r\\n\\r\\nWorking with logical time / ticks is a common approach to avoid time drifts which I kept from the original scheduler.\\r\\nI\'m not sure how much difference it still makes now that Link does the heavy lifting,\\r\\nbut it felt safest to keep it.\\r\\n\\r\\n### Putting it together\\r\\n\\r\\nWith the different components explained, I can now explain the whole:\\r\\n- Tidal processes events ahead of time by querying for events within an Arc that has not happened yet (based on the tick system).\\r\\n- Processing events ahead of time is common to all Link based systems since it\'s the only way to not play the sound too late due to the Link API being based on when the sound should play from the speaker.\\r\\n- The translation from cycles in Tidal to a timestamp is performed by the Link API.\\r\\n\\r\\nThe picture below shows the relation between Link, the logical clock, and the current time.\\r\\nThe current time is greater than the logical time of Tick 24,\\r\\nwhich means that we should be processing all Events that happen between the Arc `(Tick 24,  Tick 25)`.\\r\\nWe query for all Events within this Arc and convert the start and end cycle of each Event to a clock time by using the Link API.\\r\\nAs mentioned earlier, the events that we currently query for should all happen in the future.\\r\\nThis is why the mapping from Logical clock to Link instance time is a diagonal arrow that goes forward in time.\\r\\n\\r\\n![logical clock](./logical_clock.png)\\r\\n\\r\\n\\r\\n### A note about multithreading\\r\\n\\r\\nThe scheduler runs in a separate thread, so Tidal is multithreaded.\\r\\nThis follows the approach used by the previous scheduler and ensures that the GHCi REPL keeps being responsive.\\r\\n\\r\\nThe original design used several MVars to copy data between processes.\\r\\nMVars are a concept from concurrent Haskell.\\r\\nThey act as synchronising variables and are used for communication between concurrent threads.\\r\\n\\r\\nHowever, the design based on several MVars made the code difficult to follow and hard to verify for correctness.\\r\\nIn the new design, we communicate between threads using a list of actions, similar to dispatching Actions to Redux in JavaScript or calling an actor in Erlang.\\r\\nThis puts all the tricky logic that deals with the internal state in a single place.\\r\\nFollowing this approach makes the code much more easy to reason about and is why I like Erlang so much ;)\\r\\n\\r\\nThe list of actions is communicated using an `MVar [TempoAction]`.\\r\\nThe definition of `TempoAction` is as follows:\\r\\n\\r\\n```\\r\\ndata TempoAction =\\r\\n  SetCycle P.Time\\r\\n  | SingleTick P.ControlSignal\\r\\n  | SetNudge Double\\r\\n  | StreamReplace ID P.ControlSignal\\r\\n  | Transition Bool TransitionMapper ID P.ControlSignal\\r\\n```\\r\\n\\r\\nEach action can thus be handled in sequence, making the logic easy to reason about.\\r\\n\\r\\n## Final words\\r\\n\\r\\nContributing to Tidal was (and continues to be) a very fun experience!\\r\\nThe community is very nice and supportive and I enjoy working in the codebase.\\r\\n\\r\\nIt was surprising to see that I appear to be the first person to integrate between Haskell and C++ on Windows.\\r\\nAt least I am the first to report an error instead of giving up.\\r\\nI mean, the error I stumbled upon would have been found in most efforts to use C++ from Haskell because exceptions are very common in C++.\\r\\n\\r\\nOnce I could avoid the bugs in GHC, reworking the Tidal internals was quite straight forward.\\r\\nEven though I ripped most of the scheduler apart, the Haskell type system guided me through the refactoring.\\r\\nThe next goal was always visible and I had direction for what next step to take.\\r\\n\\r\\nFinally, I want to thank my girlfriend Moa for supporting me through this project and for listening to me explaining my ups and downs.\\r\\nThe details must have been inpenetrable to understand,\\r\\nbut she still listened and shared my joy or despair.\\r\\nFor that, and incountable other things: Moa, I love you!\\r\\n\\r\\nTo the rest of the Tidal community, you\'re awesome too, and I\'m happy to be a part of your world!\\r\\n\\r\\n## References\\r\\n* [Codeberg Issue - Link support](https://codeberg.org/uzu/tidal/issues/660)\\r\\n* [GHC Issue - Sudden exit in GHCi for FFI code - works when run as executable](https://gitlab.haskell.org/ghc/ghc/-/issues/20918)\\r\\n* [Link documentation](http://ableton.github.io/link/)\\r\\n* [What is a pattern?](https://tidalcycles.org/docs/innards/what_is_a_pattern)"},{"id":"/blog_topic_ghostchamb3r","metadata":{"permalink":"/blog/blog_topic_ghostchamb3r","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/blog_topic_ghostchamb3r.md","source":"@site/blog/blog_topic_ghostchamb3r.md","title":"Prepared Code with ghostchamb3r","description":"Keeping it on the rails","date":"2023-05-14T00:00:00.000Z","formattedDate":"May 14, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Prepared Code with ghostchamb3r","date":"2023-05-14T00:00:00.000Z"},"prevItem":{"title":"How Link became Tidal\'s scheduler","permalink":"/blog/link_as_scheduler"},"nextItem":{"title":"Tidal Profile - LINALAB","permalink":"/blog/tidal_profile_LINALAB"}},"content":"## Keeping it on the rails\\n\\n### About Me\\n*Hello, I am ghostchamb3r and this is my Masterclass.* :ghost:\\n\\nFor lack of a better term I produce electronic dance music. I take influences from a variety of genres and as a result I use a variety of production techniques and sound design approaches. When I go to upload my music to Spotify I just tell Spotify that it\'s Hard Techno, because sure, why not? I\'m pretty sure it\'s not actually hard Techno or any of the other genres from the pulldown list. I don\'t know what it is. What I do know is that it\'s danceable and it hits hard on a club room floor.\\n\\nI produce in Ableton Live and I perform in Tidal Cycles.\\n\\nI spent a considerable amount of time deciding on how I was going to go about performing my music. At the end of the day turntables were not for me. I love Tidal Cycles and what it lets you do with samples. I love how portable it makes performing electronic music. All of my sets are just a laptop, an audio interface, and two 1/4 inch jack outputs to the house system. It doesn\'t get any more complicated than that and it makes the sound techs lives easier. Getting a projector set up to share my\\nscreen is probably the only troublesome thing I encounter but a lot of times the house has a projector and it\'s not a huge issue. I looked into other live coding environments as well and tried Sonic Pi for a short while. Ultimately I just like Tidal better than the others and that\'s purely my preference.\\n\\nI work with prepared code for my live sets and I do so for a number of reasons.\\nUltimately I\'m not someone who uses live code to realize my ideas, or rather I don\'t use live code out of the gate as a compositional tool.\\n\\nI\'m comfortable with a certain set of tools (probably too comfortable) and how they support my creative process. My process starts in Ableton. I consider the slick, polished studio version of a piece and it\'s live code counterpart as two different entities. One exists as a fine-tuned, finessed experience intended for listening as a fixed-media representation of a musical idea. The other is a live interpretation of that with room for improvisation and deviation, so that each live performance is a unique experience. Maybe that approach riles some feathers, I can\'t say for sure, but it\'s fun for me and doesn\'t hurt anyone and that\'s all I care about.\\n\\n### Preparation of Code\\nI like to think of preparation of code more as a consideration for the audience than as something intended to help me perform. There\'s a lot of cool things that can happen if you just improvise freely but even if people can see my screen, ultimately what I\'m experiencing is far different than the audience in an improvisational setting because ultimately I\'m making decisions and the audience is not. They might experience anticipation and their response might influence my performance but in the end they don\'t have any sort of direct control over the music and so it\'s important to me to consider their experience when I perform.\\n\\nFor me, that means having the skeleton of a piece prepared in advance so that I have room to improvise and react to the audience\'s response while still being able to move from one section of a piece to another and maintain a sense of movement or progression through musical ideas to keep the audience engaged. A piece doesn\'t constantly need to be grabbing the listener\'s attention, in my opinion, but I want to maintain a flow between getting lost in the music and having it bring the listener into the present moment.\\n\\n### Skeleton\\n\\nHere\'s a track I made, titled Birth Machine, in Ableton.\\n\\n<img\\n  src={require(\'./ghostchamb3r-daw.jpeg\').default}\\n  alt=\\"Birth Machine DAW track\\"\\n  width=\\"600\\"\\n/>  \\n\\nI personally love the work of HR Giger and have since I was very young. The piece was a reflection on the Giger painting of the same name. I don\'t agree with some of Giger\'s ideas in regards to that particular piece of art, but I think it\'s still a really solid piece of artwork.\\n\\n### *Birth Machine* - 2 Versions\\n| Polished studio version  | wildly unhinged live coded version   |\\n| :--------:    | :----------: |\\n| [Birth Machine: tr 2 of NECRONOM](https://ghostchamb3r.bandcamp.com/track/birth-machine) | [Birth Machine: Live at Ice House MPLS](https://ghostchamb3r.bandcamp.com/track/birth-machine-live-at-ice-house-mpls) |\\n\\nHere\'s the signal chain for the main synth track:\\n\\n<img\\n  src={require(\'./ghostchamb3r-fxchain.jpeg\').default}\\n  alt=\\"Birth Machine signal chain\\"\\n  width=\\"600\\"\\n/>\\n\\n- I have Serum piped out to LFO Tool to smooth out some of the rumbliness of the overall signal\\n- Compression a\'la FabFilter-C with aggressive limiting a\'la FabFilter-L\\n- Sidechain compression to attenuate the signal when one of the other synths come in\\n- An FFT spectrum analyzer set to a K-14 meter to monitor the signal loudness see the frequency spectrum\\n- Automation on the cutoff frequency of the low pass filter inside serum\'s FX chain.\\n\\nOver the course of a few bars the cutoff opens up more and more and lets the signal through, giving it a nice smooth fade in as the track plays through it\'s opening lines. I\'ve also automated some pitch bending on the mod wheel to give it a sense of organic movement in the signal that gives it a nice sense of liveness, for lack of a better term.\\n\\n### Serum patch - Bhad Bhabie for *Birth Machine*\\n\\n<img\\n  src={require(\'./ghostchamb3r-serum.jpeg\').default}\\n  alt=\\"Birth Machine Serum patch\\"\\n  width=\\"600\\"\\n/>\\n\\n- The patch is tuned to a Maqam tuning using a tun file loaded into the global settings. The tun file was generated from Scala. I started getting board with 12 TET a while ago and Scala has been a really fun way for me to get excited about writing synth lines again.\\n- The piece consists of 8 tracks and the sections are evenly written into 1-bar, 2-bar, or 4-bar phrases.\\n    - 1 drum rack\\n    - 5 instances of Serum\\n    - 1 instance of Cthulhu\\n    - a track for some sample files\\n    - a mastering chain on the Master track\\n\\n### Performing *Birth Machine* in TidalCycles\\n\\nI just start by rendering samples from each section (in 1-bar, 2-bar, or 4-bar durations depending on their length) and saving them in my Dirt Samples folder each in their own sub folder within the main Dirt Samples folder.I also put a lot of consideration into the way I name my sample files. I usually include the track name or an acronym/abbreviation of it and a description of the sound.\\n\\nWith my brain anxiously trying to keep all the channels sorted while people are watching me, a phrase that describes the sample sound just tends to be much more useful because I will 100% forget what \\"BM_MainSynth\\" sounds like or does in the whole mix while \\"BMGrind\\" is instantly identifiable and my brain says *\\"oh that\'s the thing that\'s making the grindy sound, okay that\'s the one I need to adjust right now.\\"* Or if I\'m hearing something coming from a channel that needs to be turned off I can listen and think *\\"okay there\'s something making a scattering sort of sound\\"* and then I look through my channels and voila, there\'s \\"BMScatter\\".\\n\\n### Drums the \\"Whole-Chunk\\" way\\n\\nIf you\'re the kind of person who starts in the DAW and moves everything over to code afterwards, there are two approaches to performing the drum tracks.\\n\\n1. Render the drum samples individually, save them to the Dirt Samples folder and write patterns using those samples, like:\\n\\n    `d1 $ s \\"Kick [Kick, Snare] Kick [Kick, Snare]\\"`\\n\\nThat can work but there can be drawbacks:\\n- Velocity information from MIDI drum racks might be lost\\n- Anything very slightly off the beat grid will be lost\\n- Drum sections made with sequencers can be a painstaking process to recreate, depending on the specific sequencer and pattern used\\n\\n2. **Whole-chunk**: render the drum track as one full sample, then transform it  \\nThis is what I did for *Birth Machine.* So even though the opening drum section is just a quarter kick on the first beat and nothing else - I can use `splice`, `fast`, and `randslice` commands to transform that into something else and  seamlessly transform it back into a simple quarter kick on the first beat just by changing or erasing the opening segment of that one line of code. Or just copy and paste the change into a new line so you can easily go back to something you thought was pretty neat without the hassle of remembering it and rewriting it.\\n```haskell\\nd1 $ s \\"BMDrums:1\\" # gain 1.1\\nd1 $ splice 8 \\" 1 3 4 2 8 7 7 6\\" $ s \\"BMDrums:1\\" # gain 1.1\\n```\\n\\nYou can also do really neat stuff with rhythms when you approach them the \\"whole-chunk\\" way. This section:\\n\\n    d1 $ s \\"BMDrums:2\\" # gain 1.1\\n\\nwas 2 bars of drum patterns which could have been coded as:\\n\\n    d1 $ s \\"[Kick, OpenHat:1] [Kick, Snare, OpenHat:2] [Kick, OpenHat:1] [Kick, Snare, OpenHat:2]\\"\\n\\nor\\n\\n    d1 $ s \\"[[Kick, OpenHat:1] [Kick, Snare, OpenHat:2]]*2\\"\\n\\nfollowed by\\n\\n    d2 $ s \\"[closed:1, closed:2, closed:1, closed:2]*4\\"\\n\\nbut, in my opinion, it\'s fun and easier to just write:\\n\\n    d1 $ s \\"BMDrums:1\\"\\n\\nand then to radically transform by simply adding:\\n\\n    d1 $ splice 8 \\" 1 3 4 2 8 7 7 6\\" $ s \\"BMDrums:1\\" # gain 1.1\\n\\nI also like to use additional FX onto my drum sections in Ableton. If you slap a reverb from Tidal onto your drum channel then you\'ll get what you\'d expect, a drum section with some reverb. But if you render a sample of a drum section that already has a reverb baked into it or maybe some reverb and additional FX and then do something like:\\n\\n    d1 $ splice 8 \\" 1 3 4 2 8 7 7 6\\" $ s \\"BMDrums:1\\" # gain 1.1\\n\\nThen you\'re suddenly going to get not only the drum samples themselves chopped and rearranged around but also the pre-rendered reverb, delay, or distortion you baked into the sample and sometimes it can sound really cool, depending on the pattern of the chop you programmed into Tidal.\\n\\nFor me the **whole-chunk** approach leads to some really next-level drum patterns that I\'ve found tend to get an extremely positive response from audiences. People in general are accustomed to a kick drum hitting very regular beats. A kick drum that flies all over the place in a pattern so wild it almost feels random is something very raw that alerts people\'s senses and it\'s something I use in a lot of my tracks to build up to different sections.\\n\\nWith the live performance of *Birth Machine* you start with a very regular kick drum beat that quickly starts flying all over the place and once enough synth layers have built up everything releases and drops back to a very regular quarter kick beat. The effect is something similar to a drop or build up in EDM but it\'s uniquely a live coding sort of technique.\\n\\nI like to do the same thing with **synth lines.** In *Birth Machine* you have a very predictable sort of synth line\\nthat, once the track enters its second A section, suddenly changes to feel more synced to the beat but in an erratic way. It\'s unexpected and when triggered at the right moment the audience responds to it very positively.\\n\\n### Birth Machine code\\n\\n<details>\\n  <summary>Birth Machine: full code I start with for performance</summary>\\n    setcps (144/60/4)\\n\\n    d1 $ s \\"BMDrums:1\\" # gain 1.1\\n    d1 $ splice 8 \\" 1 3 4 2 8 7 7 6\\" $ s \\"BMDrums:1\\" # gain 1.1\\n\\n    d1 $ fast 16 $ randslice 8 $ s \\"BMDrums:1\\" # gain 1.1\\n\\n    d2 $ fast 4 $ randslice 4 $ s \\" BMGrind:1\\" # shape 0.2 # lpf 3200 # gain 1.2\\n    d2 $ fast 16 $ randslice 8 $ s \\" BMGrind:2\\" # shape 0.2\\n    d2 $ splice 8 \\" 1 3 4 2 8 7 7 6\\" $ s \\" BMGrind:2\\" # shape 0.2\\n\\n    d2 $ slice 16 \\"16 15 14 13 12 1 2 3 4 15 14 13 12 5 6 7 8 11 10 9\\" $ s \\"BMGrind:1\\" # shape 0.4\\n    d3 $ slow 2 $ s \\"BMPulse\\" # delay 0.4 # delayfb 0.5  # delaytime 0.4 # lpf 2400\\n\\n    d3 $ slow 2 $ striateBy 16 (1/8) $ jux rev $ s \\"BMPulse\\" # lpf 700 # delay 0.4 # delayfb 0.5  # delaytime 0.4\\n\\n    d4 $ slow 2 $ s \\"[BMChop:2 BMChop:2 BMChop:2 BMChop:2] [~~~~]\\" # delay 0.8 # delayfb 0.6  # delaytime 1.4\\n    d4 $ slow 2 $ s \\"[BMChop:2 ~ ~ ~] [~~~~]\\" # delay 0.8 # delayfb 0.6  # delaytime 1.4\\n    d4 $ slow 2 $ jux rev $ s \\"[BMChop:2 ~ ~ ~] [~~~~]\\" # delay 0.8 # delayfb 0.6  # delaytime 1.4\\n\\n    d4 $ slow 2 $ s \\"[[BMChop:2 BMChop:2] ~ [BMChop:2 BMChop:2] ~] [~~~~]\\" # delay 0.8 # delayfb 0.6  # delaytime 1.4\\n\\n    d5 $ striateBy 16 (1/8) $ s \\"BMScatter:2\\"\\n    d5 $ splice 8 \\" 6 6 6 5 5 5 3 2\\" $ striateBy 16 (1/8) $ jux rev $ s \\"BMScatter:2\\"\\n    d5 $ chew 8 \\"7 6 5 1 \\" $ striateBy 8 (1/8) $ jux rev $ s \\"BMScatter:2\\"\\n\\n    d5 silence\\n\\n    d1 $ s \\"BMChop:1\\" # gain 1.1\\n\\n    d3 $ slow 2 $ splice 8 \\" 6 8 7 5 3 3 2 1\\" $ s \\"BMPulse\\" # delay 0.4 # delayfb 0.5  # delaytime 0.4\\n    do\\n        d1 $ s \\"BMDrums:2\\" # gain 1.1\\n        d2 $ s \\"BMGrind:1\\"\\n        d3 silence\\n        d4 silence\\n        d5 silence\\n        d6 silence\\n\\n    d2 $ striateBy 4 (1/4) $ s \\"BMGrind:2\\" # shape 0.6\\n\\n    d1 $ s \\"BMChop:1\\" # gain 1.1\\n\\n    d1 $ splice 8 \\"1 4 1 3 2 6 1 7\\" $ s \\"BMDrums:1\\" # gain 1.1\\n    d2 $ splice 8 \\"[2*8 4 16 2 7 32 16 8]\\" $ jux rev $  s \\"BMGrind:2\\" # shape 0.3\\n    d3 $ slow 2 $ slice 8 \\"8 8 8 ~ ~ 2 2 1\\" $ s \\"BMPulse\\" # delay 0.4 # delayfb 0.5  # delaytime 0.4\\n\\n    d3 $ slow 2 $ slice 8 \\"8 8 8 ~ ~ 2 2 1\\" $ jux rev $ s \\"BMPulse\\" # delay 0.4 # delayfb 0.5  # delaytime 0.4\\n\\n    d4 $ slow 2 $ s \\"[BMChop:2 BMChop:2 BMChop:2 BMChop:2] [~~~~]\\" # delay 0.8 # delayfb 0.6  # delaytime 1.4\\n    d5 $ striateBy 16 (1/8) $ s \\"BMScatter:4\\"\\n    d5 $ splice 16 \\" 3 2 16 15 14 12 11 8 7 6 5 3 1\\" $ striateBy 16 (1/8) $ jux rev $  s \\"BMScatter:4\\"\\n\\n    d6 $ s \\"BMGrind:1\\" # gain 1.1\\n    d4 $ fast 8 $ randslice 8 $ jux rev $ s \\"BMChop:2\\" # delay 0.8 # delayfb 0.6  # delaytime 1.4\\n    do\\n        d1 $ s \\"BMDrums:2*8\\" # gain 1.1\\n        d2 $ s \\"BMGrind:3*4\\"\\n        d3 silence\\n        d4 silence\\n        d5 silence\\n        d6 silence\\n\\n    d2 silence\\n    d3 silence\\n    d4 silence\\n    d5 silence\\n\\n</details>\\n\\n\\nI also like to keep an entire set in one file with comment breaks for each piece. I also keep all channels silence commands saved somewhere either at the beginning or very end of the whole document so I can always jump to the command I need if things go too far off the rails. Depending on the pieces I have planned to perform or how much improvising I plan to do I try to keep at least 10 channels ready to silence but sometimes as many as 20.\\n\\n## Code saving strategy\\n\\nWith *Birth Machine* I have some changes to the studio/vanilla version prepared ahead of time. I don\'t have the original code saved either, so whatever I forget to change back at the end of a performance remains in the code, so it sort of permanently changes and mutates with every performance. On other pieces I keep both a 1) slightly modded version and 2) a very vanilla version that is completely faithful to the studio version so that I can do entirely new and different things to it live spontaneously.\\n\\n### *Sapphica*\\nI did something similar with a piece commissioned by the Minnesote Opera, titled *Sapphica.*  \\n\\n| YouTube Performance  | Remixed version on Bandcamp   |\\n| :--------:    | :----------: |\\n| [Sapphica: Minnesota Opera](https://www.youtube.com/watch?v=4QBEQ2Cv5XI) | [Sapphica Redux](https://ghostchamb3r.bandcamp.com/album/sapphica-redux) |\\n\\n<details>\\n  <summary>Sapphica code: vanilla version of Act 2</summary>\\n\\n    setcps (120/60/4)\\n\\n    d1 $ slow 5 $ s \\"Sapph2intro\\"\\n    do\\n      d1 $ sound \\"wolfkick [BehemothSnare, BehemothKick] wolfkick [BehemothSnare, BehemothKick, BehemothClap]\\"\\n      d2 $ sound \\"[BehemothOpen BehemothClosed BehemothOpen BehemothClosed]*4\\"\\n      d3 $ sound \\"[~] [BehemothMini BehemothMini ~ ~] [~] [BehemothMini BehemothMini ~ ~]\\"\\n      d4 $ slow 3 $ sound \\"Sapph2Bass1:1\\" # gain 1.1\\n\\n    do\\n      d4 $ slow 2 $ s \\"Sapph2Bass1:2\\" # gain 1.1\\n      d5 $ slow 3 $ s \\"Sapph2rythym:1\\"\\n      d6 $ slow 3 $ s \\"Sapph2rythym:2\\"\\n\\n    do\\n      d4 $ slow 3 $ s \\"Sapph2inter:1\\"\\n      d5 $ slow 3 $ s \\"Sapph2inter:2\\"\\n      d6 $ slow 3 $ s \\"Sapph2vocalchop:1\\"\\n      d7 $ slow 3 $ s \\"Sapph2vocalchop:2\\"\\n\\n    d7 silence\\n\\n    do\\n      d1 silence\\n      d2 silence\\n      d3 silence\\n      d4 $ slow 4 $ s \\"Sapph2trans\\"\\n      d5 $ slow 4 $ s \\"Sapph2out:3\\"\\n      d6 silence\\n      d7 silence\\n      d8 silence\\n      d9 silence\\n\\n    d4 silence\\n\\n    do\\n      d1 $ sound \\"wolfkick [BehemothSnare, BehemothKick] wolfkick [BehemothSnare, BehemothKick, BehemothClap]\\"\\n      d2 $ sound \\"[BehemothOpen BehemothClosed BehemothOpen BehemothClosed]*4\\"\\n      d3 $ sound \\"[~] [BehemothMini BehemothMini ~ ~] [~] [BehemothMini BehemothMini ~ ~]\\"\\n      d4 silence\\n      d5 silence\\n      d6 $ slow 4 $ s \\"Sapph2out:1\\"\\n      d7 $ slow 4 $ s \\"Sapph2out:2\\"\\n\\n    d1 silence\\n    d2 silence\\n    d3 silence\\n    d4 silence\\n    d5 silence\\n    d6 silence\\n    d7 silence\\n    d8 silence\\n    hush\\n\\n</details>\\n\\n<details>\\n  <summary>Sapphica code: slightly modded version</summary>\\n\\n    setcps (120/60/4)\\n\\n    d1 $ slow 5 $ s \\"Sapph2intro\\"\\n\\n    do\\n      d1 $ sound \\"wolfkick [BehemothSnare, BehemothKick] wolfkick [BehemothSnare, BehemothKick, BehemothClap]\\"\\n      d2 $ sound \\"[BehemothOpen BehemothClosed BehemothOpen BehemothClosed]*4\\"\\n      d3 $ sound \\"[~] [BehemothMini BehemothMini ~ ~] [~] [BehemothMini BehemothMini ~ ~]\\"\\n      d4 $ slow 3 $ sound \\"Sapph2Bass1:1\\" # gain 1.1\\n\\n    d4 $ slow 3 $ striateBy 16 (1/4) $ rev $ s \\"Sapph2Bass1:1\\" # gain 1.1\\n\\n    do\\n      d4 $ slow 2 $ s \\"Sapph2Bass1:2\\" # gain 1.1\\n      d5 $ slow 3 $ s \\"Sapph2rythym:1\\"\\n      d6 $ slow 3 $ s \\"Sapph2rythym:2\\"\\n\\n    do\\n      d4 $ slow 3 $ s \\"Sapph2inter:1\\"\\n      d5 $ slow 3 $ s \\"Sapph2inter:2\\"\\n      d6 $ slow 3 $ s \\"Sapph2vocalchop:1\\"\\n      d7 $ slow 3 $ s \\"Sapph2vocalchop:2\\"\\n\\n    do\\n       d6 $ slow 3 $ rev $ striateBy 12 (1/4) $ s \\"Sapph2vocalchop:1\\"\\n       d7 $ slow 3 $ striateBy 12 (1/2) $ s \\"Sapph2vocalchop:2\\"\\n\\n    d7 $ slow 3 $ rev $ slice 12 \\"12 11 10 9 4 5 6 7 1 2 3 8\\" $ s \\"Sapph2vocalchop:2\\"\\n    d7 silence\\n\\n    do\\n      d1 silence\\n      d2 silence\\n      d3 silence\\n      d4 $ slow 4 $ s \\"Sapph2trans\\"\\n      d5 $ slow 4 $ s \\"Sapph2out:3\\"\\n      d6 silence\\n      d7 silence\\n      d8 silence\\n      d9 silence\\n\\n    do\\n       d4 silence\\n       d5 $ slow 4 $ striateBy 16 (1/4) $ s \\"Sapph2out:3\\"\\n\\n    do\\n      d1 $ sound \\"wolfkick [BehemothSnare, BehemothKick] wolfkick [BehemothSnare, BehemothKick, BehemothClap]\\"\\n      d2 $ sound \\"[BehemothOpen BehemothClosed BehemothOpen BehemothClosed]*4\\"\\n      d3 $ sound \\"[~] [BehemothMini BehemothMini ~ ~] [~] [BehemothMini BehemothMini ~ ~]\\"\\n      d4 silence\\n      d5 silence\\n      d6 $ slow 4 $ s \\"Sapph2out:1\\"\\n      d7 $ slow 4 $ striateBy 16 (1/4) $ s \\"Sapph2out:2\\"\\n\\n    hush\\n\\n</details>\\n\\nWith the code that already has some variations:\\n- I have changes that I know I like and can adjust the values.\\n- I can also easily transition from things that work to things that I haven\'t tried before.\\n\\nWith the completely vanilla versions:\\n- I have a structure that aligns with the studio version.\\n- I can change and reinterpret in a much more improvised manner.\\n\\nI usually choose one version of the code to commit to and then keep that in my file for that set.\\n\\n## SuperCollider template\\nI also keep a template for all my SuperCollider code. It contains all the code I would want ready on-the-fly to save time during a performance. I comment all the lines so that I know what does what. I find it helpful to have these things ready in one file.  I\'d rather have the code do what I expect while performing rather than have it send back an error because I made a typo and didn\'t capitalize something. If an error is going to happen I want it to be because I pushed the limit of the hardware or software, but that\'s just me.\\n\\n\\n<details>\\n  <summary>SuperCollider setup and customizations</summary>\\n\\n    //To check what audio devices you have available.\\n    ServerOptions.devices\\n\\n    //To boot the server on your ASIO device. You\'ll want to replace the Focusrite with your own device as it\'s referred to in the string array shown after running the code on line 10.\\n    s.options.inDevice_(\\"Focusrite USB ASIO\\").outDevice_(\\"Focusrite U SB ASIO\\"); s.boot;\\n\\n    //Set the sample rate\\n    s.options.sampleRate = 44100;\\n\\n    //Create 20 channels for 10 stereo channels\\n    s.options.numOutputBusChannels = 20;\\n\\n    //Start superdirt and specify the numer of orbits or stereo channels\\n    ~dirt.start(57120, \\\\[0, 2, 4, 6, 8, 10, 12, 14, 16, 18\\\\]);\\n\\n    //Blocksize, change depending on your hardware and latency\\n    s.options.blockSize = 128;\\n    s.options.hardwareBufferSize = 128;\\n\\n    //Start superdirt\\n    SuperDirt.start;\\n\\n    // In case you need to increase the memory allocated to supercollider\\n    s.options.memSize = 3145728;\\n    s.options.memSize = 8192*32;\\n\\n    //Kills the server and cuts all audio from supercollider\\n    Server.killAll\\n\\n    //If you get latency issues you can set it here\\n    s.latency = 0.05;\\n\\n    //To record your session\\n    s.record;\\n    s.stopRecording\\n\\n    //Set the orbits up for Tidal\\n\\n    ~dirt.orbits[1].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[2].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[3].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[4].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[5].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[6].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[7].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[8].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[9].set(\\\\fadeTime, 4);\\n    ~dirt.orbits[10].set(\\\\fadeTime, 4);\\n\\n    //code for Sidechain compressor taken from https://github.com/musikinformatik/SuperDirt/blob/develop/hacks/filtering-dirt-output.scd\\n    ~bus = Bus.audio(s, numChannels:2); // assuming stereo, expand if needed\\n\\n    ~dirt.orbits[0].outBus = ~bus; // play into that bus.\\n\\n    // make a side chain controlled by second orbit, affecting the first\\n    (\\n    Ndef(\\\\x, {\\n    \\tvar control = InBus.ar(~dirt.orbits[1].dryBus, 2).sum;\\n    \\tvar dirt = InBus.ar(~bus, 2);\\n    \\tCompander.ar(dirt, control, thresh:0.006, slopeBelow:1, slopeAbove: 0.1, clampTime:0.05, relaxTime:0.1)\\n    \\t//dirt * (1 - (Amplitude.kr(control) > 0.007).poll.lag(0.01));\\n    }).play;\\n    )\\n\\n    /*\\n    cleaning up when you\'re done (run the code below to release the sidechain):\\n    */\\n    (\\n    Ndef(\\\\x).clear;\\n    ~busses.do { |x| x.free };\\n    ~dirt.orbits.do { |x| x.outBus = 0 };\\n    );\\n\\n    // algorave mastering, roughly according to\\n    // https://mccormick.cx/news/entries/heuristic-for-algorave-mastering\\n    (\\n    ~busses = ~dirt.orbits.collect { |each|\\n    \\tvar bus = Bus.audio(~dirt.server, ~dirt.numChannels);\\n    \\teach.outBus = bus;\\n    \\tbus\\n    }\\n    );\\n\\n    (\\n    Ndef(\\\\x, {\\n    \\tvar level = 1;\\n    \\tvar distortion = 3;\\n    \\tvar reverbFeedback = 0.1;\\n    \\tvar all = ~busses.collect { |each| InBus.ar(each, each.numChannels) };\\n    \\tvar mix = all.sum { |x|\\n    \\t\\tvar d = { 0.01.rand } ! x.size;\\n    \\t\\tDelayN.ar(x, d, d)\\n    \\t};\\n    \\tvar loop = LocalIn.ar(~dirt.numChannels);\\n    \\t5.do { loop = AllpassL.ar(loop, 0.15, { ExpRand(0.03, 0.15) } ! 2, 3) };\\n    \\tmix = loop * reverbFeedback + mix;\\n    \\tmix = LeakDC.ar(mix);\\n    \\tLocalOut.ar(mix);\\n    \\tmix = Compander.ar(mix, mix, 0.3, slopeBelow:1, slopeAbove:0.5, clampTime:0.01, relaxTime:0.01);\\n    \\tmix = (mix * distortion).tanh * (level / distortion.max(1));\\n    \\tmix\\n    }).play;\\n    );\\n\\n    /*\\n    cleaning up when you\'re done:\\n    */\\n    (\\n    Ndef(\\\\x).clear;\\n    ~busses.do { |x| x.free };\\n    ~dirt.orbits.do { |x| x.outBus = 0 };\\n    );\\n\\n</details>\\n\\n## Closing\\n\\nI don\'t think my approach is right for everyone. In fact, it might only be right for me and only me. The intent of this article was just to share my coding practice and open the discussion up further. If anyone found anything useful or inspiring in any capacity I think that would be wonderful.\\n\\nThis article also came about after some forum thread posts I made in response to Heavy Lifting\'s blog post: [Working with samples the Heavy Lifting way](https://tidalcycles.org/blog/tidal_profile_heavylifting).\\nThe [discussion thread from her article](https://club.tidalcycles.org/t/blog-post-working-with-samples-the-heavy-lifting-way/4643/1) is really interesting and I was inspired to respond with my own approach.\\n\\nI think each coder\'s approach is going to be unique in some capacity and they\'re all valid. People change too and that\'s especially true with musicians, producers, and composers. The approach I take now might not be the one I take seven years from now or even between one performance to the next and I think there\'s room to move between approaches fluidly if it sparks your creativity and brings you joy. I would hope that we are all doing this to have fun, and ultimately we should do what is fun for us.\\n\\n---\\n**Comments:** Share your thoughts and keep the discussion going via this [Club Tidal forum thread](https://club.tidalcycles.org/t/blog-topic-prepared-code-by-ghostchamb3r/4705)."},{"id":"/tidal_profile_LINALAB","metadata":{"permalink":"/blog/tidal_profile_LINALAB","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_LINALAB.md","source":"@site/blog/tidal_profile_LINALAB.md","title":"Tidal Profile - LINALAB","description":"| Tidal Cyclist        | Lina Bautista                                            |","date":"2023-05-08T00:00:00.000Z","formattedDate":"May 8, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - LINALAB","date":"2023-05-08T00:00:00.000Z"},"prevItem":{"title":"Prepared Code with ghostchamb3r","permalink":"/blog/blog_topic_ghostchamb3r"},"nextItem":{"title":"Tidal Profile - digital selves","permalink":"/blog/tidal_profile_digitalselves"}},"content":"| Tidal Cyclist        | Lina Bautista                                            |\\n| -------------------- | -------------------------------------------------------- |\\n| aka                  | Linalab                                                  |\\n| Location             | Barcelona                                                |\\n| Years with Tidal     | 10?                                                      |\\n| Code online          | GitHub                                                   |\\n| Other music/audio sw | MaxMSP, VCVRack, ...                                     |\\n| Hardware             | Analog Four, Modular synths                              |\\n| Comments             | [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-linalab/4695) |\\n\\n## \\n\\nI\u2019m Lina, I\u2019m a composer and live coder, I see myself as a long-distance runner in live coding. I\u2019m not a fast learner, but I\u2019ve always been enthusiastic to see and to analyse other live coders\' techniques, especially in live sessions (it\u2019s not the same to see a streamed or pre-recorded session, than to feel the space and share it with the live coder), that\u2019s probably why I\u2019ve organised many performances, workshops, Algoraves and projects around live coding and Tidal. \\n\\n## Livecoding  \\n\\n\\n**How do you approach your livecoding sessions?**  \\n\\nIf we talk about two main approaches of a live coding session: the fully pre-composed material on the one, and a from scratch/blank screen session on the other, I\u2019m closer to the second.\\n\\nIt was great to read the [Heavy Lifting post](https://tidalcycles.org/blog/tidal_profile_heavylifting) about this approach, it\u2019s great to see I\u2019m part of the blank screeners team  :).  Personally, I\u2019m not able to craft the session the way I want if I have too many lines, I\u2019ve tried, but I get lost in the code, I\u2019m not able to dig deep into everything that\u2019s happening. It\u2019s probably because I have to control every note, every sound.  Besides, I think there\u2019s a special beauty in writing a single line of code, that goes beyond the musical aspect, it can be performative, almost poetic. \\n\\n(\u2026 but don\u2019t get me wrong, I totally admire live coders who are able to prepare everything in advance).\\n\\nMost of the time (when I can carry them) I use synthesizers to perform, I know Tidal is the best with samples with all the incredible functions to manipulate them, but I come from the DIY modular synth scene, so I really enjoy analogue sounds. I currently use MIDI and sometimes audio signals to control my synths. \\n\\n\\n**What functions and coding approaches do you like to use?**  \\n\\nI guess what I like most about Tidal is the pattern structures and the possibility to create and modify algorithms on-the-fly, I\u2019m a fan of mini-notation and creating complex polyrhythms and structures with just a simple line, like: \\n\\n\\n    d1 $ s \\"[bd(<9 5 4>,16),can:4(7, 16, 14) ]\\" \\n\\nhaha, not really my style, but you can get the idea\u2026 \\n\\nOther functions that define my sessions are arpeggios and scales, I usually make changes between the notes, number of notes, modes of arpeggios and so on.\\n\\n    d1 $ fast 2 $ arp \\"up\\" $ n \\"e\'min\'6\\" # s \\"superchip\\" # octave 2\\n\\n\\nAnd combining all that, I try to reach things like this during a session:\\n\\n    d1 $ s \\"bd*4\\"\\n    d2 $ fast 2 $ arp \\"up\\" $ n \\"e\'min\'<6 8>\\" # s \\"superchip\\" # octave 2\\n    d3 $ s \\"superchip(<7 5 1>,12)\\" # n (scale \\"minor\\" \\"<0 2> .. <12 7 3>\\"|+ 4)\\n\\n\\nI\u2019ve found a useful way of making transitions by transforming the rhythms between binary patterns to ternary and vice versa. It creates interesting polyrhythms and with different subdivisions I have a lot of performative options.\\n\\nI\'d like to be able to switch to something completely different more quickly sometimes, but I guess that\u2019s the problem of not having written anything else\u2026 Or not being able to think fast enough to create something new\u2026\\n\\n\\n## Tidal Contributions  \\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\n\\nA few years ago we created (with Iv\xe1n Paz, and thanks to many enthusiastic live coders) the [Toplap Barcelona node](https://toplap.cat/en/home), and since 2018, maybe before, we\u2019ve being organising workshops, concerts, festivals, projects non-stop \u2026 we\u2019re always planning exciting things around live coding. \\n\\n**What motivates you to work on Tidal?**   \\n\\nI like the active community that is always changing, creating new functions and developing things, for example I\u2019ve been dreaming for years to implementing functions to use CV (control voltage), and it seems it\u2019s already there, so [I\u2019ll give this a try.](https://tidalcycles.org/docs/configuration/MIDIOSC/control-voltage/)\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**  \\n\\nMy music varies from melodic ideas to noisy/ambient textures. I enjoy making multichannel experimental sessions as well as dance sessions, and everything in between. Making people dance has been a challenge for me for years, but I think I\u2019m finally getting there. \\n\\n\\n**What projects are you currently working on or planning? What\'s next?**  \\n\\nI\u2019m not sure yet, but I have been working with new material lately and spending more time on live coding than with my other practices (I also have a band), so maybe it\u2019s time to record something new, we\u2019ll see\u2026\\n\\n\\n### Links to your music / recorded livecoding sessions:\\n\\n- https://linalab.com/ currently under construction :/\\n- [Solstice Night stream](https://youtu.be/DNRZ6u2ksRI)\\n- [808 La hora del live coder](https://www.youtube.com/live/p7nBr-cR31k?feature=share)\\n- [Ice Shards, Down the Rabbit Hole](https://callitanythingrecords.bandcamp.com/track/ice-shards)\\n\\n\\n\\nComments: [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-linalab/4695)"},{"id":"/tidal_profile_digitalselves","metadata":{"permalink":"/blog/tidal_profile_digitalselves","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_digitalselves.md","source":"@site/blog/tidal_profile_digitalselves.md","title":"Tidal Profile - digital selves","description":"|          Tidal Cyclist | digital selves                                               |","date":"2023-04-08T00:00:00.000Z","formattedDate":"April 8, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - digital selves","date":"2023-04-08T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - LINALAB","permalink":"/blog/tidal_profile_LINALAB"},"nextItem":{"title":"Working with samples the Heavy Lifting way","permalink":"/blog/tidal_profile_heavylifting"}},"content":"|          Tidal Cyclist | digital selves                                               |\\n| ---------------------: | :----------------------------------------------------------- |\\n|               Location | London, UK                                                   |\\n|       Years with Tidal | 5ish yrs                                                     |\\n|   Other LiveCoding env | Supercollider, p5.js, hydra, marching.js,Max (and/or) pd     |\\n| Music available online | [SoundCloud](https://soundcloud.com/digitalselves), [Bandcamp](https://digitalselves.bandcamp.com/) |\\n|            Code online | [GitHub](https://github.com/lwlsn)                           |\\n|   Other music/audio sw | Audacity, Renoise Tracker DAW @_@                            |\\n|           Forum Thread | [Autonomous Computer Music Tidal Forum Thread](https://club.tidalcycles.org/t/autonomous-tidal-code-generation/1064/2) |\\n\\n<img\\n  src={require(\'./digitalSelves-med.jpg\').default}\\n  alt=\\"digital selves\\"\\n  width=\\"600\\"\\n/>  \\n\\nphoto credit: Antonio Roberts\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal? What inspires you?**   \\n\\nI think the main thing that I like about Tidal for me is working, transforming, shaping and shifting patterns, and listening to the changes in real time. I recently co-ran a workshop with Iv\xe1n Paz, Alex McLean and Dave Griffiths in Sheffield and at Hangar in Barcelona (we did it remotely at the same time- thanks to On The Fly for having us :) ). We talked a lot about patterns in the context of other traditions, like weaving. To me, it\'s interesting to think about computer music in this way.\\n\\nI\'m also super inspired by everyone else who is contributing through making music, creating forums for discussion, or working hard to make it an inclusive space. The community has always been one of the best things about TidalCyles <3\\n\\n**How do you approach your livecoding sessions?**  \\n\\nI feel like I have two \\"modes\\" when it comes to live coding- testing things out and performing things. They\'re not mutually exclusive though, and often I will test things live on stage, or perform things to nobody else but me.\\n\\n**What functions and coding approaches do you like to use?**  \\n\\nI find it hard to have more than one or two functions in my head at the same time, and tend to go through phases when perfoming live of only using the same ones because they\'re the ones I remember under pressure.\\n\\nSome of my favourites recently are using [press](https://tidalcycles.org/docs/reference/time/#press) and [fshift](https://tidalcycles.org/docs/reference/audio_effects/#frequency-shifter) on drum patterns:  \\n\\n(All of the samples I use are available to download [here](https://github.com/lwlsn/Misc_Samples))\\n\\n```haskell\\nd1\\n$ rarely press\\n$ almostAlways (jux rev)\\n$ stack [\\ns \\"sfe-fx/4\\" #\xa0n (irand 4),\\ngain \\"1*8?\\" # s (choose  [\\"idmhit2\\", \\"revkit\\"])\\n#n (irand 16) #\xa0speed \\"[0.75 0.5]/16\\"\\n]\\n#\xa0fshift (range 100 300 $ slow 16 $ sine)\\n# gain 1.124\\n# speed \\"[1, 1.02]\\"\\n# krush 3\\n\\n```\\n\\nI also wrote a piece for the [posthumanist magazine](https://theposthumanist.com/) recently, as they had an issue on \\"rhythms\\", where I tried to compose some prose text embedded with TidalCycles functions, and it re-ignited my interest in the use of the [sew](https://tidalcycles.org/docs/reference/conditions/#sew) and [stitch](https://tidalcycles.org/docs/reference/conditions/#stitch) functions, which I think is a super cool way to add sonic variation to patterns. E.g.   \\n\\n```haskell\\nd1\\n  $ sew (iter 4 \\"1 0\\")\\n  ( n \\"0 .. 7\\" # sound \\"cps1\\")\\n  (n \\"0 .. 7\\" # sound \\"cpu\\")\\n  # orbit 2\\n\\n```\\nand\\n\\n```haskell\\nd4\\n  $ stitch (binary \\"<127 63>\\") (sound \\"hjdsynth:12\\") (sound \\"hjdsynth\\")\\n  # cutoff (range 200 4000 $ slow 8 $ saw)\\n  # resonance (range 0.1 0.2 $ slow 8 $ saw)\\n  # note (choose [5,9,0, 12, 16,17, 19])\\n  # room 0.89  # orbit 3\\n\\n```\\nUsing the [binary](https://tidalcycles.org/docs/patternlib/tutorials/course2/#lesson-2-binary-patterns) pattern notation to calculate where the two melodic sounds counteract with each other is super fun!\\n\\n\\n**Do you use Tidal with other tools / environments?**  \\n\\nTidal is super cool as it doesn\'t have to be used with Supercollider and it\'s been fun to work on how to pattern sources other than just samples or synthesisers.\\n\\nI\'ve had a go in the recent past at using it to try and program the sounds of an artificial voice. Alex and I worked on first using it to pattern the Pink Trombone vocal synthesis - if you\'ve not heard it, worth checking out [here](https://dood.al/pinktrombone/) - and then more recently working on creating a voice model using \\"Neural Audio Synthesis\\", with a tool called [RAVE](https://github.com/acids-ircam/RAVE) which has come out of research at IRCAM, and then live programming this artificial voice from Tidal.\\n\\nWe don\'t have any public facing documentation at the moment, but hoping to be able to share something more extensive on this soon \ud83d\udc40\\n\\n\\n## Tidal Contributions  \\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\n\\nA little while ago now, I worked on creating an autonomous agent that created its own patterns of Tidal code. This was a fun project during the summer of 2020, which I wrote up a bit about on the old TidalCycles blog [here](https://blog.tidalcycles.org/index.html%3Fp=1280.html). This was part of the [Summer of Haskell](https://summer.haskell.org/) project, which I would encourage anyone who wants to work on the Tidal development to be a part of!\\n\\nI guess the other way I have contributed is through running workshops on TidalCycles, which I\'ve done in the past but not so many recently. It\'s always a nice way to get more people engaged and the install part has become much easier in recent years :)\\n\\n\\n**What motivates you to work on Tidal?**   \\n\\nBeing part of a friendly community and wanting to help make new and exciting ways for humans to interact with algorithms.\\n\\nAlso I want to help inspire other women to be a part of the process of developing software! If there are any women out there that would be interested but don\'t know where to start please reach out and I\'d love to help in any way I can.\\n\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**  \\n\\nI would say my music is meant to be equal measures fun and playful but also serious and emotional. I like to tow this line in the sounds that I make, making people confused if they can dance to the music or not. Been super insipered by some other artists that do the same kind of thing, e.g. Aeoi, sv1, DJH, Asia otus, 5ubaruu & saves, +777000, sleepsang.\\n\\n\\n**How has your music evolved since you have been livecoding?**  \\n\\nI\'ve learnt a lot about creating complexity in rhythms, how to elicit surprise in listeners by introducing random variations in both structure and timbre. I\'ve learnt a lot about collaboration too from the people I\'ve worked with since I started live coding! And from working with my machine partner sometimes too \u2514[\u2235\u250c]\\n\\nAlso I find myself trying to recreate a lot of rhythms I hear into TidalCycles structures, which is a part of my brain I can\'t turn off now :S\\n\\n\\n**What samples or instruments do you like to work with?**  \\n\\nI basically pick up a lot of samples here and there that I like to work with. I think Lucy\'s [recent post](https://tidalcycles.org/blog/tidal_profile_heavylifting) about this outlines a lot of the similarity with her practice in being a sample collector.\\n\\nI have been using the Serum VST for some midi sounds recently too, as it\'s a nice tool to work with for shaping melodic sounds.\\n\\n\\n**What projects are you currently working on or planning? What\'s next?**\\n\\nI\'m having a bit of an unplanned creative hiatus at the moment due to a lot of work (have to finish a PhD at some point in the near future) but I\'ve got a few bits that I was working on before that I\'m hoping at some point can turn into another release.\\n\\n\\n### Links to your music / recorded livecoding sessions\\n\\n- [Error Topography E.P.](https://cherche-encore.bandcamp.com/album/error-topography)\\n- [Introversion of Sacrifice E.P.](https://digitalselves.bandcamp.com/album/introversion-of-sacrifice)\\n- [Live On DataFruits Radio](https://soundcloud.com/datafruits/digital-selves-dxdf)\\n- [FACT - Artist DIY](https://www.youtube.com/watch?v=t2KeNblKSFM&t=1s)\\n- [FACT - Sonic Futures: How Technology is Guiding Electronic Music](https://www.youtube.com/watch?v=9iPRPIe_PbQ)\\n\\nAdd your comments in the [Club Tidal thread](https://club.tidalcycles.org/t/blog-profile-digital-selves/4667)."},{"id":"/tidal_profile_heavylifting","metadata":{"permalink":"/blog/tidal_profile_heavylifting","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_heavylifting.md","source":"@site/blog/tidal_profile_heavylifting.md","title":"Working with samples the Heavy Lifting way","description":"Thinking about approaches to from-scratch improvised live code performance.","date":"2023-03-31T00:00:00.000Z","formattedDate":"March 31, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Working with samples the Heavy Lifting way","date":"2023-03-31T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - digital selves","permalink":"/blog/tidal_profile_digitalselves"},"nextItem":{"title":"Tidal Profile - djmelan3 (Mel Laubscher)","permalink":"/blog/tidal_profile_djmelan3"}},"content":"> _Thinking about approaches to `from-scratch` improvised live code performance._   \\r\\n> (As I write this it\'s sort of turning out to be everything I think about Tidal!)\\r\\n\\r\\n## Intro\\r\\nHi, I\'m Lucy, and I\'m a live coder. In this blog post I\'m going to be talking about some of my strategies for using samples and approaches to `from-scratch` or `blank-screen` live coded performance.\\r\\n\\r\\n## What is \'from-scratch\' anyway?\\r\\nSome things to bear in mind:\\r\\n- I didn\'t build my software, or my computer\\r\\n- I\'ve listened to music before\\r\\n- I practice\\r\\n- I have \'ideas\'\\r\\n- Why do we even care?\\r\\n\\r\\nI dunno where the original idea came from that live coding performances should start with a blank screen. I thought it might be from the [toplap manifesto](https://toplap.org/wiki/ManifestoDraft) or the [generative manifesto](https://slab.org/2015/07/28/the-generative-manifesto-august-2000/), but I looked back through both of those and don\'t think they\'re really saying that.\\r\\n\\r\\nAt any rate, when I started live coding, and in the context I was in (Sheffield, 2015) it felt like blank-screen was the only way. It excited me (and continues to excite me) but it doesn\'t excite everyone. I feel (maybe wrongly?) that the emphasis on fully from-scratch performances can be a barrier for some people, and when I run workshops I always try to emphasize that while I start from a blank screen, it\'s not compulsory. But I do feel that the Algorave/live coding approach of starting with a blank screen, and __embracing error__ is really exciting and necessary - without this forum for experimental risky performances I wouldn\'t be able to do what I do.\\r\\n\\r\\nLately it seems the blank-screeners have decreased in number and I see more and more pre-prepared performances. I\'m often the only blank-screener at a gig.\\r\\n\\r\\n> **Disclaimer:** I\'m not a die hard - I have used pre prepared code in performances, and particularly if I\'m using MIDI I have a few snippets prepped. And I have pre-prepped code in supercollider, and I\'ve done performances where all the code was written in advance, and I\'ve recorded performances and edited them and played them live in Ableton *(shh, don\'t tell the live code gods).*\\r\\n\\r\\nI guess what I\'m trying to say is it doesn\'t really matter anyway, it\'s just something I personally enjoy doing that I find exhilarating, and that I want other people to enjoy, while also recognising that it can be a bit scary.\\r\\n\\r\\nI think I said this before in my [newsletter](https://buttondown.email/heavy-lifting) - but here is an anecdote I like to remember when I\'m thinking about this stuff:\\r\\n\\r\\n> I mentioned in work that I needed to practice for a gig and my colleague said \\"if you make it all up, why do you need to practice?\\"\\r\\n\\r\\n-- which is such a great question! What I need to practice is **making it up** and here\'s how I do it.\\r\\n\\r\\n## 1. Choosing samples\\r\\n\\r\\nWhile I often use (usually hardware) synths in my set, what drew me to Tidal in the first place (and what forms the core of my performance) is the seemingly limitless opportunities for sample manipulation.\\r\\n\\r\\nOf course you have your drums, synths, loops, acapellas, whatever, but what I really like is incorporating non-musical sounds into my sets. My go-to resource for this is [freesound.org](https://freesound.org/).\\r\\n\\r\\n```\\r\\n\\\\m/ blessed be the freesound contributors \\\\m/\\r\\n```\\r\\n\\r\\nI\'ll search for whatever I\'m thinking about (bells, bats, woodwork, helicopters, notifications etc etc), have a listen and download a batch of sounds - anything that catches my interest. At this stage I don\'t know if they\'ll work or not, but that\'s ok.\\r\\n\\r\\n### Some other favourite sources:\\r\\n- [Blood Sport sample pack](https://pickleddiscs.wordpress.com/2019/05/15/blood-sport-sample-pack/)\\r\\n- [Legowelt](http://legowelt.org/samples/)\\r\\n- samples obtained from YouTube etc, legally or otherwise*\\r\\n- Plundering the sample libraries of collaborators (particularly [Graham Dunning\'s](https://grahamdunning.com/) - sorry Graham)\\r\\n- Recording sounds on your phone (or fancier equipment if you have it)\\r\\n- Plundering friends\' recordings for remix material (usually a good idea to ask first)\\r\\n\\r\\n> __*Side note on my ethics for sampling:__ if the person is extremely rich I will steal their sounds. If they are not then I don\'t. I don\'t feel bad about it. You should make your own mind up about this though.\\r\\n\\r\\n## 2. Editing\\r\\n\\r\\nI usually do a bit of sample editing in Ableton or Reaper next - trimming off silences, roughly normalising volume, checking for loop-ability. I don\'t spend too long on this - tbh I probably should and it would make things sound better.\\r\\n\\r\\n## 3. Experimentation\\r\\n\\r\\nThis is the bulk of how I prepare. I usually update/refresh my samples every few months, but I might reach back into the archives for some oldies too. I don\'t use many of the standard Tidal/SuperDirt sounds (although I used to use them almost exclusively). I do a bunch of experimenting with my new sounds, combining them with old favourites and using my favourite functions to come up with some sketches that sound good to me. This is a semi-mystical process and obviously very personal, but I find this to be extremely enjoyable and almost hypnotic sometimes.\\r\\n\\r\\n### My favourite functions\\r\\nOver time I\'ve come up with my \'favourite functions\' - actually these haven\'t really changed very much from the ones I used in my early sets, which I chose by going through the entire [Tidal documentation](https://tidalcycles.org/docs/reference/cycles) and trying everything - you can do this too! It\'s a bit tedious at times, but for me it really helped me get my head round how Tidal thinks.\\r\\n\\r\\nI pull the new samples into Tidal, and try a few of my typical function combos to see how they feel.\\r\\n\\r\\n#### Short sounds\\r\\nI\'ll use the mininotation and some simple functions to play with rhythms.\\r\\n- `{}` - for polyrhythms\\r\\n- `speed` `hurry`\\r\\n- `chop`\\r\\n- `density` (aka `fast`/`slow`)\\r\\n\\r\\n#### Patterns\\r\\nI\'ll start playing around with putting some patterns/sequences together.\\r\\n- `iter`\\r\\n- `jux`\\r\\n- `sometimes`/`often`/`every`\\r\\n- `chunk`\\r\\n\\r\\n#### Longer sounds\\r\\nI\'ll use the following functions to test out loops and textures.\\r\\n- `loopAt`\\r\\n- `slice`/`splice`\\r\\n- `chop`/`striate`\\r\\n- `randslice`\\r\\n- `legato`\\r\\n\\r\\n#### Effects\\r\\nI\'ll try some simple effects to manipulate the sounds\\r\\n- `vowel`/`hpf`/`lpf`\\r\\n- `shape`\\r\\n\\r\\nAnd honestly, those functions, plus a bit of randomness/continuous functions, make up 99% of what I do in performances. You can get so much complexity with just a very little bit of Tidal syntax! Having a limit on the functions and sounds I\'m using, for me, really supports `from-scratch` improvisation! ([I actually wrote about this before on the Tidal forum](https://club.Tidalcycles.org/t/lucys-favourite-functions-aka-Tidal-the-heavy-lifting-way/479)).\\r\\n\\r\\nWhile I\'m experimenting I\'m not worrying too much about what it sounds like, or the timings, but I\'m more looking for a feel, and thinking about how something might work in a set *(my criteria: do I like it?).* Often at this stage I will discard individual samples or whole groups of samples. I might go back and edit them, or I might go hunting for similar or complementary sounds. I can spend a few hours doing this, and usually when I\'m in the zone I will break into sections that would be more like what I do live (which is essentially the same as the experimentation outlined above, but with more consideration to structure and timing).\\r\\n\\r\\n### Sketches\\r\\n\\r\\nSo this way I come up with some little sketches which sort of act as the inspiration for my set. They won\'t be exactly what I play live (although I might refer to them if I have a panic), but they give me an idea of the approaches I might use with each sample or set of samples.\\r\\n\\r\\n> All samples referenced below available [here on google drive](https://drive.google.com/drive/folders/1Fkxwn8Fl8O53gv-7O0dwvGXxj8qKO5Ta?usp=share_link)).\\r\\n\\r\\n\\r\\n#### Sketch 1\\r\\n```\\r\\nsetcps (137/60/4)\\r\\n\\r\\nd1\\r\\n$ chunk 4 (hurry \\"<2 0.5>\\")\\r\\n$ slice 8 \\"7 6 5 4 3 2 1 0\\"\\r\\n$ loopAt 2\\r\\n$ sound \\"skel:8 skel:8\\"\\r\\n# legato 1\\r\\n# gain 1.2\\r\\n\\r\\nd2\\r\\n$ chunk 4 (# gain 0)\\r\\n$ jux (iter 4)\\r\\n$ sound \\"{kick kick kick kick, 9sd*3 ~ ~, ~ ~ 9hh 9hh*2 [9hh*2 9oh]}\\"\\r\\n\\r\\nd3\\r\\n$ sometimes (hurry \\"0.5 2\\")\\r\\n$ chunk 4 (# speed (range 1 2 sine))\\r\\n$ sound \\"vkb*8\\"\\r\\n# speed \\"0.5\\"\\r\\n# legato 0.5\\r\\n# shape 0.8\\r\\n```\\r\\n#### Sketch 2\\r\\n```\\r\\nd4\\r\\n$ every 2 (density 2)\\r\\n$ slice 8 \\"0 <0 1 2 3>\\"\\r\\n$ sound \\"bev:1 bev:2\\"\\r\\n# legato \\"0.5 1\\"\\r\\n# gain 1.2\\r\\n# shape 0.2\\r\\n# speed 2\\r\\n\\r\\nd5\\r\\n$ sometimes (hurry 2)\\r\\n$ chop \\"[1,4]\\"\\r\\n$ sound \\"9rs*16?\\"\\r\\n# shape 0.4\\r\\n\\r\\nd6\\r\\n$ every 4 (density \\"8 1\\")\\r\\n$ sound \\"vkl\\"\\r\\n# speed (choose [1,1,1,4,7])\\r\\n\\r\\nd7 $ sound \\"kick kick(3,8)\\"\\r\\n```\\r\\n#### Sketch 3\\r\\n```\\r\\nd1\\r\\n$ striate 4\\r\\n$ sound \\"emub*8\\"\\r\\n\\r\\nd2\\r\\n$ sound \\"{emud, emud*8}\\"\\r\\n# n (irand 8)\\r\\n# legato 1\\r\\n# shape 0.4\\r\\n\\r\\nd3\\r\\n$ iter 4\\r\\n$ chunk 4 (# speed (range 1 2 saw))\\r\\n$ sound \\"emustab:1(<3 5 6>,8)\\"\\r\\n# legato 1\\r\\n\\r\\nd4\\r\\n$ sound \\"emupiano\\"\\r\\n# n (irand 4)\\r\\n# size 0.4\\r\\n# room 0.1\\r\\n# cut 1\\r\\n\\r\\n```\\r\\n\\r\\n## 4. Choosing a palette\\r\\n\\r\\nFrom my experiments above I choose a palette of sounds. I usually try to think about sounds in the following categories:\\r\\n- Drums/percussion\\r\\n- Bass\\r\\n- Lead\\r\\n- \'Weird\'/texture\\r\\n\\r\\n## 5. Performing the set!\\r\\nUsually I don\'t practice a full set before the gig, but from my experiments I will have some ideas/sections that I want to go for. I used to always write myself a crib sheet but I\'ve mainly stopped doing that now (although I often miss it - just laziness really!). Usually they look something like the below - prompts for a feel or a texture, or the names of specific samples.\\r\\n\\r\\n- percussive bit\\r\\n- `skel` (or name of another stand-out/central sample)\\r\\n- ambient synth bit\\r\\n- dense textures\\r\\n- degrade/breakdown\\r\\n- etc\\r\\n\\r\\nOne thing I struggle with is transitions. Tidal has some functionality with this but I\'ve never got on with it. [digital selves](https://soundcloud.com/digitalselves) is amazing at this <3 - I need to work on it!\\r\\n\\r\\nAnyway, despite all this preparation, on the day I might do something totally different anyway. While I have ideas, it never sounds the same as it did in practice (particularly given the particulars of an individual PA or venue environment), and if there\'s a sound or a texture that pops up in the live environment that I really like then I\'ll follow that idea and see where it goes. I also try to pitch things in line with the other performers on the night, or where I am on the bill. If it\'s a chill vibe then I tend not to go in hard with like 180bpm harsh noise (and vice versa).\\r\\n\\r\\n> **EMERGENCY TIP: If in doubt stick a big fat 4:4 kick under everything and it will probs sound decent :)**\\r\\n\\r\\nIt doesn\'t always go well! But I usually enjoy myself regardless. If I have a crash or like accidentally set the BPM to like 120000 then it always feels like a very authentic live coding set and I enjoy that. It can be hard sometimes if you\'re the only blank-screener and everyone else\'s set is super polished and yours is a bit of a shit show, but I have to remind myself that\'s part of the fun. I find `from-scratch` live coding performances to be genuinely exhilarating and one of the best things in my life! (phew...)\\r\\n\\r\\n## 6. De-mystifying the blank screen\\r\\n\\r\\nWhat I\'m trying to say with all this - (and well done if you\'ve made it this far) - is that while the `from-scratch` approach might seem super cool and gonzo, there is a degree of prep that goes into it that I really feel is a process anyone can follow if they want to get into performing in this way. I actually find it super freeing to plug my laptop into the PA and just see where the sound goes, and I think given the nature of Tidal this can be a very relaxing way to play, rather than starting with strong preconceived ideas about what you want something to sound like or how you might like the structure to be. For me there are better tools than Tidal for performing in that way.\\r\\n\\r\\nI also find this approach to be a really beautiful way to develop my relationship with my computer - it\'s a wonderful tool that does so much for me, but it can also be a friend and musical collaborator - I learn so much from our performances together <3.\\r\\n\\r\\n`From scratch` coding can also feel safer with a human collaborator - find a friend and use [Troop](https://github.com/Qirky/Troop), [Estuary](https://estuary.mcmaster.ca/) or [Flok](https://flok.cc/) to jam together. When you don\'t have to do everything yourself it can be easier to find the space and confidence to improvise.\\r\\n\\r\\nHave a go from the safety of your favorite spot and try to enjoy the process!\\r\\n\\r\\n## 7. Final warning\\r\\nHaving said all the above - this approach does require a certain FU attitude!!!! I still can\'t believe that people actually want not only to watch me perform and to listen to my music but actually to write and talk and teach about it, when I\'m doing all this for purely selfish and personal reasons! Of course it makes me so happy when people like my stuff, but honestly I would do it even if they didn\'t, and that\'s why I think the `from-scratch` approach works so well for me, it\'s pure expression and experimentation, with a good dose of on-stage adrenaline. I\'m super grateful for all the friendships and experiences live coding has given me. TY!\\r\\n\\r\\nAnd if anyone is still reading. . . If you want to check out more:\\r\\n- [heavy-lifting.org](https://heavy-lifting.org/)\\r\\n- [from scratch session with Graham Dunning](https://youtu.be/ezSdPIKkp98)\\r\\n\\r\\n#### Comments\\r\\n- What do you think? Does this `from-scratch` process resonate? Do you have different ideas? \\r\\n- Add your Comments in the [Club Tidal thread](https://club.tidalcycles.org/t/blog-post-working-with-samples-the-heavy-lifting-way/4643)."},{"id":"/tidal_profile_djmelan3","metadata":{"permalink":"/blog/tidal_profile_djmelan3","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_djmelan3.md","source":"@site/blog/tidal_profile_djmelan3.md","title":"Tidal Profile - djmelan3 (Mel Laubscher)","description":"| Tidal Cyclist  | Mel Laubscher    |","date":"2023-03-25T00:00:00.000Z","formattedDate":"March 25, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - djmelan3 (Mel Laubscher)","date":"2023-03-25T00:00:00.000Z"},"prevItem":{"title":"Working with samples the Heavy Lifting way","permalink":"/blog/tidal_profile_heavylifting"},"nextItem":{"title":"Tidal Profile - Atsushi Tadokoro","permalink":"/blog/tidal_profile_tadokoro"}},"content":"| Tidal Cyclist  | Mel Laubscher    |\\n| --------:    | :---------- |\\n| aka    | djmelan3 (dee-jay-muh-lun-dree) |\\n| Location | Cape Town, South Africa |\\n| Years with Tidal | 3  yrs |\\n| Other LiveCoding env | Estuary, SuperCollider |\\n| Music available online | [YouTube - djmelan3](https://www.youtube.com/@djmelan3) |\\n| Other music/audio sw | Pure Data, Logic, ProTools and similar DAWs |\\n| Comments | [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-djmelan3/4635) |\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal? What inspires you?**   \\n\\nI love the community around live coding and TidalCycles. What inspires me is how welcoming the community is and how simple it is to become involved. If you\'re new to TidalCycles there\'s a large community keen to help. In terms of TidalCycles itself I really enjoy the interactive aspect of the language, something that traditional DAWs lack. Live coding allows me to express myself musically much faster than a DAW can offer. I also find it easier to make creative decisions with Tidal whereas using a DAW often leads to overthinking and never actually finishing any projects.\\n\\n**How do you approach your livecoding sessions?**  \\n\\nI largely participate in collaborative work, in which the group I collaborate with will brainstorm and decide upon a variety of strategies to use when we\'re jamming together. In both solo and collaborative work, depending on the context, I\'ll take an improvisational approach and randomly select audio samples, functions or write patterns I\'d like to use in combination with one another. This is mainly because I\'d like to discover (and be surprised by) all kinds of musical possibilities that any combination of functions, samples and patterns can create in Tidal.\\n\\n**What functions and coding approaches do you like to use?**  \\n\\nMy approach is mostly improvisational/experimental, but recently I\'ve been experimenting with longer form composition attempting to create more structured patterns - i.e. placing a few `stack` functions within a `cat` function or a few `cat` functions within a `stack` function and then proceeding to expand on these.\\n\\nI also enjoy using a number of functions that control the loudness (e.g `#gain (range 0.35 0.85 fast 12 sine)`) and spatiality (`pan`) of the audio I work with within confines of stereo monitoring. To do this I combine `pan` and `gain` and place the audio at different areas within the stereo field. For example:\\n\\n```haskell\\nd3 $\\n    -- slow 2 $\\n    fast 2 $\\n    sometimes (slow 2) $\\n    almostAlways (#gain 0.65) $ s \\"[[x*2][~ x][x@2][x]]\\" #s \\"hh27\\"\\n    #delay (choose[1/12,1/4,1/8])\\n    #pan (fast 2 $ sine)\\n    #gain 1.15\\n```\\n\\n**Do you use Tidal with other tools / environments?**  \\n\\nI\'ve mostly used MiniTidal in Estuary when collaborating simply because it\'s an easy-to-access platform, especially for non-programmers such as myself. When I work on my own I do experiments with SuperCollider and Tidal in VS code. I have some experience with Pure Data as well and it was actually through creating small patches in Pure Data that I became interested in using programming languages to solve musical problems.\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**  \\n\\nSince 2020 I\'ve been a co-collaborator of SuperContinent. We\'ve performed together at various conferences, online events and even at an online meeting. Locally, I\'ve worked alongside students in a small university ensemble where we performed in online environments as well. As with collaborative contexts, one has to be aware of others in the group at all times. I find this to be an exciting challenge, especially when my co-collaborators come from varying musical backgrounds. Using the predetermined strategies we improvise and live code our performances from scratch. When I do my own experiments the goal is to write pre-composed code that\'s ready to run and which will be adjusted throughout the performance to create as much variation as possible.\\n\\n**How has your music evolved since you have been livecoding?**  \\n\\nI\'ve experimented a lot through my use of the language and observed a lot through collaboration. Alongside learning from my collaborators, I taught myself how to code with Tidal by watching what everyone else did. I now find that I\'m able to use Tidal as a tool to express ideas far clearer than I ever could with any other tool.\\n\\n\\n**What samples or instruments do you like to work with?**  \\n\\nI work with all kinds of samples. I don\'t limit myself to use particular samples, but when I am looking for a particular overall \\"sound\\" I\'ll usually pick samples that will fit with what I\'m going for.\\n\\n\\n**What projects are you currently working on or planning? What\'s next?**  \\n\\nCurrently, I have a series of upcoming talks hosted by the University of Cape Town\'s South African College of Music. In these I\'ll be demonstrating the technique of live coding as it is still very much a newer approach to performing music in South Africa. I\'ll also be performing solo for the first time ever as part of this demonstration. Subsequent talks in this series will cover some of the work I\'ve done during collaborations, and I hope to meet new people who might take in interest in learning how to live code themselves.\\n\\n### Links to your music / recorded livecoding sessions:\\n\\n- [YouTube Main Page](https://www.youtube.com/channel/UCh7EiGKEEnCSfZ8xzUJIsZw)\\n- [Solo streams/performances](https://www.youtube.com/playlist?list=PLroSCmh5yBWCr-U3h-0-HhxQ3tuq2qbpx)\\n- [SuperContinent collaborations](https://www.youtube.com/playlist?list=PLroSCmh5yBWAHsSjTMY3hXtNoVB1I8Snh)\\n- [UPLOrc collaborations](https://www.youtube.com/playlist?list=PLroSCmh5yBWCwxQ6jnR4Ott_1Dxt2kB7l)\\n- [WeekendJam collaborations](https://www.youtube.com/playlist?list=PLroSCmh5yBWDZk6zoW48jj-1WwP3HWhiA)\\n\\n\\nComments: [Club Tidal Forum Thread]([https://club.tidalcycles.org](https://club.tidalcycles.org/t/blog-profile-djmelan3/4635))"},{"id":"/tidal_profile_tadokoro","metadata":{"permalink":"/blog/tidal_profile_tadokoro","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_tadokoro.md","source":"@site/blog/tidal_profile_tadokoro.md","title":"Tidal Profile - Atsushi Tadokoro","description":"|          Tidal Cyclist | Atsushi Tadokoro                                             |","date":"2023-03-15T00:00:00.000Z","formattedDate":"March 15, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - Atsushi Tadokoro","date":"2023-03-15T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - djmelan3 (Mel Laubscher)","permalink":"/blog/tidal_profile_djmelan3"},"nextItem":{"title":"Tidal Profile - froos","permalink":"/blog/tidal_profile_froos"}},"content":"|          Tidal Cyclist | Atsushi Tadokoro                                             |\\r\\n| ---------------------: | :----------------------------------------------------------- |\\r\\n|                    aka | tado, yoppa                                                  |\\r\\n|               Location | Maebashi Japan                                               |\\r\\n|       Years with Tidal | 7  yrs                                                       |\\r\\n|   Other LiveCoding env | SuperCollider, SonicPi, Hydra, Kodelife                      |\\r\\n| Music available online | [SoundCluod](https://soundcloud.com/tadokoro), [Vimeo](https://vimeo.com/tadokoro) |\\r\\n|            Code online | [GitHub](https://github.com/tado)                            |\\r\\n|   Other music/audio sw | Audacity, Pure Data, Ableton Live                            |\\r\\n|               Comments | [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-atsushi-tadokoro/4622) |\\r\\n\\r\\n![](https://yoppa.org/wp-content/uploads/2023/03/hypergeek.jpg)\\r\\n\\r\\nphoto: Phont @phont1105 (ANGRM\u2122)\\r\\n\\r\\n## Livecoding  \\r\\n\\r\\n**What do you like about livecoding in Tidal? What inspires you?**   \\r\\n\\r\\nWhat I like about live coding with TidalCycles is that I can improvise and change the pattern flexibly per-part basis (connections, d1, d2, d3).  It also combines musical and coding ideas at a high level.\\r\\n\\r\\n**How do you approach your livecoding sessions?**  \\r\\n\\r\\nIn my case, I pre-code a rough flow in TidalCycles according to the time I need to perform. However, I leave as much room for improvisational changes and extensions to the code, making for improvisational and varied performances.\\r\\n\\r\\n**What functions and coding approaches do you like to use?**  \\r\\n\\r\\nThe function I currently use most often is the combination of scale and remainder operations to generate various phrases. For example, the following code is used.\\r\\n\\r\\n```haskell\\r\\nd1\\r\\n  $ s \\"supersaw*16\\"\\r\\n  # sustain \\"0.1\\"\\r\\n  # note (scale \\"minPent\\" \\"{-12..0}%5\\")\\r\\n```\\r\\n\\r\\nIf the scale (minPent) used is changed to something else, the impression of the melody changes drastically. It is like improvisation in modal jazz.\\r\\n\\r\\nFurthermore, by using the left and right channels effectively and by adding filters, you can add more depth to the performance.\\r\\n\\r\\n```haskell\\r\\nd1\\r\\n  $ s \\"supersaw*16\\"\\r\\n  # pan (rand)  \\r\\n  # sustain \\"0.1\\"\\r\\n  # note (scale \\"indian\\" \\"{-12..[0, 5]}%[5, 7]\\")\\r\\n  # lpf (range 200 10000 $ slow 8 $ sine) # resonance \\"0.2\\"\\r\\n```\\r\\n\\r\\nMore complex rhythmic swells can be generated by using functions such as \\"jux\\" and \\"rev\\" that create changes on the time axis.\\r\\n\\r\\n```haskell\\r\\nd1\\r\\n  $ sometimesBy 0.3 (jux (iter 16))\\r\\n  $ sometimesBy 0.1 (rev)\\r\\n  $ s \\"supersaw*16\\"\\r\\n  # pan (rand)\\r\\n  # sustain \\"0.1\\"\\r\\n  # note (scale \\"indian\\" \\"{-12..[0, 5]}%[5, 7]\\")\\r\\n  # lpf (range 200 10000 $ slow 8 $ sine) # resonance \\"0.2\\"\\r\\n```\\r\\n\\r\\n**Do you use Tidal with other tools / environments?**  \\r\\n\\r\\nI use TidalCycles in combination with other applications that generate visuals for audiovisual performance. Initially I used openFrameworks, but recently I have been using TouchDesigner.\\r\\n\\r\\nHowever, it is difficult for one person to do live coding for sound and visuals at the same time. So I am currently using a method where the results of coding in TidalCycles are linked via OSC (Open Sound Control) to generate the visuals. I do the following.\\r\\n\\r\\nFirst, I determine the names of the parameters to be sent from TidalCycles to TouchDesigner. For example, let\'s say we want to send out a numeric value of type Integer \\"td_s\\" that specifies the scene number in TouchDesigner. First, add the following statement to \\"BootTidal.hs\\"\\r\\n\\r\\n```haskell\\r\\nlet td_s = pI \\"td_s\\"\\r\\n```\\r\\n\\r\\nNext, add the following statement to the SuperCollider initialization file \\"startup.scd\\". This instruction forwards the OSC from TidalCycles to SuperCollider to yet another application, specifying an OSC argument of \\"\\\\tidalplay\\" and a port number of \\"3333\\".\\r\\n\\r\\n```c\\r\\na = NetAddr.new(\\"localhost\\", 3333);\\r\\nOSCdef(\\\\tidalplay, {\\r\\n    arg msg;\\r\\n    a.sendMsg(*msg);\\r\\n}, \'/dirt/play\', n);\\r\\n```\\r\\n\\r\\nThis OSC is parsed and used by the application generating the visuals. For example, in the case of TouchDesigner, the number can be retrieved by writing the following Python script in OSC In DAT.\\r\\n\\r\\n```python\\r\\nfrom os import times\\r\\nfrom time import time\\r\\n\\r\\ndef onReceiveOSC(dat, rowIndex, message, bytes, timeStamp, address, args, peer):\\t\\r\\n\\tlst = message.split()\\r\\n\\ttry:\\r\\n\\t\\ttd_s = lst[lst.index(\'\\"td_s\\"\') + 1]\\r\\n\\t\\top(\'scene_no\').par.value0 = td_s\\r\\n\\texcept:\\r\\n\\t\\tpass\\r\\n\\treturn\\r\\n```\\r\\n\\r\\nThis allows for live-coded audiovisual performances with synchronized sound and visuals, as shown in the video below!\\r\\n\\r\\n[![youtube](https://github.com/tado/hypergeek23/raw/main/youtube.jpg)](https://youtu.be/cB_tm-NAYRk)\\r\\n\\r\\nFor more details on the code, please refer to the Github repository below.\\r\\n\\r\\n- https://github.com/tado/hypergeek23\\r\\n\\r\\n## Tidal Contributions  \\r\\n\\r\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\r\\n\\r\\nMy focus is on education and the popularization of live coding with TidalCycles. I give lectures at universities on the central theme of live coding. The first half of the class covers the basics of live coding with Sonic Pi, and the second half is a full-scale live coding performance using TidalCycles. This type of lecture is rarely offered in Japan and has been well received.\\r\\n\\r\\n**What motivates you to work on Tidal?**   \\r\\n\\r\\nThe appeal of Tidal is its ability to generate very complex and diverse music and sounds with a few simple codes. The scalability of samples and instruments is also attractive.\\r\\n\\r\\n## Music  \\r\\n\\r\\n**Tell us about your livecoding music.**  \\r\\n\\r\\nAs I mentioned in the Livecoding section, I am interested in audio-visual expression through livecoding. In addition to that, I am interested in rhythmic expressions that sound natural but are a little bit twisted. For example, I am interested in polyrhythms, polymeters, and asymmetrical rhythms.\\r\\n\\r\\n**How has your music evolved since you have been livecoding?**  \\r\\n\\r\\nLivecoding has made me more sensitive to rhythmic structure than before. I used to use a lot of simple four-beat repetitions, but I have started to create rhythms with more complexity.\\r\\n\\r\\n**What samples or instruments do you like to work with?**  \\r\\n\\r\\nI use the sound samples and instruments included in SuperDirt as well as adding my own original samples and instruments. I have made them available in the following Github repository.\\r\\n\\r\\n- [samples-extra](https://github.com/tado/samples-extra) : Extra audio samples for SuperDirt\\r\\n- [synth-extra](https://github.com/tado/synth-extra) : Extra super collider instrument definitions\\r\\n\\r\\n**What projects are you currently working on or planning? What\'s next?** \\r\\n\\r\\nI am currently working on live coding of laser beams. I hope to show the results of my various experiments on Algorave. The current status is as shown in the video below.\\r\\n\\r\\n[![youtube](https://yoppa.org/wp-content/uploads/2023/03/hq720_2.webp)](https://www.youtube.com/shorts/ITRwjJPO2dY)\\r\\n\\r\\nhttps://www.youtube.com/shorts/ITRwjJPO2dY\\r\\n\\r\\n### Links to your music / recorded livecoding sessions\\r\\n\\r\\n- [Hyper Geek #5 (2023)](https://www.youtube.com/watch?v=cB_tm-NAYRk)\\r\\n- Show your mind on my screen (2022) - Audio Visual immersive dome live coding.\\r\\n  - [excerpt](https://vimeo.com/manage/videos/779860395)\\r\\n  - [full](https://vimeo.com/manage/videos/779998862)\\r\\n- [Solstice Night Stream December (2022)](https://youtu.be/xPaJOdygJRA)\\r\\n- [Algorave 10th Birthday (2022)](https://www.youtube.com/watch?v=O4T-3wyfuOU)\\r\\n- Danceable Polymeter (2019)\\r\\n  - [excerpt](https://vimeo.com/manage/videos/362105456)\\r\\n  - [full](https://vimeo.com/manage/videos/362100002)\\r\\n- [Synesthesic Stream (2016)](https://vimeo.com/manage/videos/179527428)\\r\\n\\r\\nComments: [Club Tidal Forum Thread](https://club.tidalcycles.org/t/blog-profile-atsushi-tadokoro/4622)"},{"id":"/tidal_profile_froos","metadata":{"permalink":"/blog/tidal_profile_froos","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_froos.md","source":"@site/blog/tidal_profile_froos.md","title":"Tidal Profile - froos","description":"| Tidal Cyclist  | Felix    |","date":"2023-03-14T00:00:00.000Z","formattedDate":"March 14, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - froos","date":"2023-03-14T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - Atsushi Tadokoro","permalink":"/blog/tidal_profile_tadokoro"},"nextItem":{"title":"Tidal Profile - polymorphic_engine","permalink":"/blog/tidal_profile_polymorphic_engine"}},"content":"| Tidal Cyclist  | Felix    |\\n| --------:    | :---------- |\\n| aka    | froos |\\n| Location | France / Germany | \\n| Years with Tidal | 1  yrs |\\n| Other LiveCoding env | Strudel |\\n| Music available online | [YouTube](https://www.youtube.com/channel/UCCzL14wczvJyJaVYjh4nfJQ)  |\\n| Code online | [GitHub](github.com/felixroos/) |\\n| Other music/audio sw/hw | Ableton, Trumpet, DIY Synth |\\n| Comments | [Club Tidal Forum Thread](https://club.tidalcycles.org/t/tidal-cycles-blog-returns-profile-from-froos/4577/10?u=highharmonics) |\\n\\n![srudel wac](https://i.imgur.com/5fClfIp.png)\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal? What inspires you?**\\n\\nThere are many things that inspire me..\\nI generally like the minimalistic, text-based approach to music making, where everything is visible at all times on one screen. When I started making music with an MPC1000, menu-diving was a key part of the process.\\nA similar thing can be said about DAWs like Ableton (and Push), where there are many different UI layers and hidden items.\\nCombining Tidal\'s simplistic interface with a terse and nestable syntax, it becomes a powerful tool full of rabbit holes to explore. Also, I like the fact that it is open source and thus hackable + the community around it is really refreshing.\\n\\n**How do you approach your livecoding sessions?**  \\n\\nBeing fairly new to livecoding, I don\'t have a goto approach, but I tend to either just start with something really simple and go with the flow, or I am exploring a specific function or idea and build on that.\\nWhen I code for myself, I don\'t pay as much attention to the overall flow of the \\"performance\\",\\nbut rather try to find a loop that I like to listen to. I guess much of my approach is still influenced by many years of making beats with a more traditional setup. That might change though...\\n\\n**What functions and coding approaches do you like to use?**  \\n\\nI am really into chord voicings and \\"harmony hacking\\". While I also like music with simpler / less / no chords,\\nI sometimes miss the rich harmonic colors of the past. Writing (and changing) chord progressions in a DAW can be tedious, which is probably one of the reasons why they faded in general. If you don\'t play the piano fluently, you cannot quickly jot it down.. In a live coding setting, chord progressions and voicings can be automated and simulated, which has great potential. This is especially fun with arpeggios, for example:\\n\\n```js\\n\\"<C^7 Dbo7 Dm7 C7>\\"\\n  .voicings(\'lefthand\') // voice chords\\n  .arp(\\"0 3 <2 0> [1 3]\\".iter(4))\\n  .add(perlin.range(0,.5))// pitch warble\\n  .add(\\"<0 12>/16,.1\\") // hippie chorus\\n  .sometimes(add(\\"12\\")) // vary octaves\\n  .almostNever(ply(\\"2\\")) // little rhythmic glitches\\n  .note().s(\'sine\')\\n  .decay(.125).gain(.8)\\n  .sustain(sine.range(0,.5).slow(32))\\n  .jux(rev).room(.8).fast(3/4)\\n```\\n\\n[Open in Strudel REPL](https://strudel.tidalcycles.org/?UPR-AlXfgSnh)\\n\\nA while back I wrote 2 posts about [voicing dictionaries](https://loophole-letters.vercel.app/rhythmical-chords) and [voicing permutation](https://loophole-letters.vercel.app/voicing-permutation), which now partly found their way into Strudel.\\n\\n**Do you use Tidal with other tools / environments?**  \\n\\nMost of the time, I use Strudel to write Tidal patterns. Sometimes I visit my friend [Lui Mafuta](https://soundcloud.com/luimafuta) where I use livecode stuff via MIDI. It\'s also fun to add [some trumpet notes on top](https://www.youtube.com/watch?v=IcMSocdKwvw).\\n\\n## Tidal Contributions  \\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\n\\nIn the last year, I was all in on developing Strudel!\\nI was exciting to see this lovely thing grow into what it is now.\\nMaybe you\'re interested in [the whole story](https://loophole-letters.vercel.app/strudel) and the [recap after 1 year](https://loophole-letters.vercel.app/strudel1year).\\n\\n**What led you to work on Tidal?**\\n\\nLong before I found Tidal, I wanted to build a hackable backing track player. I\'ve spent many hours practising the trumpet using iReal Pro, which is a popular practise software in the jazz / pop / improvised music sphere. I always dreamed of a software that could generate such tracks from minimal input (just chord progressions) whilst being able to freely control the musical style. After having built [several](https://felixroos.github.io/jazzband/) [prototypes](https://felixroos.github.io/color-tunes/), I still was not satisisfied. Luckily, I found Tidal and its emerging JavaScript port, whose flexible abstractions are perfect to implement such a thing.\\nBeing more involved in computer music now (practising trumpet less :P), the dream from a hackable backing track player morphed into a more general dream of an instrument that allows improvising electronic music, which is already becoming a reality!\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**  \\n\\nI am still dipping my toes in, so far I am mostly translating and recontextualize things I\'ve done prior to livecoding.\\nFor example, I\'ve created a video album of [hip hop beats created with strudel](https://www.youtube.com/watch?v=KEndMf5udEw&list=PL7oyavMs9sS9gLY8TR6n4ILi-_5uq5ix8).\\nApart from that, I really like making music with frequencies only, mostly [using pure intervals](https://strudel.tidalcycles.org/?uFDgT5d4pL_0).\\n\\n**How has your music evolved since you have been livecoding?**  \\n\\nI am starting to appreciate the glitch! It will probably get worse..\\n\\n**What samples or instruments do you like to work with?**  \\n\\nSamplewise, I love to sample single notes and sounds of old recordings, for example, I\'ve used [the first note of this lovely album](https://www.youtube.com/watch?v=jaWdVJO5H98) for the `pluck` sound in the last link above.\\nHigh quality sample banks are cool, but there is something special about single sample repitches, maybe they just trigger tiny doses of nostalgia to my inner child, which consumed wavetable synthesis while playing super nintendo for hours.\\n\\n**What projects are you currently working on or planning? What\'s next?**  \\n\\nStill busy hacking on Strudel! I am not the type to plan too far ahead, but I am excited of what\'s to come\\n\\n### Links to your music / recorded livecoding sessions\\n\\n- [My Strudel Pattern Swatch](https://felixroos.github.io/strudel/swatch/)\\n- [YouTube](https://www.youtube.com/channel/UCCzL14wczvJyJaVYjh4nfJQ)\\n- [Algo10 Stream](https://www.youtube.com/watch?v=IcMSocdKwvw)\\n- [Solstice Night 2022 Stream](https://www.youtube.com/watch?v=P1DDsOvcyco)\\n- [My Blog](https://loophole-letters.vercel.app/)\\n\\nSome non-livecoded music I did as Puste using mostly the trumpet:\\n\\n- [Karbana - Showers And Storms (Lui Mafuta & Puste Brass Version)](https://soundcloud.com/friendlyconnections/karbana-showers-and-storms-1?in=luimafuta/sets/remixes)\\n- [Klangdruide - A Spoon Full Of Honey (Lui Mafuta & Puste Remix)](https://soundcloud.com/hugrecords/klangdruide-spoon-full-of-honey-lui-mafuta-puste-remix?in=luimafuta/sets/remixes)\\n- [Kunterwei\xdf - Manne im Theater (Puste Edit)](https://soundcloud.com/ketoga/kunterweiss-manne-im-theater)\\n- [Lui Mafuta & Puste - Secret Spot EP](https://open.spotify.com/album/5MI78yNDgbhhxa2uA9CLot)\\n\\n### Thanks\\n\\nLast but not least huge thanks to all the people that are part of this space!\\nSpecial thanks to Alex for building not only Tidal as a software but also as a community, making the world of digital music making a little less boring, one cycle at a time :)\\n\\n![guy with fatty hair](https://i.imgur.com/QNLKOeC.jpg)\\n\\nComments: [Club Tidal Forum Thread](https://club.tidalcycles.org/t/tidal-cycles-blog-returns-profile-from-froos/4577/10?u=highharmonics) |"},{"id":"/tidal_profile_polymorphic_engine","metadata":{"permalink":"/blog/tidal_profile_polymorphic_engine","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_polymorphic_engine.md","source":"@site/blog/tidal_profile_polymorphic_engine.md","title":"Tidal Profile - polymorphic_engine","description":"| Tidal Cyclist  | Martin Gius   |","date":"2023-03-13T00:00:00.000Z","formattedDate":"March 13, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - polymorphic_engine","date":"2023-03-13T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - froos","permalink":"/blog/tidal_profile_froos"},"nextItem":{"title":"Tidal Profile - Pondskater (aka Axel Ganz)","permalink":"/blog/tidal_profile_pondskater"}},"content":"| Tidal Cyclist  | Martin Gius   |\\n| --------:    | :---------- |\\n| aka    | polymorphic_engine |\\n| Location | Vienna |\\n| Years with Tidal | 3  yrs |\\n| Other LiveCoding env | SuperCollider, Hydra, ORCA  |\\n| Music available online | [Bandcamp](https://flimmerhaar.bandcamp.com/album/cilia) |\\n| Code online | [GitHub](https://github.com/polymorphicengine) |\\n| Other music/audio sw | Reaper, PureData, Audacity|\\n| Comments | [Club Tidal Forum Thread](https://club.tidalcycles.org/t/new-blog-profile-polymorphic-engine/4616) |\\n\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal? What inspires you?**   \\n\\nI find the way Tidal allows me to approach music in a structural way fascinating. I like it\'s concise but still verbose syntax, especially combined with the mini-syntax.\\n\\n**How do you approach your livecoding sessions?**\\n\\nWhen I make music on my own, I like to start out with simple rhythmic patterns and start to layer them with different versions of themselves (slower & lower / faster & higher / ..). Now apply the MI clouds effect and you can have fun for hours adjusting the parameters! *(Note: see the clouds section in the [Mi-UGens page](https://tidalcycles.org/docs/reference/mi-ugens#clouds-global) of the User docs.)*\\n\\nI also like to use a traditional game controller and map the controls to conditional functions or effects in the code. For example, playing a drum pattern twice as fast when I press the \'A\' button, or adjust the pan according to a joystick. I like the thought that I am programming the functionality of a game live, while I am also playing it.\\n\\n**What functions and coding approaches do you like to use?**  \\n\\nProbably my most used Tidal functions are `layer` and `while`. I also use the control bus feature a lot to manipulate the FX of longer sounds. I really like how randomness in Tidal works and how easy it is no generate arbitrary, but repeating sequences or rhythms.\\n\\nHere is an example of a jungle inspired, abstract dance track. To make a four cycle loop, evaluate the line\\n\\n```haskell\\nall $ timeLoop 4 . (rotL 4)\\n```\\n\\nand change the number in rotL to shift the pattern. Try to play around with the parameters of the clouds effect aswell, but be careful, it might get loud! :)\\n\\n```haskell\\nlet\\nsetbpm x = setcps (x/60/4)\\n_add :: Time -> Pattern a -> Pattern a -> Pattern a\\n_add t value pat = slow (pure $ 1+t) $ timeCat [(shift,pat),(1-shift, value)]\\n\\t\\t\\t\\twhere shift = 1 / (t + 1)\\nadd :: Pattern Time -> Pattern a -> Pattern a -> Pattern a\\nadd pt x y = innerJoin $ fmap (\\\\t -> _add t x y) pt\\n\\nsetbpm 160\\n\\nall $ timeLoop 4 . (rotL 4)\\n\\nall $ id\\n\\nd1\\n$ while \\"t(4,16)\\" (|+ krush 1)\\n$ while \\"[0 | 1]*16\\" (superimpose (plyWith 4 (|* speed 1.25) . slow 2))\\n$ layer [id\\n\\t\\t,\\\\x -> degradeBy (segment 16 perlin)\\n        \\t$ slow 2\\n            $ x\\n            # speed 0.75\\n            # shape 0.1\\n        ,\\\\x -> add \\"[0.5 | 0.25]*4\\" (s \\"jungbass:1\\" # speed 0.8 # shape 0.2 # krush 2)\\n        \\t$ x # speed \\"[2 | -2]*8\\"\\n\\t\\t]\\n$ s \\"[drum drum:1 [~ drum] drum:1, drum:3*[[8 | 16]*4]]\\"\\n# krush 2\\n# cloudswet 1\\n# cloudsgain 1\\n# cloudspitch (segment 16 $ smooth \\"[-1 | 1 | 0]*16\\")\\n# cloudstex (segment 16 $ smooth \\"[0.3 | 0.1 | 0.9]*4\\")\\n# cloudspos \\"[0 | 1]*8\\"\\n# cloudssize 0\\n# cloudsfb 0.3\\n# cloudsspread 0\\n# cloudsdens 0\\n# cloudsrvb 0\\n# cloudsfreeze 0\\n```\\n\\n**Do you use Tidal with other tools / environments?**\\n\\nI like to use Tidal together with Hydra and Vimix and like to use a game controller for external hardware.\\n\\n## Tidal Contributions  \\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\n\\n* I had the opportunity to work on Tidal as part of the Haskell Summer of Code 2021. There, I mainly worked on packaging Tidal to allow users to use it without an installation of the whole Haskell environment. This led to me developing a whole code [editor/interpeter](https://github.com/polymorphicengine/tidal-gui) with some features especially designed for Tidal, like the display of which patterns are playing/muted, the current cps/bpm and the ability to control all features of the editor via OSC.\\n\\n* I\'m also working on the [tidal-listener](https://github.com/tidalcycles/Tidal/tree/main/tidal-listener) which also provides a standalone intrepreter that editor plugins etc. can use as an alternative to ghci.\\n\\n* Now I am mostly working on things that are related to the mini-notation and how it is parsed and interpreted. Most notably, I found a way to make the chord notation patternable and made it easier to add new custom chord modifiers.\\n\\n**What motivates you to work on Tidal?**   \\n\\nCuriosity of the inner workings of Tidal and the great community!\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**  \\n\\n* I often improvise together with people who play more traditional instruments. I find it very interesting to use microphones to get what the others are playing as an input that I can manipulate through coding.\\n* I\'m also interested in multi-channel sound / acousmatic music and the possibilities of live-coding in this context. I think live-coding could be a great tool to be able to precisely control an acousmonium (a speaker orchestra, where each speaker has it\'s seperate channel). This means to not just make the sounds that are being heard, but also to distribute them across the speakers in real-time (this is often called diffusion).\\n\\n**What samples or instruments do you like to work with?**  \\n\\nRecently, I like to use very tiny grains of samples and process them with Tidal. What I like about this approach is that it is easy to manipulate and add effects to each grain individually. I also like to record my own samples with various microphones.\\n\\n**What projects are you currently working on or planning? What\'s next?**  \\n\\n* I would like to work on a bigger scale AV performance using Tidal, Hydra and Vimix together, to create something like a short film.\\n* I\'m also working on an interactive sound installation where I will probably use Tidal to generate the sound.\\n* I\'m working on a new acousmatic piece for a composition competition.\\n\\n### Links to your music / recorded livecoding sessions:\\n- [Bandcamp](https://flimmerhaar.bandcamp.com/album/cilia)\\n- [Acousmatic Music](https://www.youtube.com/watch?v=ieQ7fA7ah3s)\\n- [Algo10](https://www.youtube.com/watch?v=-oMwPdgxqiI)\\n- [Linktree](https://polymorphicengine.github.io/)\\n\\n\\n### Other  \\n\\nI\'m currently working on a live-coding language that will extend the mini-notation to a full programming language. It is still in early development, but maybe somebody is interested in helping me out! I\'m working on it [here](https://github.com/polymorphicengine/minilambda/tree/types).\\n\\n<img src={require(\'./polymorphic_engine_blog_picture.jpg\').default} alt=\\"youth photo with computer\\" width=\\"600\\" />\\n\\nComments: [Club Tidal Forum Thread](https://club.tidalcycles.org/t/new-blog-profile-polymorphic-engine/4616)"},{"id":"/tidal_profile_pondskater","metadata":{"permalink":"/blog/tidal_profile_pondskater","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_pondskater.md","source":"@site/blog/tidal_profile_pondskater.md","title":"Tidal Profile - Pondskater (aka Axel Ganz)","description":"| Tidal Cyclist  |  Pondskater (aka Axel Ganz)   |","date":"2023-03-10T00:00:00.000Z","formattedDate":"March 10, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - Pondskater (aka Axel Ganz)","date":"2023-03-10T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - polymorphic_engine","permalink":"/blog/tidal_profile_polymorphic_engine"},"nextItem":{"title":"Tidal Profile - ndr_brt","permalink":"/blog/tidal_profile_ndr_brt"}},"content":"| Tidal Cyclist  |  Pondskater (aka Axel Ganz)   |\\n| --------:    | :---------- |\\n| aka | ganz |\\n| Location | D\xfcsseldorf, Germany and Telavi, Georgia |\\n| Years with Tidal | 3 yrs |\\n| Other LiveCoding env | SonicPi, Hydra |\\n| Music available online | [Bandcamp](https://pondskater-music.bandcamp.com/) |\\n| Other music/audio sw | Audacity, Ableton Live with Granulator 2 and Wavetable |\\n| Hardware | Sequential Circuits Six-Trak, Faderfox PC4 |\\n\\n<img\\n  src={require(\'./aganz.jpg\').default}\\n  alt=\\"pondskater with controller\\"\\n  width=\\"600\\"\\n/>  \\n\\n(photo: Heike Kurth)\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal? What inspires you?**   \\n- Although I have been making electronic music for decades, I have never been the analytical type of music producer. I have always found it difficult to create more complex rhythmic structures and work out arrangements. And although I am not a developer and have no knowledge of programming at all, I was able to get into TC very quickly and find the approach very intuitive. In particular, I now find it easy to create complete rhythmic structures. Sometimes I don\'t know exactly what I\'m doing, but some results speak for themselves. This fascinates and motivates me, even after three years. Tidal never gets boring. Besides, I have always been interested in new approaches and new musical territory. Live coding offers a great and ever-expandable field of experimentation.\\n\\n**How do you approach your livecoding sessions?**  \\n- I usually start with a new feature, or an example or snippet of a new feature. I read a lot in the Tidal Club and often find inspiration in other people\'s questions and examples. Since my repertoire of tracks has been growing, I\'ve also started to put key elements of previous tracks that I particularly like back on the dissecting table of my editor and vary them again and again. Variation, variation, variation. And - after three years, I find that my code tends to get simpler - but in do blocks.\\n\\n**What functions and coding approaches do you like to use?**  \\n- I am a fan of `echoWith, chop, degradeBy, repeatCycles, mask`. And it changes. Some days ago I was very busy with `while` which I now rediscover. Now I like `cat` combined with euclidian rhythms very much.\\n\\n```haskell\\nd1 $ slow 2 $ cat [s \\"tabla:04(3,8) tabla:04(5,8)\\"] # gain 0.9 # speed 0.25\\nd2 $ cat [s \\"kick(3,8)\\", \\"kick(2,8)\\", \\"kick(3,8)\\"]\\n```\\n\\nI also like to work with isorhythms, especially to get a tonal dynamic into a percussion pattern.\\n\\n```haskell\\nd1 $ struct \\"7(7,8)\\" $ sound \\"tah\\" # nCountTo \\"list\\" \\"<7 7 7 7 7 8 9>\\"\\n    # gain 0.9 # room 0.3 # size 0.5 # speed 0.5\\n    # shape (slow 4 $ range 0.0 0.5 tri)\\n    # pan (slow 2 $ range 0.1 0.9 saw)\\n```\\n\\nRecently I started to experiment with @jwaldmann\'s fantastic random-not-random ideas.\\nhttps://club.tidalcycles.org/t/random-not-random/4522\\n\\n```haskell\\ndo\\nlet scale = getScale (scaleTable ++ [(\\"wavemorphian\\", [3,7,8,10,11])])\\nd1 $ s \\"r808(5,8)\\" # gain 0.9 # room 0.5 # size 0.9\\nd2 $ jux rev $ stack [\\n            n ( scale \\"wavemorphian\\" $ cat $ replicate 8 $ segment \\"<4>\\" $ irand 5) # s \\"sxt22\\" # gain 0.5\\n           ,n ( scale \\"wavemorphian\\" $ cat $ replicate 8 $ segment \\"<4>\\" $ irand 5) # s \\"sxt31\\" # gain 0.5\\n           ,n ( scale \\"wavemorphian\\" $ cat $ replicate 8 $ segment \\"<4>\\" $ irand 5) # s \\"sxt50\\" # gain 0.5 # legato 1.25\\n           ,n ( scale \\"wavemorphian\\" $ cat $ replicate 8 $ segment \\"<2>\\" $ irand 5) # s \\"sxt31\\" # gain 0.6 # speed 2.0\\n           ,n ( scale \\"wavemorphian\\" $ cat $ replicate 8 $ segment \\"<3>\\" $ irand 5) # s \\"sxt42\\" # gain 0.5 # speed 2.0\\n           ,n ( scale \\"wavemorphian\\" $ cat $ replicate 8 $ segment \\"<1>\\" $ irand 5) # s \\"sxt60\\" # gain 0.7 # speed 2.0 # nudge 0.25\\n           ,n ( scale \\"wavemorphian\\" $ cat $ replicate 4 $ segment \\"<1>\\" $ irand 5) # s \\"sxt69\\" # gain 0.7 # speed 2.0 # nudge 0.675\\n           ] # room 0.5 # size 0.9\\n```\\n\\nIn this context, perhaps this could also be interesting: [Elizabeth Margulis On Repeat: How Music Plays the Mind](http://www.elizabethmargulis.com/on-repeat)  \\n\\n**Do you use Tidal with other tools / environments?**  \\n- In the beginning, I really wanted to use Tidal to control hardware synthesizers (Six-Trak, Juno 106, etc.), based on sonic demands. In the meantime, I have largely discarded this approach. Instead, I create a sound on the Six-Trak, then sample a chromatic octave and continue working with these samples directly in TC. The many possibilities of sample chopping and editing functions within TC offer many more sonic possibilities that I don\'t have within the hardware. I also like to use a hardware controller to adjust parameters live in Tidal.\\n\\n## Tidal Contributions  \\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\n- Since I don\'t have a clue about Haskell, I can\'t directly contribute to the further development of Tidal. I can only share my experiences as a user, which I do e.g. at Toplap D\xfcsseldorf meetups. I also try to contribute to the development of the community and the use of Tidal Cycles by planning and running livecoding events and LiveCoding beginners workshops in D\xfcsseldorf, Germany and in Tbilisi, Georgia. Not least for this reason, I would now like to take a look at Strudel.\\n\\n**What motivates you to work on Tidal?**   \\n- Basically, it\'s the curiosity to scratch musical boundaries and - if it goes well - to enter new musical terrain here and there.\\n\\n**Future perspectives**\\n- Yaxu\u2019s [Learning Tidal Cycles Course](https://tidalcycles.org/docs/patternlib/tutorials/course1) was my general door opener to using Tidal. Thank you so much for this wonderful introduction, @Yaxu! And since then the [Tidal Club](https://club.tidalcycles.org/) is a permanent resource of knowledge, which I receive as a great gift at any time. I hereby expressly would like to thank the entire Tidal community!\\n\\n- On the other hand, many more advanced techniques and knowledge about Haskell and Tidal have remained hidden from me until now. For example, the type signatures are still a mystery to me. I can\'t really use them. I could imagine that I\'m not the only musician who likes to work with Tidal but has no basic knowledge of programming or Haskell and would welcome the opportunity for some kind of further self-help training.\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**  \\n- It\'s never easy to talk about your music. I think I hang somewhere in between. Between dancefloor music on the one hand and really abstract conceptual contemporary music on the other. My music is certainly more influenced by a pop music context than an academic one. Maybe you could call it downbeat electronic, somehow influenced by industrial and IDM. I want to counterbalance this with a certain melodic touch and erratic voices.\\n\\n**How has your music evolved since you have been livecoding?**  \\n- Hm, I hope that since then at least the rhythms have become a bit more interesting.\\n\\n**What samples or instruments do you like to work with?**  \\n- In order not to succumb to the danger of repeating classic analogue sounds over and over again, I process the Six-Trak sounds in Robert Henke\'s Granulator 2 within Live. Alternatively, I now also create sounds and loops with the Ableton Live Wavetable Synthesizer.\\n\\n**What projects are you currently working on or planning? What\'s next?**  \\n- I thought I should take the opportunity of the proximity of this years ICLC in Utrecht, so I am currently planning a small live tour of Europe for April and May. I am also helping to organize another satellite event on 05 and 06 May 2023 in D\xfcsseldorf. After that I would like to finally try the MrReason\'s [Tidal Looper](https://github.com/thgrund/tidal-looper).\\n\\n### Links to your music / recorded livecoding sessions:\\n- https://pondskater-music.bandcamp.com/\\n- https://www.instagram.com/pondskater_music/\\n- https://www.youtube.com/@toplapddorf/streams\\n- [Solstice Stream - Dec 2022](https://www.youtube.com/watch?v=9i_7vZgVXsw&list=PLMBIpibV-wQIdS6D1vdijRZPfLBrRP9A_&index=25&t=933s)\\n- [Toplap D\xfcsseldorf Stream 31.12.2021](https://www.youtube.com/watch?v=UA7Ca6gaSvc&t=974s)\\n- [Toplap D\xfcsseldorf Concert 29.10.2021](https://www.youtube.com/watch?v=qGXQVNUWFc0&t=1845s) from about minute 31:30:"},{"id":"/tidal_profile_ndr_brt","metadata":{"permalink":"/blog/tidal_profile_ndr_brt","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_ndr_brt.md","source":"@site/blog/tidal_profile_ndr_brt.md","title":"Tidal Profile - ndr_brt","description":"| Tidal Cyclist  |  ndr_brt   |","date":"2023-03-03T00:00:00.000Z","formattedDate":"March 3, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - ndr_brt","date":"2023-03-03T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - Pondskater (aka Axel Ganz)","permalink":"/blog/tidal_profile_pondskater"},"nextItem":{"title":"Tidal Profile - BuboBubo (Rapha\xebl Maurice Forment )","permalink":"/blog/tidal_profile_bubobubo"}},"content":"| Tidal Cyclist  |  ndr_brt   |\\n| --------:    | :---------- |\\n| Location | Italy |\\n| Years with Tidal | 4  yrs |\\n| Other LiveCoding env | Hydra, Supercollider, Threnoscope, ByteBeat |\\n| Music available online | [Bandcamp](https://umanoudito.bandcamp.com/) |\\n| Code online | [GitHub](https://github.com/ndr-brt/sc-adente) |\\n| Other music/audio sw | sox, ffmpeg, Ardour, Audacity |\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal? What inspires you?**   \\n- When I met it for the first time everything was a wow, the cycle concept, function composition, mini-notation, patternization...\\nNowadays I\'m still able to find inspiration watching other people livecoding or reading the posts on tidal club, especially when there are custom functions listed.\\n\\n**How do you approach your livecoding sessions?**  \\n- I always try to start from scratch, when I code alone I usually focus on a single function and try to get everything out of it, while I\'m in front of an audience I just go with the flow.\\n\\n**What functions and coding approaches do you like to use?**\\n- I\'m a huge fan of `superimpose` (used with the `si` shortand), especially mixed with `hurry`, in my \\"single sample runs\\" I create layers of the same sample playing at different speed/density to create rhythm and melodic patterns.\\nFor example:\\n```haskell\\nlet sh t f p = superimpose ((hurry t).f) p\\n\\nd1\\n  $ sh 5 id\\n  $ sh \\"e\\" id\\n  $ sh 3 id\\n  $ s \\"sine\\"\\n```\\n\\nthis is a really simple example, and from here you can start and mixup all sort of other functions, I also love `chunk`, that moves things a lot:\\n```haskell\\nd1\\n  $ chunk 7 (|* speed 1.5)\\n  $ sh 5 id\\n  $ sh \\"e\\" id\\n  $ sh 3 id\\n  $ s \\"sine\\"\\n```\\n\\nThe fun is that, if you replace `sin` with, for example, a percussive sample like `bd`, here you have a nice drum pattern.\\n\\nThen to completely unhinge the structure, `chew` and `bite` are also good friends:\\n```haskell\\nd1\\n  $ chew 4 (iter 3 \\"3 1 0\\")\\n  $ chunk 7 (|* speed 1.5)\\n  $ sh 5 id\\n  $ sh \\"e\\" id\\n  $ sh 3 id\\n  $ s \\"sine\\"\\n\\n-- or\\n\\nd1\\n  $ bite 4 (iter 5 \\"3 0 1\\")\\n  $ chunk 7 (|* speed 1.5)\\n  $ sh 5 id\\n  $ sh \\"e\\" id\\n  $ sh 3 id\\n  $ s \\"sine\\"\\n```\\n\\nI often try to escape from this mindset but at the end I fall into it most of the times.\\n\\n**Do you use Tidal with other tools / environments?**\\n- I tried it to control some drum machines circuit bent by me but at the end I find the hardware overcomplicated and I prefer to play soft-synths, especially Supercollider: everything in a box and controllable with the keyboard.\\n- I used Tidal also to [draw stuff with p5 during some sessions](https://www.youtube.com/watch?v=lbUCSVC4GPs).\\n\\n## Tidal Contributions  \\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**\\n- I learned Haskell only to contribute to Tidal. I\'m passionate about reading code and get the insights of the software, on the main codebase I solved some bugs and added some features mainly in the mini-notation section ([tidal commits](https://github.com/tidalcycles/Tidal/commits?author=ndr-brt)).\\n- I took care of the migration from Travis CI to GitHub Actions.\\n- Atom -> Pulsar: At a certain point I noticed that the Atom Plugin was practically unmaintained so I proposed to be its maintainer, and I brought it back on track. Now Atom has been disbanded but luckily the Pulsar community is vibrant and the Tidal plugin is already fully compatible with it. It was a pretty satisfying migration ([Pulsar-tidalcycles](https://github.com/tidalcycles/pulsar-tidalcycles)).\\n\\n**What motivates you to work on Tidal?**\\n- Not to be selfish but most of the work I did had direct impact on the use I\'m doing of Tidal, I guess because it\'s easy to contribute when you know why something needs to be improved/fixed.\\n\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**\\n- Well, most of the time it is noisy, sometimes mellow, always not danceable.\\n\\n**How has your music evolved since you have been livecoding?**\\n- For sure it changed, I\'m not sure it \\"evolved\\", sometimes I think I was more creative when I was learning how to use the instrument, now it\'s easier to get into the loop of being repetitive.\\n\\n**What samples or instruments do you like to work with?**\\n- I try not to use the default samples nor the default synths, I sometimes write my own synths, sometimes I record my own samples or I get them from various sources.  \\n\\n**What projects are you currently working on or planning? What\'s next?**\\n- I recently finished a record that was a collaboration with Naotodate, that\'s a non-livecoding noise friend from Italy ([on bandcamp](https://umanoudito.bandcamp.com/album/a-letter-is-a-number-a-feeling-is-a-code)).\\n- Now I\'m working to another collaboration record, this time with ETOL, an amazing italian livecoder. To be fair the project it is still in an embryonic state.\\n\\n\\n### Links to your music / recorded livecoding sessions:\\n- [Bandcamp](https://umanoudito.bandcamp.com/)\\n- [YouTube](https://www.youtube.com/@ndrbrt) (not only livecoding) - here are a few of them using TidalCycles\\n  - [single sample run #4: gtr [u-mano u-dito]](https://www.youtube.com/watch?v=XYk096aDOcU&t=54s)\\n  - [single sample run #6: uxay [u-mano u-dito]](https://www.youtube.com/watch?v=CrOfleUR5-c)\\n  - [TidalCycles + Mutable Instruments Clouds droning sounds](https://www.youtube.com/watch?v=Zk3ICtit3tM)\\n  - [Pinging filters](https://www.youtube.com/watch?v=3vUXVsh0ICY)\\n- [Soundcloud](https://soundcloud.com/umanoudito) (not really updated)\\n\\n### Other  \\n- I\'m a software engineer by day and a punk \\"musician\\" by night, I played and still play guitar/drums/bass in various bands\\n- I\'m also part of Toplap Italia, I organize livecoding shows sometimes\\n- I\'ve been a Linux user for like 20 years\\n- I like diy electronics, circuit bending and fixing broken stuff found in the trash\\n- Either I talk too much or I don\'t talk at all"},{"id":"/tidal_profile_bubobubo","metadata":{"permalink":"/blog/tidal_profile_bubobubo","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_bubobubo.md","source":"@site/blog/tidal_profile_bubobubo.md","title":"Tidal Profile - BuboBubo (Rapha\xebl Maurice Forment )","description":"| Tidal Cyclist  | Rapha\xebl Maurice Forment |","date":"2023-02-28T00:00:00.000Z","formattedDate":"February 28, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - BuboBubo (Rapha\xebl Maurice Forment )","date":"2023-02-28T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - ndr_brt","permalink":"/blog/tidal_profile_ndr_brt"},"nextItem":{"title":"Tidal Profile - tedthetrumpet (J Simon van der Walt)","permalink":"/blog/tidal_profile_tedthetrumpet"}},"content":"| Tidal Cyclist  | Rapha\xebl Maurice Forment |\\n| --------:    | :---------- |\\n| aka    | BuboBubo |\\n| Location | Lyon/Paris, France |\\n| Years with Tidal | 4 yrs |\\n| Other LiveCoding env | SuperCollider, ORCA, FoxDot |\\n| Music available online | [Bandcamp](https://bubobubo.bandcamp.com/album/archive-grrrnd-zero) |\\n| Code online | [GitHub](https://github.com/Bubobubobubobubo) |\\n| Other music/audio sw | SuperCollider, MaxMSP, SunVox, VCVRack |  \\n\\n<img src=\\"https://cookie.paris/static/2691e91b9da74087ddb672eb917bec9e/04f58/8.webp\\"  width=\\"600\\" height=\\"450\\" />\\n\\n## Livecoding  \\n\\n**What do you like about livecoding in Tidal? What inspires you?**   \\n\\nTidalCycles taught me a lot about music and improvisation. I used not to care too much about rhythm and structures when improvising. The emphasis that Tidal is putting on rhythm can actually be beneficial. It pushes you to explore some aspects of music you might be neglecting: complex time signatures, intriguing rhythms, etc... I also like the fact that it feels like a \\"metaphoric\\" language to talk about music that ends up taking shape while typing on the keyboard. Making music with Tidal, you quickly start to put a name on specific patterning concepts.\\n\\nTidal is also super fun: I usually have a great time when improvising during a jam session using it, especially when it blends with other non algorithmihc instruments :)\\n\\n**How do you approach your livecoding sessions?**  \\n\\nI like to setup a system that I find interesting or playful. I spend quite some time organising my instruments, effects, mixing desk, controllers, etc... Whenever I find a system that I find interesting to play with, I\'m generally not preparing much more. I know that music will just flow if I really start improvising and exploring the system. I just start tinkering to discover what I have on my hands. Preparing such systems takes most of my time before gigs. I think that I\'ve never played twice with the same exact setup!\\n\\nI really like jamming with friends as well without preparing much, using my own collection of audio samples. When coding alone, you almost mechanically end up doing too much for your own sake. Friends will not allow such things to happen. You must listen and adapt! Nowadays, synchronizing Tidal with pretty much anything has also became much more simpler than it used to be. One more reason to do it!\\n\\nOne other thing is that.. I usually don\'t record my stuff! I play live, and then boom, I\'m gone. Live coding is great because it\'s ephemeral. Once you stop coding, you should start again to get the same result.. except it\'s never the same.\\n\\n**What functions and coding approaches do you like to use?**  \\n\\nI\'m not very good at learning the standard library, which is why I ended up writing documentation to actually discover more of it! I have some techniques I always like to play with:\\n* playing with a large collection of samples, without ordering or sorting them beforehand. Iterating through a directory, finding iterations that sound good.\\n* writing structures: using `cat`, `ur`, `stack`, etc...\\n* Nesting groupings (`[]`) and using `<>` a lot to get the most out of patterns that are short to write.\\n* using `superimpose` and `sometimes` too much, to the point where your pattern ends up being a totally different thing compared to what you started with.\\n* *soloing* by just writing a one-note pattern that I edit really fast.\\n\\nSome people use extensive collections of custom functions. I never could quite grasp Haskell, so I ended up maximising what I truly understood in the language!\\n\\n**Do you use Tidal with other tools / environments?**  \\n\\nAll the time. I usually separate my orbits (stereo tracks) to a DAW or to another software for post-processing. I end up adding some controls to Tidal to control send/returns and effects without leaving the keyboard. Tidal is now also one of my favorite way to interact with any piece of gear that I can lay my hands on.\\n\\n\\n## Tidal Contributions  \\n\\n**How do you contribute to Tidal Cycles? What have you worked on?**  \\n\\nI used to contribute a lot to the documentation ~1 year ago. When I first started playing with Tidal, all the good stuff was documented in the old wiki website. My first \\"invisible\\" contribution was to write some amount of french translation that wasn\'t easily accessible because the system had its quirks. When the new website suddenly appeared, I ported most of the old website to the new website, reorganising pretty much everything to my liking :)\\n\\nI was very cautious, trying to make information easy to discover, specifically because I spent so much time digging in the past! This effort has now turned into a very healthy collective effort and the Tidal documentation is something to proud of for everyone who contributed to it!\\n\\n**What motivates you to work on Tidal?**   \\n\\nNowadays, I don\'t contribute that often by writing/coding stuff so I can\'t say that I\'m motivated to make the system any better! However, I really love to teach Tidal whenever I can. I had the opportunity to teach it in a graduate class at my current university. I also teach Tidal to whoever is interested and sometimes during formal/informal workshops, etc...\\n\\n## Music  \\n\\n**Tell us about your livecoding music.**  \\n\\nI love it when the music I play serves as an outlet and a release. I don\'t really play the music I enjoy listening which is something that I always found intriguing... I\'ve learned to somehow accept it. I usually listen to folk / rock music with a fair amount of jazz but what I love playing the most with Tidal is hard/fast rhythmic music! Meaning a deluge of drums, saturation and distortion, mangled samples, etc... I also think that Tidal forces you to go in that direction but it\'s a topic for another day!\\n\\n**How has your music evolved since you have been livecoding?**  \\n\\nIt changed a LOT about the way I approach music-making. Before I started learning Tidal, I had a mild interest in computers and synthesizers. Nowadays, I\'m living in a room full of audio cables / computers. Tidal was very influencial in the way I think about music, but that\'s also because I\'ve read a lot of the things Alex wrote about livecoding / Tidal. The most important thing that Tidal has taught me is that algorithmic music can actually be simple. Its simplicity is what allows you to go deep, by combining simple ideas and processes and ending up with fascinating results.\\n\\nI also don\'t play much piano anymore, and it forced me to pick up my guitar again... just to stretch my fingers after typing so much on a keyboard!\\n\\n**What samples or instruments do you like to work with?**  \\n\\n* I like \\"joke\\" samples. I ended up soloing with the sound of my oven cooking a pizza a few months ago. `crow`, without doubt, is the best audio sample in the default library. By trying hard enough, you can make them sound like the best thing you\'ve ever heard, or fail!\\n* Nowadays, I\'m specifically looking for instruments with few parameters to tweak. Few parameters means that you are more likely to remember all of them when writing a pattern!\\n* I feel like I\'m repeating myself but: large collections of unsorted samples!\\n\\nSometimes, I also try to play with having the minimum amount of control on the Tidal side and relying more on real instrumentst that I can tweak with my hands: modular synthesizers (sending CV and GATE only), drum machines, etc... It feels more natural to launch a pattern and to tweak its output afterhands.\\n\\n**What projects are you currently working on or planning? What\'s next?**  \\n\\nI\'m working on my PhD manuscript... which is about live coding! I\'ve been studying live coding languages and techniques for quite some time now and I\'m trying to write about this delicate topic by giving it justice! It\'s an incredibly dense topic and I feel inclined not to give up on any detail that I find fascinating about this art practice. To be more specific, my angle is to think about how live coding languages are inspired by certain aesthetical/political/technical ideas or concepts and how the implementation of these are giving rise to a new range of ideas inspired by the result we\'re now experiencing :)\\n\\nI\'ve also been working for quite some time on my own live coding environment named [Sardine](https://sardine.raphaelforment.fr). It started out as an experiment to reimplement some of the things I saw during my study; trying to understand them by doing! Then.. it started to mutate into its own thing! I\'m still actively working on it and I use it for my own performances nowadays. I have a group of friends and contributors that have been helping me to make it, and they also added their own ideas to it. I love to craft things where you put so much energy and craft! Alex was right saying that patterns are a valuable area of study! I see patterns all the time, and sometimes cross the path with some ideas already explored by Tidal! Sardine is also quite inspired by Tidal, it can even piggy-back on SuperDirt!\\n\\nMy current plan is to end all of this! Being done with both developing Sardine -- at least most of what I would like it to be -- and writing my manuscript!\\n\\n... If I have one thing to confess ...\\n\\nMy wildest dream would be to actually play bossa nova with grace using a live coding language. I don\'t think that I\'ll ever succeed but dreams are never big enough! I feel that live coding performances are missing some of that expressivity that \\"real\\" musicians have!\\n\\n### Links to your music / recorded livecoding sessions:\\n- Your Website : [Personal](https://raphaelforment.fr) | [Sardine](https://sardine.raphaelforment.fr)\\n- [YouTube](https://www.youtube.com/@raphaelforment7668)\\n- [Cookie Collective](https://cookie.paris)\\n\\n### Other\\n\\nBig shout out to my friends from the [Cookie Collective](https://cookie.paris) and from the Digital Audio Community in Lyon! They are also part of why I find live coding so interesting nowadays. It\'s a treat to make music / chat / collaborate with them. The french scene is more alive than ever but I feel that not much is said about it. Hope to meet with other live coders from all accross the world in the coming years!\\n\\nThanks to the Tidal community and to the wider TOPLAP / live coding community as well!"},{"id":"/tidal_profile_tedthetrumpet","metadata":{"permalink":"/blog/tidal_profile_tedthetrumpet","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/tidal_profile_tedthetrumpet.md","source":"@site/blog/tidal_profile_tedthetrumpet.md","title":"Tidal Profile - tedthetrumpet (J Simon van der Walt)","description":"| Tidal Cyclist  | J Simon van der Walt |","date":"2023-02-25T00:00:00.000Z","formattedDate":"February 25, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - tedthetrumpet (J Simon van der Walt)","date":"2023-02-25T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - BuboBubo (Rapha\xebl Maurice Forment )","permalink":"/blog/tidal_profile_bubobubo"},"nextItem":{"title":"Tidal Profile - cleary (Bernard Gray)","permalink":"/blog/contributor_profile_cleary"}},"content":"| Tidal Cyclist  | J Simon van der Walt |\\n| --------:    | :---------- |\\n| aka    | tedthetrumpet |\\n| Time with Tidal | 3  yrs |\\n| Other LiveCoding env | SuperCollider, Hydra, Strudel, Punctual |\\n| Music available online | [Bandcamp](https://tedthetrumpet.bandcamp.com/), [SoundCloud](https://soundcloud.com/tedthetrumpet), [YouTube](https://www.youtube.com/tedthetrumpet)  |\\n| Other music/audio sw | Audacity, MuseScore, Logic |\\n\\n<img\\n  src={require(\'./jsvdw-birdhide.jpg\').default}\\n  alt=\\"ttt birding\\"\\n  width=\\"600\\"\\n/>\\n\\n## Livecoding\\n\\n**What do you like about livecoding in Tidal?**\\n\\n- I have no background in computer science, but I find the syntax suprisingly intuitive. Also, by comparison with SuperCollider, you can get a lot of music going with very little typing.\\n\\n**How do you approach your livecoding sessions?**\\n\\n- Two main approaches, I guess. Usually it\'s just [quick improvisations](https://diode.zone/w/ocNZjYtoL54a1rcymwH2Gg) on the spur of the moment, often ending up with nothing more than a one minute long sketch. I\'m not particularly trying to create anything specific, and I just stop when I have something that sounds interesting.\\n- The other approach is when I have an idea for a particular sound or gesture or structure that I want to create. This is usually less succesful: I\'ve got a lot of [abandoned projects](https://youtu.be/zQwASJEnYEY) where I tried and failed over a period of days or weeks to achieve some aim or other.\\n\\n**What functions and coding approaches do you like to use?**\\n\\n- My favourite technique is one that some people frown on: making random but fixed patterns that repeat themselves. So, for instance, rather than explicitly creating a pattern in the mini notation, I usually start with something like `d1 $ n (loopFirst $ shuffle 8 $ run 8) # s \\"peri\\"`. (Which is actually one place where SuperCollider wins in conciseness, it\'s basically [Pshuf](http://doc.sccode.org/Classes/Pshuf.html)).\\n\\n\\n## Music\\n**Tell us about your livecoding music. What musical genre(s) or style(s) describe it best?**\\n\\n- Three main approaches: er\u2026 [gamelan](https://youtu.be/yN1STGvmRqY), [algorave](https://soundcloud.com/tedthetrumpet/twaytee), and [abstract](https://youtu.be/ID4Zh3C2Oso)? I should say \'gamelan\': in other words music that may use gamelan samples and ideas from Javanese or Balinese music without *really* being gamelan music. I have no proper skills, knowledge or understanding when it comes to dance music, but it\'s always fun to try to improvise an algorave banger live. \'Abstract\' might be when I use something like `slowstripe` to defeat any sense of pulse and start pitching samples down a couple of octaves.\\n\\n**How has your music evolved since you have been livecoding?**\\n\\n- I could say that livecoding saved my musical creativity after I finished my [PhD](https://archive.org/details/TheOtherOtherHand)! I got kind of burned out after spending seven years creating a conventional portfolio of \'compositions\'. With code I was able to just make stuff for myself without having to score it or get other people to play it or justify it to anyone.\\n\\n**What samples or instruments do you like to work with?**\\n\\n- My own samples. For me, creating and using my [own](https://github.com/tedthetrumpet/testpage/tree/master/samples/tptm) [sets](https://github.com/tedthetrumpet/testpage/tree/master/samples/longwhistles) of sounds is kind of fundamental to the creative process. For the purposes of a quick rave-up I\'ll happily turn to the standard Tidal set, but for me to really feel ownership of a piece I need to use samples and synths that I have a personal stake in.\\n\\n**What projects are you currently working on / planning? What\'s next?**\\n\\n- I need to find a way to release my [actual first album](https://soundcloud.com/tedthetrumpet/thealbumteaser). I finished it several years ago, but the label who were going to release it stopped functioning, so\u2026 I don\'t feel like I want to release it myself but I haven\'t found anyone else who is interested. Yet.\\n\\n\\n## Tidal Contributions\\n**How do you contribute to Tidal Cycles? What have you worked on?**\\n\\n- I\'m a musician not a developer, so I\'m not really able to \'contribute\' in the sense of code! However, I have made some [gamelan sample banks](https://github.com/tedthetrumpet/testpage/tree/master/nmsamples) available, asked (hopefully useful) questions on forums, taught Tidal at [my institution](https://pure.rcs.ac.uk/portal/en/persons/j-simon-van-der-walt(449d6ab3-50fe-4a02-bc83-76e1f88b2769).html), and initiated the [Floating Gold](http://www.nagamas.co.uk/floatinggold/) project that used MiniTidal in [Estuary](https://github.com/dktr0/estuary).\\n\\n## Links to your music / recorded livecoding sessions:\\n\\n- Most of the things I\'ve put out are actually in SuperCollider, but these are Tidal/MiniTidal \u2013\\n    - Improvising \'gamelan\' music in Estuary https://diode.zone/w/ppenMJ4p9W2b41pDe7ZNiA\\n    - Short Estuary piece \'brarnarnarnarnard\' https://www.youtube.com/watch?v=tV4G1z55ePA\\n    - Solstice Night Stream Dec 2022 - Livecoding with Audacity https://www.youtube.com/watch?v=0YpgHdJY-Kw&list=PLMBIpibV-wQIdS6D1vdijRZPfLBrRP9A_&index=6\\n    - Part of a longer jam I\'d forgotten about, starts abstract and gets a bit more rave later  https://youtu.be/jDl_ALEq4Zs?t=575\\n\\n## Other\\n\\n<img\\n  src={require(\'./jspcanscrop.png\').default}\\n  alt=\\"youth photo with vintage synth\\"\\n  width=\\"600\\"\\n/>\\n\\n- With my brother, late 1970s, homebrew [analog synth](http://pcbunn.cithep.caltech.edu/jjb/Synthesizers/Minisonic2/default.htm).\\n- [jsimonvanderwalt.com](https://jsimonvanderwalt.com)\\n- [tedthetrumpet.hotglue.me](https://tedthetrumpet.hotglue.me/)"},{"id":"/contributor_profile_cleary","metadata":{"permalink":"/blog/contributor_profile_cleary","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/contributor_profile_cleary.md","source":"@site/blog/contributor_profile_cleary.md","title":"Tidal Profile - cleary (Bernard Gray)","description":"| Tidal Cyclist  | Bernard Gray |","date":"2023-02-16T00:00:00.000Z","formattedDate":"February 16, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Tidal Profile - cleary (Bernard Gray)","date":"2023-02-16T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - tedthetrumpet (J Simon van der Walt)","permalink":"/blog/tidal_profile_tedthetrumpet"},"nextItem":{"title":"Blog Archive","permalink":"/blog/blogArchive"}},"content":"| Tidal Cyclist  | Bernard Gray |\\n| --------:    | :---------- |\\n| aka    | cleary |\\n| Time with Tidal | 3  yrs |\\n| Contributor since | 2017 |\\n| Other LiveCoding env | Estuary, Punctual, Hydra, ORCA |\\n| Music available online | [SoundCloud](https://soundcloud.com/bergra) |\\n| Code online | [GitHub](https://github.com/cleary/livecode/) |\\n| Other music/audio sw | Ubuntu Studio/Ardour/Carla/Vital/mi-ugens|\\n\\n## Tidal Contributions\\n**How do you contribute to Tidal Cycles? What have you worked on?**\\n\\nI think I\'ve had a go at just about everything:\\n\\n- I developed and maintain a [Linux installer](https://github.com/cleary/ansible-tidalcycles) in Ansible\\n- I\'ve added a few [simple patches to](https://github.com/tidalcycles/Tidal/commits?author=cleary)/nutted out ideas for tidal itself, particularly around the [chords module](https://club.tidalcycles.org/t/rfc-working-on-making-chord-naming-chordlist-more-consistent/2717)\\n- I\'ve written [documentation](https://github.com/tidalcycles/tidal-doc/commits?author=cleary)\\n- I often [play in](https://youtube.com/playlist?list=PLt8O3WdGnQjdg8PPpRgsw4w9bSmX5JY7b), and have helped organise some of the Solstice Marathon Livestreams\\n- I am active and support others on the [forums](https://club.tidalcycles.org/u/cleary/summary) and the discord support channels\\n- For the last 2 years I\'ve been hosting a weekly collaborative (mostly tidal) livecoding session called [WeekendJam](https://youtube.com/playlist?list=PLt8O3WdGnQjfCNVBK2O0W0_nwiSgWIoFR) for anyone to come along and have a jam with me\\n- I\'ve written and run tidal-based [workshops](https://decoded.livecode.au), online and [in](https://allevents.in/griffith/decoded-%E2%80%94%E2%80%94-an-artistic-livecoding-workshop/200022125384118) [person](https://infrequency.au/) to try and network/raise the profile of the [livecoding scene in Australia](http://www.ozchi.org/2022/creativity.html)\\n\\n**What motivates you to be a Tidal contributor?**\\n\\n- The community is lovely, they give/have given me a lot and I like to return that where I can. The project allows for such vast and varied possibilities in learning and creation, and that\'s what keeps me interested. The focus on inclusivity, sharing and generally \\"anti-gatekeeping\\" is a huge drawcard for me too.\\n- I particularly enjoy the WeekendJams - I get to meet new people, share inspirations with all the different ideas all mashed together, learn, and just generally have a great time. I\'ve made some great friends through jams.\\n\\n## Livecoding\\n<img src=\\"https://photos.smugmug.com/photos/i-7r8LGsw/0/O/i-7r8LGsw.jpg\\"  width=\\"600\\" height=\\"450\\" />   \\n(photo: Jason Richardson)\\n\\n**What do you like about livecoding in Tidal?**\\n\\n- It\'s concise, it\'s (fairly) self-explanatory, and it\'s very easy to be both creatively specific and random as required.\\n\\n**How do you approach your livecoding sessions?**\\n\\n- For solo performances, I prepare something - usually a \\"scaffolded\\" set of code which allows for creative path choosing during the set.\\n- For the WeekendJam sessions, I never prepare anything beyond the occasional group idea for exploration (which is broached 5 mins before start time).\\n\\n**What functions and coding approaches do you like to use?**\\n\\n- I tend to make a point to separate my rhythmic and harmonic elements for easy reuse (`struct` and `n`/`note`) - which is a hangover from the collaborative nature of the WeekendJam sessions. I keep the code for most sets I play on [Github](https://github.com/cleary/livecode/tree/main/sets). An example of this is from one of my patternuary pieces ([full code](https://github.com/cleary/livecode/blob/main/sets/patternuary_2023/patternuary_20230101.tidal), [video](https://www.youtube.com/watch?v=lRTkcB02l0g)):\\n```\\n  $ struct \\"t(6,8,<0 1>)\\"\\n  $ n \\"<a3!2 f4!2 e3!2>\\"\\n  # s \\"braids\\"\\n```\\nDoing it in this way makes it very easy to take the rhythmic structure and apply it for percussion (for example), or take the notes and use them as a foundation for a chord arpeggio sequence in another orbit. If you are collaborating, it\'s very easy and obvious for others to borrow and build off too.\\n\\n\\n**Do you use Tidal with other tools / environments?**\\n\\n- I\'ve done some external software synth control (Vital/Yoshimi), I also have a Midi Fighter Twister controller which sometimes gets a run. I tend to keep it pretty vanilla though, particularly since doing the workshop tours last year. Also, [estuary](https://estuary.mcmaster.ca) of course.\\n\\n## Music\\n**Tell us about your livecoding music. What musical genre(s) or style(s) describe it best?**\\n\\n- Varied? I don\'t really know much about genres - for more musical stuff, I tend to make use of western music theory. If I\'m doing solely rhythmic stuff I tend to try and push myself [outside my common use 4/4 6/8 time signatures](https://youtu.be/to1_4id_oyc) - the few patterns I did for [#patternuary this year](https://youtube.com/playlist?list=PLt8O3WdGnQjdh9SJqIQeku8u9g1acI5Y5) probably highlight that variety fairly well.\\n\\n**How has your music evolved since you have been livecoding?**\\n\\n- Yeah, _a lot_ - I played \\"traditional\\" instruments before I started. The biggest evolution has involved trying to break out of all the subconscious composer lockin that comes with that (fixed tempos, chords limited by number of fingers/how far they can stretch, increasing the number of simultaneous voices). It\'s moved from what I could do on a guitar/bass/piano with 10 fingers and a looper to beyond orchestral possibilities (and exposed my lack of compositional knowledge in that area!).\\n\\n**What samples or instruments do you like to work with?**\\n\\n- Anything :) I\'ve been trying to get more comfortable [working with break samples](https://youtu.be/JsZPN3yqu2s) a bit lately.\\n\\n**What projects are you currently working on / planning? What\'s next?**\\n\\n- I\'d like to develop the livecode.au domain into a tool for organisation/promotion of Australian livecoding events/personalities, that one is going to take more time than I currently have available, so it\'s on the backburner for now (unless anyone wants to give me hand!)\\n- To try and claw back a little time, I\'m looking at sharing the WeekendJam load a little, and hopefully moving it into a general stream/yt account so that multiple organisers can have control depending on availability.\\n- I\'d also like to finish and release some music, just to learn a bit more about the whole process chain - that\'s a hope item for this year :)\\n\\n## Links to your music / recorded livecoding sessions:\\n\\n- YouTube: https://www.youtube.com/@clearyss\\n- Soundcloud: https://soundcloud.com/bergra\\n- Twitch: https://www.twitch.tv/clearyss\\n- Github (code): https://github.com/cleary/livecode\\n\\n## Other\\n\\nJust a big thank you for all the people I\'ve chatted to/jammed with/learned from over the years, you\'ve all been a huge inspiration, and I\'m very glad to have been able to share my livecoding journey with you.  \\n\\n<img src=\\"https://photos.smugmug.com/photos/i-Tkwbk75/0/O/i-Tkwbk75.jpg\\"  width=\\"600\\" height=\\"450\\" />     \\n(photo: Jason Richardson)"},{"id":"/blogArchive","metadata":{"permalink":"/blog/blogArchive","editUrl":"https://github.com/tidalcycles/tidal-doc/tree/main/blog/blog/blogArchive.md","source":"@site/blog/blogArchive.md","title":"Blog Archive","description":"The older site had a Blog feature with posts from 2017 - 2020.","date":"2020-01-01T00:00:00.000Z","formattedDate":"January 1, 2020","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Blog Archive","date":"2020-01-01T00:00:00.000Z"},"prevItem":{"title":"Tidal Profile - cleary (Bernard Gray)","permalink":"/blog/contributor_profile_cleary"}},"content":"The older site had a Blog feature with posts from 2017 - 2020.  \\n[TidalCycles Blog Archive](https://blog.tidalcycles.org/index.html)\\n\\nContent to explore:\\n- [Interviews](https://blog.tidalcycles.org/category/interviews/index.html)\\n  - Malitzin Cortes aka CNDSD\\n  - Kindohm aka Mike Hodnick\\n- [Autonomous Live Coding: Summer of Haskell Project](https://blog.tidalcycles.org/index.html%3Fp=1280.html)\\n- [Six Months of Tidal](https://blog.tidalcycles.org/index.html%3Fp=346.html)\\n\\nSome of the posts may be dated, or refer to older versions of Tidal. But it is still interesting to reflect on how things have evolved."}]}')}}]);