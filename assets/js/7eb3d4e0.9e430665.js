"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9357],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),d=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=d(t.components);return n.createElement(m.Provider,{value:e},t.children)},s="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),s=d(a),k=r,h=s["".concat(m,".").concat(k)]||s[k]||u[k]||l;return a?n.createElement(h,i(i({ref:e},p),{},{components:a})):n.createElement(h,i({ref:e},p))}));function h(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var m in e)hasOwnProperty.call(e,m)&&(o[m]=e[m]);o.originalType=t,o[s]="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},6911:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(3117),r=(a(7294),a(3905));const l={},i="Plaits engines",o={unversionedId:"reference/mi-ugens-plaits",id:"reference/mi-ugens-plaits",title:"Plaits engines",description:"This list was adapted from the original Plaits manual, with some edits to match Tidal's parameter implementation.",source:"@site/docs/reference/mi-ugens-plaits.md",sourceDirName:"reference",slug:"/reference/mi-ugens-plaits",permalink:"/docs/reference/mi-ugens-plaits",draft:!1,editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/mi-ugens-plaits.md",tags:[],version:"current",lastUpdatedAt:1749237392,formattedLastUpdatedAt:"Jun 6, 2025",frontMatter:{}},m={},d=[{value:"0: Pair of classic waveforms",id:"0-pair-of-classic-waveforms",level:2},{value:"1: Waveshaping oscillator",id:"1-waveshaping-oscillator",level:2},{value:"2: Two operator FM",id:"2-two-operator-fm",level:2},{value:"3: Granular formant oscillator",id:"3-granular-formant-oscillator",level:2},{value:"4: Harmonic oscillator",id:"4-harmonic-oscillator",level:2},{value:"5: Wavetable oscillator",id:"5-wavetable-oscillator",level:2},{value:"6: Chords",id:"6-chords",level:2},{value:"7: Vowel and speech synthesis",id:"7-vowel-and-speech-synthesis",level:2},{value:"8: Granular cloud",id:"8-granular-cloud",level:2},{value:"9: Filtered noise",id:"9-filtered-noise",level:2},{value:"10: Particle noise",id:"10-particle-noise",level:2},{value:"11: Inharmonic string modeling",id:"11-inharmonic-string-modeling",level:2},{value:"12: Modal resonator",id:"12-modal-resonator",level:2},{value:"13: Analog bass drum model",id:"13-analog-bass-drum-model",level:2},{value:"14: Analog snare drum model",id:"14-analog-snare-drum-model",level:2},{value:"15: Analog hi-hat model",id:"15-analog-hi-hat-model",level:2}],p={toc:d};function s(t){let{components:e,...l}=t;return(0,r.kt)("wrapper",(0,n.Z)({},p,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"plaits-engines"},"Plaits engines"),(0,r.kt)("p",null,"This list was adapted from the original ",(0,r.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20201111233906/https://mutable-instruments.net/modules/plaits/manual/"},"Plaits manual"),", with some edits to match Tidal's parameter implementation."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"engine")," parameter (0-15) can be set to select one of the models listed below."),(0,r.kt)("p",null,"All engines accept the ",(0,r.kt)("inlineCode",{parentName:"p"},"harm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"timbre")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"morph")," parameters, which have specific ways to shape the sound in each engine. The original Plaits module has an additional AUX output which features a distinct rendering of the original sound; in Tidal, you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," parameter to 1 to get the equivalent to the AUX output."),(0,r.kt)("h2",{id:"0-pair-of-classic-waveforms"},"0: Pair of classic waveforms"),(0,r.kt)("p",null,"Virtual-analog synthesis of classic waveforms."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(7313).Z,width:"516",height:"217"})),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"detuning between the two waves")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"variable square, from narrow pulse to full square to hardsync formants")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"variable saw, from triangle to saw with an increasingly wide notch (Braids\u2019 CSAW)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"sum of two hardsync\u2019ed waveforms, the shape of which is controlled by ",(0,r.kt)("inlineCode",{parentName:"td"},"morph")," and detuning by ",(0,r.kt)("inlineCode",{parentName:"td"},"harm"))))),(0,r.kt)("p",null,"A narrow pulse or wide notch results in silence! Use this trick if you want to silence one of the two oscillators, to get a variable square or variable saw."),(0,r.kt)("h2",{id:"1-waveshaping-oscillator"},"1: Waveshaping oscillator"),(0,r.kt)("p",null,"An asymmetric triangle processed by a waveshaper and a wavefolder. Sounds familiar? That\u2019s the same signal processing chain as in Tides, when it runs at audio rate!"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"waveshaper waveform")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"wavefolder amount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"waveform asymmetry")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"variant employing another wavefolder curve, as available in Warps")))),(0,r.kt)("h2",{id:"2-two-operator-fm"},"2: Two operator FM"),(0,r.kt)("p",null,"Two sine-wave oscillators modulating each other\u2019s phase."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"frequency ratio")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"modulation index")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"feedback, in the form of operator 2 modulating its own phase (past 0.5, rough!) or operator 1\u2019s phase (before 0.5, chaotic!)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"sub-oscillator")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Set ",(0,r.kt)("inlineCode",{parentName:"p"},"morph")," to 0 to get the same range of sounds as Braids\u2019 WTFM. Set it to 1 to recreate the same sounds as Braids\u2019 FBFM. A gentler palette equivalent to Braids\u2019 FM is found with ",(0,r.kt)("inlineCode",{parentName:"p"},"morph")," at 0.5."),(0,r.kt)("h2",{id:"3-granular-formant-oscillator"},"3: Granular formant oscillator"),(0,r.kt)("p",null,"Simulation of formants and filtered waveforms through the multiplication, addition and synchronization of segments of sine waves."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"frequency ratio between formant 1 and 2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"formant frequency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"formant width and shape; this controls the shape of the window by which a sum of two synchronized sine oscillators is multiplied")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"simulation of filtered waveforms by windowed sine waves \u2013 a recreation of Braids\u2019 Z*** models. ",(0,r.kt)("inlineCode",{parentName:"td"},"harm")," controls the filter type (peaking, LP, BP, HP), with smooth variation from one response to another")))),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(7829).Z,width:"906",height:"230"})),(0,r.kt)("h2",{id:"4-harmonic-oscillator"},"4: Harmonic oscillator"),(0,r.kt)("p",null,"An additive mixture of harmonically-related sine waves."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"number of bumps in the spectrum; starts with one big bump, and progressively adds ripples around it")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"index of the most prominent harmonic; this control is somewhat similar to the cutoff frequency of a band-pass filter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"bump shape \u2013 from flat and wide to peaked and narrow; this control is somewhat similar to the resonance of a band-pass filter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"variant including only the subset of harmonics present in the drawbars of a Hammond organ (frequency ratios of 1, 2, 3, 4, 6, 8, 10 and 12)")))),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6055).Z,width:"585",height:"287"})),(0,r.kt)("h2",{id:"5-wavetable-oscillator"},"5: Wavetable oscillator"),(0,r.kt)("p",null,"Four banks of 8x8 waveforms, accessed by row and column, with or without interpolation."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"sets the active bank (read below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"row index; within a row, the waves are sorted by spectral brightness (except for bank D which is a mess!)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"column index")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"low-fi (5-bit) output")))),(0,r.kt)("p",null,"There are 4 interpolated banks followed by the same 4 banks, in reverse order, without interpolation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Bank A: harmonically poor waveforms obtained by additive synthesis (sine harmonics, drawbar organ waveforms)."),(0,r.kt)("li",{parentName:"ul"},"Bank B: harmonically rich waveforms obtained by formant synthesis or waveshaping."),(0,r.kt)("li",{parentName:"ul"},"Bank C: wavetables from the Shruthi-1 / Ambika, sampled from classic wavetable or ROM playback synths."),(0,r.kt)("li",{parentName:"ul"},"Bank D: a joyous semi-random permutation of waveforms from the other 3 banks.")),(0,r.kt)("p",null,"(TODO: make it clearer which values of ",(0,r.kt)("inlineCode",{parentName:"p"},"harm")," select each bank, I didn't test)"),(0,r.kt)("h2",{id:"6-chords"},"6: Chords"),(0,r.kt)("p",null,"Four-note chords, played by virtual analogue or wavetable oscillators. The virtual analogue oscillators emulate the stack of harmonically-related square or sawtooth waveforms generated by vintage string&organ machines."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"chord type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"chord inversion and transposition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"waveform; values until 0.5 go through a selection of string-machine like raw waveforms (different combinations of the organ and string \u201cdrawbars\u201d), and above 0.5 it scans a small wavetable containing 16 waveforms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"root note of the chord")))),(0,r.kt)("p",null,"The proper values for ",(0,r.kt)("inlineCode",{parentName:"p"},"harm")," (chord type) are"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"value"),(0,r.kt)("th",{parentName:"tr",align:null},"chord"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.00 - 0.08"),(0,r.kt)("td",{parentName:"tr",align:null},"octave")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.09 - 0.17"),(0,r.kt)("td",{parentName:"tr",align:null},"5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.18 - 0.26"),(0,r.kt)("td",{parentName:"tr",align:null},"sus4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.27 - 0.36"),(0,r.kt)("td",{parentName:"tr",align:null},"m")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.37 - 0.46"),(0,r.kt)("td",{parentName:"tr",align:null},"m7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.47 - 0.56"),(0,r.kt)("td",{parentName:"tr",align:null},"m9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.57 - 0.66"),(0,r.kt)("td",{parentName:"tr",align:null},"m11")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.67 - 0.75"),(0,r.kt)("td",{parentName:"tr",align:null},"M 6/9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.76 - 0.85"),(0,r.kt)("td",{parentName:"tr",align:null},"M9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.86 - 0.95"),(0,r.kt)("td",{parentName:"tr",align:null},"M7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.96 - 1"),(0,r.kt)("td",{parentName:"tr",align:null},"M")))),(0,r.kt)("h2",{id:"7-vowel-and-speech-synthesis"},"7: Vowel and speech synthesis"),(0,r.kt)("p",null,"A collection of speech synthesis algorithms."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"crossfades between formant filtering, SAM, and LPC vowels, then goes through several banks of LPC words")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"species selection, from Daleks to chipmunks. How does it work? This parameter either shifts the formants up or down independently of the pitch; or underclocks/overclocks the emulated LPC chip (with appropriate compensation to keep the pitch unchanged)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"phoneme or word segment selection. When ",(0,r.kt)("inlineCode",{parentName:"td"},"harm")," is greater than (0.4? original docs say knob at 11o'clock), a list of words can be scanned through")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"unfiltered vocal cords\u2019 signal")))),(0,r.kt)("h2",{id:"8-granular-cloud"},"8: Granular cloud"),(0,r.kt)("p",null,"A swarm of 8 enveloped sawtooth waves."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"amount of pitch randomization")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"grain density")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"grain duration and overlap; when set to 1, the grains merge into each other: the result is a stack of eight randomly frequency-modulated waveforms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"variant with sine wave oscillators")))),(0,r.kt)("p",null,"To get a nice \u201csupersaw\u201d waveform, try a moderate amount of pitch randomization and grain density, with full grain overlap."),(0,r.kt)("h2",{id:"9-filtered-noise"},"9: Filtered noise"),(0,r.kt)("p",null,"Variable-clock white noise processed by a resonant filter. The cutoff frequency of the filter is controlled by ",(0,r.kt)("inlineCode",{parentName:"p"},"freq"),". This allows proper tracking!"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"filter response, from LP to BP to HP")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"clock frequency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"filter resonance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"variant employing two band-pass filters, with their separation controlled by ",(0,r.kt)("inlineCode",{parentName:"td"},"harm"))))),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(4605).Z,width:"955",height:"371"})),(0,r.kt)("h2",{id:"10-particle-noise"},"10: Particle noise"),(0,r.kt)("p",null,"Dust noise processed by networks of all-pass or band-pass filters."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"amount of frequency randomization")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"particle density")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"filter type \u2013 reverberating all-pass network before 0.5, then increasingly resonant band-pass filters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"raw dust noise")))),(0,r.kt)("h2",{id:"11-inharmonic-string-modeling"},"11: Inharmonic string modeling"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"No info on the original docs")),(0,r.kt)("h2",{id:"12-modal-resonator"},"12: Modal resonator"),(0,r.kt)("p",null,"For your own pleasure, a mini-Rings! Refer to the Rings section for more information about modulated/inharmonic string synthesis, and modal resonators."),(0,r.kt)("p",null,"When the TRIG input is not patched, the string/resonator is excited by dust (particle) noise. Otherwise, the string is excited by a short burst of filtered white noise, or by a low-pass filtered click. (FIXME: what does the TRIG input equate to in Tidal?)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"amount of inharmonicity, or material selection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"excitation brightness and dust density")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"decay time (energy absorption)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"raw exciter signal")))),(0,r.kt)("p",null,"Note that Plaits uses a less powerful processor than Rings, and is thus limited to 3 voices of polyphony in inharmonic string modeling mode, and 1 voice of polyphony with 24 partials in modal resonator mode. Plaits does not allow you to control the position of the excitation, which is set to 25% of the length of the string/bar/tube."),(0,r.kt)("h2",{id:"13-analog-bass-drum-model"},"13: Analog bass drum model"),(0,r.kt)("p",null,"No fancy acronyms or patented technology here\u2026 Just behavioral simulation of circuits from classic drum machines! The drum machine employs a bridged T-network excited by a nicely shaped pulse."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"attack sharpness and amount of overdrive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"brightness")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"decay time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"frequency-modulated triangle VCO, turned into a sine with a pair of diodes, and shaped by a dirty VCA")))),(0,r.kt)("p",null,"Without any signal patched to the TRIG input, a continuous tone is produced. Not particularly useful, but its amplitude can still be modulated by ",(0,r.kt)("inlineCode",{parentName:"p"},"morph")," and CV input (FIXME: equivalent to CV input in Tidal?)."),(0,r.kt)("h2",{id:"14-analog-snare-drum-model"},"14: Analog snare drum model"),(0,r.kt)("p",null,"The generator employs a bunch of bridged T-networks, one for each mode of the shell, excited by a nicely shaped pulse; plus some band-pass filtered noise. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"balance of the harmonic and noisy components")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"balance between the different modes of the drum")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"decay time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"a pair of frequency-modulated sine VCO, mixed with high-pass filtered noise")))),(0,r.kt)("h2",{id:"15-analog-hi-hat-model"},"15: Analog hi-hat model"),(0,r.kt)("p",null,"A bunch of square oscillators generate a harsh, metallic tone. The resulting signal is mixed with clocked noise, sent to a HPF, then to a VCA. It uses 6 square oscillators and a dirty transistor VCA."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"harm"),(0,r.kt)("td",{parentName:"tr",align:null},"balance of the metallic and filtered noise")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timbre"),(0,r.kt)("td",{parentName:"tr",align:null},"high-pass filter cutoff")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"morph"),(0,r.kt)("td",{parentName:"tr",align:null},"decay time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode 1"),(0,r.kt)("td",{parentName:"tr",align:null},"three pairs of square oscillators ring-modulating each other, and a clean, linear VCA")))))}s.isMDXComponent=!0},7313:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/mi-ugens-plaits-1-708feb030cd3060cf300bb7b7b999547.png"},7829:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/mi-ugens-plaits-2-b251fbd58941bd927b82dc8c60e2048a.png"},6055:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/mi-ugens-plaits-3-18e9cfef0ef90b90855cde33856a8e9f.png"},4605:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/mi-ugens-plaits-4-406b4ab768d7a256bf7dc2986ff799c5.png"}}]);