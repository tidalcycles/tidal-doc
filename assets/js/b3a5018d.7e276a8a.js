"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6356],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>m});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},h=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),d=u(t),p=s,m=d["".concat(l,".").concat(p)]||d[p]||c[p]||o;return t?a.createElement(m,i(i({ref:n},h),{},{components:t})):a.createElement(m,i({ref:n},h))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=p;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[d]="string"==typeof e?e:s,i[1]=r;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7960:(e,n,t)=>{t.d(n,{_:()=>o});var a=t(7294);const s="video_D5zz";function o(e){let{id:n,aspect:t=16/9}=e;return a.createElement("figure",{className:s,style:{paddingBottom:100/t+"%"}},a.createElement("iframe",{src:`https://www.youtube.com/embed/${n}`,frameBorder:"0",allowFullScreen:!0,width:"100%"}))}},9387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var a=t(3117),s=(t(7294),t(3905)),o=t(7960);const i={title:"Course II (> 1.6)",id:"course2"},r=void 0,l={unversionedId:"patternlib/tutorials/course2",id:"patternlib/tutorials/course2",title:"Course II (> 1.6)",description:"Week 5",source:"@site/docs/patternlib/tutorials/course2.mdx",sourceDirName:"patternlib/tutorials",slug:"/patternlib/tutorials/course2",permalink:"/docs/patternlib/tutorials/course2",draft:!1,editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/patternlib/tutorials/course2.mdx",tags:[],version:"current",lastUpdatedAt:1751131389,formattedLastUpdatedAt:"Jun 28, 2025",frontMatter:{title:"Course II (> 1.6)",id:"course2"},sidebar:"docs",previous:{title:"Course I (> 1.6)",permalink:"/docs/patternlib/tutorials/course1"},next:{title:"Haskell",permalink:"/docs/innards/haskell"}},u={},h=[{value:"Week 5",id:"week-5",level:2},{value:"Lesson 1: musical notes",id:"lesson-1-musical-notes",level:3},{value:"Lesson 2: chords, arpeggios and.. Algoraoke",id:"lesson-2-chords-arpeggios-and-algoraoke",level:3},{value:"Lesson 3: adding and using SuperDirt synths",id:"lesson-3-adding-and-using-superdirt-synths",level:3},{value:"Lesson 4: SuperDirt (part II)",id:"lesson-4-superdirt-part-ii",level:3},{value:"Julian Rohrhuber commentary",id:"julian-rohrhuber-commentary",level:4},{value:"Week 6",id:"week-6",level:2},{value:"Lesson 1: canons with &quot;off&quot;",id:"lesson-1-canons-with-off",level:3},{value:"Lesson 2: musical scales",id:"lesson-2-musical-scales",level:3},{value:"Lesson 3: controlling MIDI devices",id:"lesson-3-controlling-midi-devices",level:3},{value:"Lesson 4: controlling Tidal with MIDI",id:"lesson-4-controlling-tidal-with-midi",level:3},{value:"Week 7",id:"week-7",level:2},{value:"Lesson 1: Composing patterns together",id:"lesson-1-composing-patterns-together",level:3},{value:"Lesson 2: Composing functions together",id:"lesson-2-composing-functions-together",level:3},{value:"Lesson 3: Composing tracks with the &quot;ur&quot; function",id:"lesson-3-composing-tracks-with-the-ur-function",level:3},{value:"Week 8",id:"week-8",level:2},{value:"Lesson 1: Shifting time / beat rotation",id:"lesson-1-shifting-time--beat-rotation",level:3},{value:"Lesson 2: Binary patterns",id:"lesson-2-binary-patterns",level:3},{value:"Lesson 3: Fitting values to patterns",id:"lesson-3-fitting-values-to-patterns",level:3}],d={toc:h};function c(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"week-5"},"Week 5"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-1-musical-notes"},"Lesson 1: musical notes"),(0,s.kt)(o._,{id:"ZtCx-YMrwVU",mdxType:"YouTube"}),(0,s.kt)("p",null,"Ok we're back with a surprisingly long video about how to play notes, giving them as numbers or names, and controlling samples and synths.. With a sidetrack about how to look at the actual values inside (the first cycle of) a pattern."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'-- If you \'run\' a pattern by itself, without a \'d1\' or so, then Tidal\n-- will do its best at telling you what\'s in the first cycle. For\n-- example:\n\nnote "3"\n\n-- gives:\n\n-- (0>1)|note: 3.0f\n\n-- 0>1 tells you it\'s an event that starts at position 0 (the start of\n-- the first cycle) and lasts up to 1 (the start of the next cycle).\n-- note is the name of the \'control\' or \'effect\' 3.0f is the value\n-- (\'f\' tells you that it\'s a floating point, decimal number).\n\nnote "3 ~ 5"\n\n-- the above gives two events:\n\n-- (0>\u2153)|note: 3.0f\n-- (\u2154>1)|note: 5.0f\n\n-- We can listen to them:\n\nd1 $ note "3 ~ 5" # s "superpiano"\n\n-- Great notes!\n\n-- (.. if you don\'t hear any, you probably need to install "sc3plugins".)\n\n-- Tidal can also understand note names, and turn them into numbers\n-- for you.\n\n-- For example \'c\' is the same as \'0\'\n\nnote "c"\n\n-- This:\n\nnote "a b c d e f g"\n\n-- is the same as:\n\nnote "9 11 0 2 4 5 7"\n\n-- What happened to 1, 3, 6, 8, and 10?\n-- You can get to them by adding \'s\' for \'sharp\', to add 1 to a note:\n\nnote "cs ds fs gs as"\n\n-- or by using \'f\' for \'flat\' to subtract 1:\n\nnote "df ef gf af bf"\n\n-- In theory, you can get to them all via really sharp \'c\'\n-- notes. These two notes are identical:\nd1 $ note "csssssss g" # s "superpiano"\n\n-- In practice, that surely doesn\'t make a lot of sense.\n\n-- Normally, there are twelve notes in an octave. The default octave\n-- is 5, you can pick notes from other octaves by adding a different\n-- number:\nnote "c5 c6 c4 c6"\n\n-- Lets have a listen\nd1 $ note "c5 c6 c4 c6" # s "superpiano"\n\n-- Lets think about the difference between \'note\', \'n\', synths and\n-- samples.\n\n-- There is no folder of samples called \'superpiano\', the sounds you\n-- hear are being synthesised on-the-fly.\n\n-- With synths, you can use either \'note\' or \'n\' to specify notes,\n-- they mean the same thing.\n\nd1 $ n "c a f e" # s "superpiano"\n\nd1 $ note "c a f e" # s "superpiano"\n\n-- For samples, they mean something different. \'n\' chooses a sample,\n-- \'note\' plays it at a different speed, corresponding to a note.\n\n-- Different sounds:\nd1 $ n "0 1" # sound "dsynth"\n\n-- Different notes:\nd1 $ note "0 1" # sound "dsynth"\n\n-- If you pick a high note, then you\'ll notice the sound is a lot\n-- shorter, because it\'s making it higher by playing it faster.\nd1 $ note "0 24" # sound "dsynth"\n\n-- You might feel that\'s not good, because it doesn\'t sound as natural\n-- as a synthesiser\n-- You might feel that\'s great, because nature is a myth and this is\n-- how old school \'tracker\' music from early rave music and the\n-- demoscene works\n-- You might change your mind on different days\n\n-- You can still use note names in mininotation:\nd1 $ note "c a f e" # sound "dsynth"\n\n-- (Actually you can use do this in any control/effect pattern that\n-- expects a number.. Tidal just treats them as numbers)\n\n-- This dsynth sample is in \'c\'. If it wasn\'t, the notes would\n-- probably sound out of tune with another synth or samplebank.\n\n-- The \'dbass\' sample has three bass sounds, again in \'c\', of\n-- different lengths.  So it makes sense to use *both* \'note\' and \'n\'\n-- together, to pattern both the pitch and the sample that\'s used:\nd1 $ note "c a f e" # sound "dbass" # n "<0 1 2>"\n\n-- The \'rash\' samplebank is organised differently.. There\'s a load of\n-- samples, one for each note of 6 octaves. There\'s 12 notes in an\n-- octave, so that\'s 72 samples. (actually there\'s 73, there\'s an\n-- extra one note-084.wav which you could delete..) I sampled these\n-- from my lovely Roland JV1080 synth.\n\n-- So you can play notes as numbers using the \'n\' instead of the\n-- \'note\' pattern. This sounds a bit more \'natural\' than pitching them\n-- up with \'note\'.\nd1 $ n "20 50" # sound "rash"\n\n-- You can still use note names, but whereas for synths \'0\' is *middle*\n-- c, with these samples that\'s right at the *bottom* of the scale.\nd1 $ n "c a f e" # sound "rash"\n\n-- So in this case you\'ll want to pick a higher octave\nd1 $ n "c7 a7 f8 e7" # sound "rash"\n\n-- I tend to add a few octaves like this:\nd1 $ n "c a f e" # sound "rash"\n  |+ n 24\n\n-- Adding notes together is fun :\nd1 $ n "c a f e" # sound "rash"\n  |+ n 24\n  |+ n "<0 2 7 12>"\n\n-- You can also do it this way, adding together number patterns\n-- \'inside\' a single control pattern\nd1 $ n ("c a f e" |+ 24 |+ "<0 2 7 12>")\n  # sound "rash"\n\n-- There\'s also an \'octave\' control to jump up/down in twelves:\nd1 $ note "c a f e" # sound "superpiano"\n  # octave "<4 6 3>"\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-2-chords-arpeggios-and-algoraoke"},"Lesson 2: chords, arpeggios and.. Algoraoke"),(0,s.kt)(o._,{id:"oDsXT68J9Kw",mdxType:"YouTube"}),(0,s.kt)("p",null,"Ok warming up now! Here's a video exploring chords, arpeggios and the emerging form of Algoraoke, which I think was a term coined at the first live coding conference in Leeds by Ash Sagar. This video contains a preview of the next challenge, to make a 'cover version', which I'll write up in more detail a bit later.."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'\n-- Ok chords! We can play a \'major\' chord like this:\n\nd1 $ n "\'maj" # sound "supermandolin"\n  # legato 2 # gain 1.4\n\n-- The default is c major, you can choose others like this, e.g. to\n-- play c then e major:\nd1 $ n "c\'maj e\'maj" # sound "supermandolin"\n  # legato 2 # gain 1.4\n\n-- Karaoke (algoraoke) time\n-- Lets take the chord from a well known song:\n-- https://ukutabs.com/r/radiohead/creep/\n\nd1 $ n "<g\'maj b\'maj c\'maj c\'min>" # s "supermandolin"\n  # room 0.6 # sz 0.9\n\n-- and strum it a bit with struct:\nd1 $ qtrigger $ jux ((|- n "12") . rev) $ struct "t(5,8,<0 4>)" $ n "<g\'maj b\'maj c\'maj c\'min>" # s "supermandolin"\n  # room 0.6 # sz 0.9\n\n-- You can get a list of all the chords like this:\nimport Sound.Tidal.Chords\n\nchordList\n\n-- Try some out:\nd1 $ n "c\'sevenFlat9 a\'m9sharp5" # sound "supermandolin"\n\n-- Here\'s the raw data:\nchordTable\n\n-- Again, this all ends up being turned into plain note numbers. These\n-- two patterns are the same:\nd1 $ n "c\'sevenFlat9 a\'m9sharp5" # sound "supermandolin"\n\nd1 $ n "[0,4,7,10,13] [9,10,23]" # sound "supermandolin"\n\n-- You can say how many notes you want in a chord, with another \' and\n-- the number of notes you want.\n\n-- If you ask for more notes than exist in the basic chord, it will go\n-- up the octaves to find more notes, sounding more and more impressive:\nd1 $ n "c\'maj\'4" # s "superpiano"\nd1 $ n "c\'maj\'8" # s "superpiano"\nd1 $ n "c\'maj\'12" # s "superpiano"\n\n-- This is clearer when we start doing.. ARPEGGIOS\n\n-- These are \'broken\' chords, where instead of playing the notes at\n-- once, they\'re played one after another:\nd1 $ arpeggiate $ n "c\'maj" # s "superpiano"\n\n-- The arpeggio happens within the \'step\' that the chord occupies:\nd1 $ arpeggiate $ n "c\'maj e\'min7" # s "superpiano"\n\n-- Above, you can hear major chords have three notes, and minor 7\n-- chords have four. You can modify that with \' so they have the same\n-- number, if you want:\nd1 $ arpeggiate $ n "c\'maj\'4 e\'min7\'4" # s "superpiano"\n\n-- "arpeggiate" has a shorter, but more flexible cousin "arp", that\n-- allows you to specify a different way of breaking up the chord:\nd1 $ arp "updown thumbup" $ n "<c\'maj\'4 e\'min7\'4>" # s "superpiano"\n\n-- Here\'s the list of currently available arp styles to explore:\n-- up, down, updown, downup, converge, diverge, disconverge, pinkyup,\n-- pinkyupdown, thumbup thumbupdown\n\n-- Lots of fun\nd1 $ jux rev $ arp "<updown thumbup pinkyupdown converge diverge>"\n  $ n "<c4\'maj\'6 e4\'min7\'8 g5\'maj\'5 a5\'maj\'4>" # s "superpiano"\n  # room 0.3 # sz 0.7\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-3-adding-and-using-superdirt-synths"},"Lesson 3: adding and using SuperDirt synths"),(0,s.kt)(o._,{id:"ZM8OEcjlkzo",mdxType:"YouTube"}),(0,s.kt)("p",null,"As I say, ",(0,s.kt)("strong",{parentName:"p"},"SuperDirt")," and ",(0,s.kt)("strong",{parentName:"p"},"SuperCollider")," isn't my greatest area of expertise, I think ",(0,s.kt)("inlineCode",{parentName:"p"},"@eris")," is looking at putting together a more in-depth video. As I also say, getting into synthesis is not mandatory, although ",(0,s.kt)("strong",{parentName:"p"},"SuperCollider")," is a fantastic world of possibilities system to get into if you're curious."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-4-superdirt-part-ii"},"Lesson 4: SuperDirt (part II)"),(0,s.kt)(o._,{id:"qZKDI8sVy8Q",mdxType:"YouTube"}),(0,s.kt)("p",null,"Here's the code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},"SynthDef(\\test, {\n |out,sustain=1,freq=440,speed=1,begin=0,end=1,pan,accelerate,offset,clamp=1|\n var line, env, volume, tone, outAudio;\n freq=freq*speed;\n line = Line.ar(begin,end,sustain/speed,doneAction: Done.freeSelf);\n env = Env.new(levels: [0, 1, 0.9, 0], times: [0.1, 0.5, 1], curve: [-5, 0, -5]);\n volume = IEnvGen.ar(env, line);\n tone = (Pulse.ar(freq,line)+Pulse.ar(freq*1.01,line)+Pulse.ar(freq*0.99,line))/3;\n outAudio = RLPF.ar(tone*volume, 20000*clamp*volume,0.3);\n OffsetOut.ar(out,DirtPan.ar(outAudio, ~dirt.numChannels, pan, volume));\n}).add;\n")),(0,s.kt)("p",null,"At the time of writing the subtitles are auto-generated, we're looking into getting them edited."),(0,s.kt)("h4",{id:"julian-rohrhuber-commentary"},"Julian Rohrhuber commentary"),(0,s.kt)("p",null,"Julian Rohrhuber, author of ",(0,s.kt)("strong",{parentName:"p"},"SuperDirt"),", added a long and interesting comment to this video."),(0,s.kt)("p",null,"Ok, here you go! The following concerns only synths that come from the ",(0,s.kt)("strong",{parentName:"p"},"Tidal")," ",(0,s.kt)("inlineCode",{parentName:"p"},"sound")," function (not global effect synths like ",(0,s.kt)("inlineCode",{parentName:"p"},"# delay"),", that are handled differently)."),(0,s.kt)("p",null,"In ",(0,s.kt)("strong",{parentName:"p"},"SuperDirt"),", the freeing of synths is done by one internal synth that makes the end of the chain of effects. It is the ",(0,s.kt)("inlineCode",{parentName:"p"},"dirt_gate")," synth. Its definition is in ",(0,s.kt)("inlineCode",{parentName:"p"},"core-synths.scd"),". I posted it below ","[1]",". It applies a minimal envelope to the whole event (including all the effects you applied to it). The ",(0,s.kt)("inlineCode",{parentName:"p"},"doneAction")," is called after this envelope is completed. By setting the ",(0,s.kt)("inlineCode",{parentName:"p"},"fadeInTime")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"fadeTime")," parameters in ",(0,s.kt)("strong",{parentName:"p"},"Tidal"),", you can harden or soften the ",(0,s.kt)("inlineCode",{parentName:"p"},"attack"),"/",(0,s.kt)("inlineCode",{parentName:"p"},"decay"),"."),(0,s.kt)("p",null,"This means that you can make ",(0,s.kt)("inlineCode",{parentName:"p"},"SynthDefs")," with synths that do not release themselves, something we normally avoid in ",(0,s.kt)("strong",{parentName:"p"},"SuperCollider"),", because you'd pile up synths endlessly. But here, you could simply define a synth like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"SynthDef(\\mess, { |out| Out.ar(out, GrayNoise.ar) }).add;\n")),(0,s.kt)("p",null,"and you could play it in ",(0,s.kt)("strong",{parentName:"p"},"Tidal")," with: ",(0,s.kt)("inlineCode",{parentName:"p"},'sound "mess"'),". The synths are freed by the ",(0,s.kt)("inlineCode",{parentName:"p"},"dirt_gate")," synth."),(0,s.kt)("p",null,"But usually, you want a synth to have a particular amplitude envelope. Then you can define one in your ",(0,s.kt)("inlineCode",{parentName:"p"},"SynthDef"),", see below ","[2]",". Note that ",(0,s.kt)("inlineCode",{parentName:"p"},"sustain")," means the duration of the whole synth (this is what it is called in ",(0,s.kt)("inlineCode",{parentName:"p"},"SuperCollider")," in general), which is sent over from ",(0,s.kt)("strong",{parentName:"p"},"Tidal")," (for setting it directly, try ",(0,s.kt)("inlineCode",{parentName:"p"},'# sustain "0.1 0.3 0.5 1"'),"). Then you can have a ",(0,s.kt)("inlineCode",{parentName:"p"},"doneAction: 2")," if you like (this will free the synth after the envelope is done), but you can also leave this ",(0,s.kt)("inlineCode",{parentName:"p"},"doneAction")," out altogether, because the synth is freed externally anyhow. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"SynthDef(\\mess, {\n  | out, sustain = 0.2 |\n  Out.ar(out, GrayNoise.ar * XLine.kr(1, 0.001, sustain))\n}).add\n")),(0,s.kt)("p",null,"But sometimes, you may want to use the synth outside ",(0,s.kt)("strong",{parentName:"p"},"SuperDirt"),", and then it is polite that it cleans up after itself. Just make sure that you multiply your envelope with the audible signal, otherwise you'll hear clicks at the end of each synth."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"SynthDef(\\mess,\n  {\n    | out, sustain = 0.2 |\n    Out.ar(out,\n       GrayNoise.ar * XLine.kr(1, 0.001, sustain, doneAction: 2)\n   )\n  }\n).add\n")),(0,s.kt)("p",null,"Hope this helps!"),(0,s.kt)("p",null,"[1]"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},'SynthDef("dirt_gate" ++ numChannels, { |out, in, sustain = 1, fadeInTime = 0.001, fadeTime = 0.001, amp = 1|\n        var signal = In.ar(in, numChannels);\n         //  doneAction: 14: free surrounding group and all nodes\n        var env = EnvGen.ar(Env([0, 1, 1, 0], [fadeInTime, sustain, fadeTime], \\sin), levelScale: amp, doneAction: 14);\n        signal = signal * env * DirtGateCutGroup.ar(fadeTime, doneAction: 14);\n        OffsetOut.ar(out, signal);\n        ReplaceOut.ar(in, Silent.ar(numChannels)) // clears bus signal for subsequent synths\n    }, [\\ir, \\ir, \\ir, \\ir, \\ir, \\ir]).add;\n')),(0,s.kt)("p",null,"[2]"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"(\nSynthDef(\\imp, { |out, sustain = 1, freq = 440, speed = 1, begin=0, end=1, pan, accelerate, offset|\n    var env, sound, rate, phase;\n    env = EnvGen.ar(Env.perc(0.01, 0.99, 1, -1), timeScale:sustain, doneAction:2);\n    phase = Line.kr(begin, end, sustain);\n    rate = (begin + 1) * (speed + Sweep.kr(1, accelerate));\n    sound = Blip.ar(rate.linexp(0, 1, 1, freq) * [1, 1.25, 1.51, 1.42], ExpRand(80, 118) * phase).sum;\n    OffsetOut.ar(out,\n        DirtPan.ar(sound, ~dirt.numChannels, pan, env)\n    )\n}).add\n);\n")),(0,s.kt)("h2",{id:"week-6"},"Week 6"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-1-canons-with-off"},'Lesson 1: canons with "off"'),(0,s.kt)(o._,{id:"uWVfteb71vc",mdxType:"YouTube"}),(0,s.kt)("p",null,"A little bit ahead of time, here's an intro to a function close to my heart, ",(0,s.kt)("inlineCode",{parentName:"p"},"off"),". Here's the worksheet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'\n-- Let\'s start with two notes:\nd1 $ n "c e" # sound "supermandolin"\n\n-- What does \'off\' do? Switch between the above and below versions to hear\n-- the difference.\nd1 $ off 0.25 (# crush 4) $ n "c e" # sound "supermandolin"\n\n-- You can hear that the original two notes are untouched, but there is\n-- something else added.\n\n-- \'off\' takes three inputs; a number, a function and a pattern.\n-- What it does is leave the original pattern as is, but adds a copy of\n-- it on top. That copy is offset in time by the number given in the first\n-- input - the number. The copy also has the function applied to it.\n-- So we end up with a version of the pattern that \'follows\' the original\n-- in time, and is transformed. In this case, it is distorted.\n\n-- Instead of using the bitcrush effect, lets add to the \'n\' note, instead.\nd1 $ off "0.25" (|+ n 7) $ n "c e" # sound "supermandolin"\n\n-- Now we hear a simple \'canon\' - it sounds like one voice following another.\n\n-- We can swap \'0.25\' for the shorthand \'q\', which stands for a *q*uarter of a\n-- cycle.\nd1 $ off "q" (|+ n 7) $ n "c e" # sound "supermandolin"\n\n-- Lets change that for \'e\', which stands for an eighth of a cycle.\nd1 $ off "e" (|+ n 7) $ n "c e" # sound "supermandolin"\n\n-- Here\'s the current list of shorthands available:\n-- w = 1 (whole)\n-- h = 0.5 (half)\n-- q = 0.25 (quarter)\n-- e = 0.125 (eighth)\n-- s = 0.0624 (sixteenth)\n-- t = 1/3 (third)\n-- f = 0.2 (fifth)\n\n-- You can have multiples of these shorthands by prefixing them with a\n-- number, for example:\nd1 $ off "2f" (|+ n 7) $ n "c a f e" # sound "supermandolin"\n\n-- For a 32nd, you could do 0.5s:\nd1 $ off "0.5s" (|+ n 7) $ n "c a f e" # sound "supermandolin"\n\n-- Let\'s try with a more complex pattern:\nd1 $ off "e" (|+ n 7) $ n (slow 2 "c(3,8) a(3,8) f(5,8) e*2")\n  # sound "supermandolin"\n\n-- The notes are getting very short now, to match the shorter \'step\' sizes\n-- within this denser pattern. To make them proportionally longer we can\n-- use legato, for example to make them all twice as long:\nd1 $ off "e" (|+ n 7) $ n (slow 2 "c(3,8) a(3,8) f(5,8) e*2")\n  # sound "supermandolin"\n  # legato 2\n\n-- Or alternatively we can use sustain for a duration in seconds:\nd1 $ off "e" (|+ n 7) $ n (slow 2 "c(3,8) a(3,8) f(5,8) e*2")\n  # sound "supermandolin"\n  # sustain 0.75\n\n-- We can pattern the \'n\' of the transformed version of the pattern:\nd1 $ off "e" (|+ n "<7 12 -5>") $ n (slow 2 "c(3,8) a(3,8) f(5,8) e*2")\n  # sound "supermandolin"\n  # sustain 0.75\n\n-- In the above the 7 - 12 - -5 pattern repeats every third cycle, and the\n-- c a f e one repeats every two cycles (due to the slow 2). The combination\n-- of (or interference between) them repeats lasts six cycles.\n\n-- Lets add another \'off\', this time offset by a sixteenth of a cycle, and\n-- dropping the octave.\nd1 $ off "s" (|+ n (-12)) $ off "e" (|+ n "<7 12 -5>") $\n n (slow 2 "c(3,8) a(3,8) f(5,8) e*2")\n # sound "supermandolin"\n # sustain 0.75\n\n-- Note that negative numbers have to be in parenthesis, otherwise Haskell\n-- gets confused and things you\'re trying to do a subtraction!\n\n-- This isn\'t the case in the mininotation, so an alternative is to put\n-- all negative numbers in double quotes:\nd1 $ off "s" (|+ n "-12") $ off "e" (|+ n "<7 12 -5>") $\n n (slow 2 "c(3,8) a(3,8) f(5,8) e*2")\n # sound "supermandolin"\n # sustain 0.75\n\n-- The same principles can be applied to percussion, for example:\nd1 $ off "<s q e>" (# squiz 2) $ n "{0 1 [~ 2] 3*2, 5 ~ 3 6 4}"\n  # sound "cpu2"\n  # sustain 0.75\n\n-- Notice the offset is patterned in the above, so the \'following\'\n-- pattern shifts forwards and backwards.\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-2-musical-scales"},"Lesson 2: musical scales"),(0,s.kt)(o._,{id:"xUMNN74OSPs",mdxType:"YouTube"}),(0,s.kt)("p",null,"Time to look at musical scales. Moving around scales can be especially fun with waveforms, so there's a lot of focus on that. It's a bit fiddly because as I explain in the video, you have to convert between decimal and whole numbers with e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"floor <$>"),".. I'm going to have to look at making that easier in ",(0,s.kt)("strong",{parentName:"p"},"Tidal"),". And the worksheet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'-- The \'arpy\' folder contains sounds sampled using a pentatonic\n-- \'ritusen\' scale, starting with \'c\'. In this scale there are five\n-- notes per octave.  So these are the same notes:\nd1 $ n "0 5" # sound "arpy"\n\nd2 $ n "0 12" # sound "superpiano"\n\n-- Pentatonic scales like this are nice to work with because they all\n-- sound good together. So if we add a random note to a melody, it\n-- always sounds \'good\':\n\nd1 $ n ("0 [7 2] 3 2" |+ irand 3) # sound "arpy"\n\n-- This isn\'t really the case on the usual twelve-tone "equal\n-- temperament" (12-TET) scale:\nd1 $ n ("0 [7 2] 3 2" |+ (irand 3)) # sound "superpiano"\n\n-- 12-TET is the scale that pianos etc are normally tuned to in the west.\n\n-- To use a different scale, we can use the "scale" function for converting\n-- numbers from a different scale to 12-TET.\nd1 $ n (scale "ritusen" $ "0 [7 2] 3 2" |+ (irand 3))\n  # sound "superpiano"\n\n-- There\'s quite a few available:\nscaleList\n\n-- It\'s fun to use waveforms to pick notes from a scale. For example,\n-- use a smooth sinewave to select notes from a minor scale:\nd1 $ segment 16 $ n (scale "minor"\n                     $ floor <$> (range 0 14 sine)\n                    )\n  # sound "supersaw"\n  # legato 0.5\n  # lpf 1000 # lpq 0.1\n\n-- Remember that waveforms don\'t have structure, so don\'t produce\n-- events until you use something like \'segment\', which in the example\n-- above picks 16 notes per cycle.\n\n-- There\'s also a complication that waveforms produce \'floating point\'\n-- decimal numbers, but scale only accepts \'integers\' - whole numbers.\n-- The \'floor <$>\' bit converts from decimal to whole numbers.  The\n-- "range 0 14" bit converts from the usual range of 0 to 1 to the\n-- given range of 0 to 14.\n\n-- We can make this more exciting by patterning the range:\nd1 $ segment 16 $ n (scale "minor"\n                     $ floor <$> (range "<0 4 -8>" "<12 14 13 -13>" sine)\n                    )\n  # sound "supersaw"\n  # legato 0.5\n  # lpf 1000 # lpq 0.1\n\n-- And maybe even more exciting by using \'struct\' to pattern the\n-- rhythm using Euclidean syntax.. Taking the opportunity to pattern\n-- the lpf (low pass filter) as well:\nd1 $ struct "t(<9 7>,16)"\n  $ n (scale "minor"\n        $ floor <$> (range "<0 4 -8>" "<12 14 13 -13>" sine)\n      )\n  # sound "supersaw"\n  # legato 0.5\n  # lpf (range 400 5000 saw) # lpq 0.1\n\n\n-- Using scales in this way allows us to play with movement while\n-- still making tunes that make \'sense\'. Here I add together\n-- waveforms to create some longer-form movement:\nd1 $ segment 16 $\n  n (scale "minor"\n      $ floor <$> (slow 2 $ (slow 2 sine + slow 3 cosine) * "<6 -3>"\n                  )\n    )\n  # sound "supersaw"\n  # legato 0.5\n  # lpf (range 400 5000 saw) # lpq 0.1\n\n-- Back with the struct:\nd1 $ struct "t(<9 7>,16)" $\n  n (scale "minor"\n      $ floor <$> (slow 2 $ (slow 2 sine + slow 3 cosine) * "<6 -3>"\n                  )\n    )\n  # sound "supersaw"\n  # legato 0.5\n  # lpf (range 400 5000 saw) # lpq 0.1\n\n-- And with an \'off\' going up an octave:\nd1 $ off 0.25 (|+ n 12) $ struct "t(<9 7>,16)" $ segment 16 $\n  n (scale "minor"\n      $ floor <$> (slow 2 $ (slow 2 sine + slow 3 cosine) * "<6 -3>"\n                  )\n    )\n  # sound "supersaw"\n  # legato 0.5\n  # lpf (range 400 5000 saw) # lpq 0.1\n\n-- Note that in the above the \'off\' is outside of the \'scale\'\n-- function, So we\'re back in 12-TET land, so add \'12\' to go up an\n-- octave, rather than the number of notes in the minor scale (7)\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-3-controlling-midi-devices"},"Lesson 3: controlling MIDI devices"),(0,s.kt)(o._,{id:"QmDmMpu9-T0",mdxType:"YouTube"}),(0,s.kt)("p",null,"Here's a quick video running through connecting up a MIDI synth to Tidal, and controlling it with ",(0,s.kt)("strong",{parentName:"p"},"CC")," and ",(0,s.kt)("strong",{parentName:"p"},"NRPN"),"."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-4-controlling-tidal-with-midi"},"Lesson 4: controlling Tidal with MIDI"),(0,s.kt)(o._,{id:"XZH4IoBG5Pg",mdxType:"YouTube"}),(0,s.kt)("p",null,"Here's the basics covered with controlling ",(0,s.kt)("strong",{parentName:"p"},"Tidal")," from MIDI. There's a bit more to cover here in terms of tips and tricks, so I think I'll do another video soon.. In the meantime feel free to ask questions, as it'll help me decide what to cover, thanks!"),(0,s.kt)("h2",{id:"week-7"},"Week 7"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-1-composing-patterns-together"},"Lesson 1: Composing patterns together"),(0,s.kt)(o._,{id:"OcDcTyEZuBs",mdxType:"YouTube"}),(0,s.kt)("p",null,"Sorry a bit of a late start to the week. Here's a starter, looking at different ways of composing patterns together. I'll continue this in the next video with a look at the ur function for composing patterns of patterns."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Composing patterns together\n\n-- We\'ve already looked at different ways of composing patterns\n-- together. Something as simple as this is a composition:\n\nd1 $ fast "1 2 3 4" $ sound "lt mt ht bd*2"\n\n-- Not a super interesting one, but it composes together a pattern of\n-- densities, and a pattern of sounds, to create a new pattern that is\n-- more than the sum of its parts.\n\n-- In this lesson though we\'re going to look at ways to compose what\n-- you could call \'independent\' patterns, where one isn\'t used to\n-- manipulate the other.\n\n-- Tidal is often used in live situations, but there are some\n-- functions that help you assemble multiple patterns into something\n-- like a complete \'piece\', such as a structured four-minute track.\n\n-- Before we get to that, lets look at some extra-simple ways of\n-- composing patterns together.. as they can be surprisingly useful\n\n-- First, there\'s `overlay` that simply plays the two given patterns\n-- at the same time:\nd1 $ overlay (fast "1 2 3 4" $ sound "lt mt ht ~")\n             (sound "clap:4(3,8)" # speed 2)\n\n-- Similar to this is `stack`, which lets you overlay any number of\n-- patterns on top of each other. People tend to use this rather than\n-- `overlay`, as it\'s more flexible:\nd1 $ stack [(fast "1 2 3 4" $ sound "lt mt ht ~"),\n            (sound "clap:4(3,8)" # speed 2),\n            sound "[kick:5(5,8), snare:3(7,16,3)]"\n           ]\n\n-- The above composes a list of three patterns together. You can see that\n-- a list is given using square brackets (\'[\' and \']\'), with the patterns\n-- in the list separated by commas (\',\'). You have to remember *not* to\n-- put a comma at the end of the list, only between the elements.\n\n-- The above might not seem too useful, as you could do the same with\n-- separate patterns. This sounds exactly the same as the above:\nd1 $ fast "1 2 3 4" $ sound "lt mt ht ~"\nd2 $ sound "clap:4(3,8)" # speed 2\nd3 $ sound "[kick:5(5,8), snare:3(7,16,3)]"\n\n-- Remember though that stack combines everything into a single\n-- pattern. This is useful as you can manipulate all those patterns as\n-- one. For example:\nd1 $ chunk 4 (hurry 2) $\n  stack [(fast "1 2 3 4" $ sound "lt mt ht ~"),\n         (sound "clap:4(3,8)" # speed 2),\n         sound "[kick:5(5,8), snare:3(7,16,3)]"\n        ]\n\n-- Or adding a parameter that applies to the whole stack:\nd1 $ stack [(fast "1 2 3 4" $ sound "lt mt ht ~"),\n            (sound "clap:4(3,8)" # speed 2),\n            sound "[kick:5(5,8), snare:3(7,16,3)]"\n           ] # squiz "<0 2>"\n\n-- So `overlay` and `stack` stack things up, so that they happen at\n-- the same time. Howabout sticking things together over time, so they\n-- happen one after another?\n\n-- Like overlay and stack, there is one function, \'append\' for\n-- composing two patterns together, and another, \'cat\' for composing a\n-- list of patterns together.\n\n-- For two patterns:\nd1 $ append (fast "1 2 3 4" $ sound "lt mt ht ~")\n            (sound "clap:4(3,8)" # speed 2)\n\n-- For a list of patterns:\nd1 $ cat [fast "1 2 3 4" $ sound "lt mt ht ~",\n          sound "clap:4(3,8)" # speed 2,\n          sound "[kick:5(5,8), snare:3(7,16,3)]"\n         ]\n\n-- Again, you\'ll see `cat` used more often than `append`.\n\n-- `append` and `cat` maintain the original \'density\' of the patterns,\n-- taking one cycle per cycle.\n\n-- There are variants `fastappend` and `fastcat`, that take a cycle\n-- from each of the patterns, and squash them all into a single cycle:\n\n-- For two patterns:\nd1 $ fastappend (fast "1 2 3 4" $ sound "lt mt ht ~")\n  (sound "clap:4(3,8)" # speed 2)\n\n-- For a list of patterns:\nd1 $ fastcat [fast "1 2 3 4" $ sound "lt mt ht ~",\n              sound "clap:4(3,8)" # speed 2,\n              sound "[kick:5(5,8), snare:3(7,16,3)]"\n             ]\n\n-- That\'s fine, but what if you don\'t want to loop between patterns a\n-- cycle at a time, but have something between a `stack` and a `cat`,\n-- where you can have the patterns overlap? `seqPLoop` is one answer.\n\n-- With `seqPLoop`, you say when each pattern starts and stops.\n-- Lets first emulate the `cat` from earlier, by having each\n-- pattern last one cycle.\nd1 $ seqPLoop [(0, 1, fast "1 2 3 4" $ sound "lt mt ht ~"),\n               (1, 2, sound "clap:4(3,8)" # speed 2),\n               (2, 3, sound "[kick:5(5,8), snare:3(7,16,3)]")\n              ]\n\n-- Now let\'s adjust the starts and stops, so the first two overlap by\n-- a pattern, then there\'s a gap of a cycle before the last one plays:\nd1 $ seqPLoop [(0, 2, fast "1 2 3 4" $ sound "lt mt ht ~"),\n               (1, 3, sound "clap:4(3,8)" # speed 2),\n               (5, 6, sound "[kick:5(5,8), snare:3(7,16,3)]")\n              ]\n\n-- If you want to use the same pattern more than once, you can give it a name\n--, like this:\nlet florence = fast "1 2 3 4" $ sound "lt mt ht ~"\nin\nd1 $ seqPLoop [(0, 2, florence),\n               (1, 3, sound "clap:4(3,8)" # speed 2),\n               (3, 4, sound "[kick:5(5,8), snare:3(7,16,3)]"),\n               (3, 5, florence # coarse 5)\n              ]\n\n-- If you don\'t want the pattern sequence to loop, then use\n-- seqP. You\'ll need to use something like `qtrigger`, so it starts\n-- from cycle 0\nd1 $ qtrigger $ seqP [(0, 2, fast "1 2 3 4" $ sound "lt mt ht ~"),\n                        (1, 3, sound "clap:4(3,8)" # speed 2),\n                        (5, 6, sound "[kick:5(5,8), snare:3(7,16,3)]")\n                       ]\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-2-composing-functions-together"},"Lesson 2: Composing functions together"),(0,s.kt)(o._,{id:"5YCERGiAHUU",mdxType:"YouTube"}),(0,s.kt)("p",null,"Here's a quick video about the handy ",(0,s.kt)("inlineCode",{parentName:"p"},".")," operator. Worksheet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Composing functions together\n\n-- Lets say you wanted to both chop up, _and_ reverse this pattern,\n-- every 3 cycles.\nd1 $ sound "bd [~ sd] bd sd" # squiz 2\n\n-- You could do it like this:\nd1 $ every 3 (rev) $ every 3 (chop 8) $\n  sound "bd [~ sd] bd sd" # squiz 2\n\n-- That works, but is a bit fiddly. This is where the `.` operator\n-- comes in handy, by turning two functions into one:\nd1 $ every 3 (rev . chop 8) $\n  sound "bd [~ sd] bd sd" # squiz 2\n\n-- That works the same, but with less typing, good!\n\n-- You can just think of the `.` as piping together two functions\n-- into one.\n\n-- But technically speaking:, the `.` will take the input, pass it into the\n-- function on the right, take the output from _that_ function, pass\n-- it to the function on the left, and finally return the return of\n-- _that_ function.\n\n-- You can keep piping in more functions, if you want:\nd1 $ every 3 (rev . chop 8 . fast 2) $\n  sound "bd [~ sd] bd sd" # squiz 2\n\n-- You can also add in effects:\nd1 $ every 3 ((# room 0.7) . rev . chop 8 . fast 2) $\n  sound "bd [~ sd] bd sd" # squiz 2\n\nHave fun!\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-3-composing-tracks-with-the-ur-function"},'Lesson 3: Composing tracks with the "ur" function'),(0,s.kt)(o._,{id:"7Y3aKx2w5dQ",mdxType:"YouTube"}),(0,s.kt)("p",null,"Here's an introduction to the ",(0,s.kt)("inlineCode",{parentName:"p"},"ur")," function, which lets you make patterns out of patterns, to make a track. I also talk about issues with ",(0,s.kt)("inlineCode",{parentName:"p"},"orbits")," and global effects (e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"reverb"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"delay"),") you might have when using ",(0,s.kt)("inlineCode",{parentName:"p"},"ur"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"seqPLoop")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"stack"),". This is still an area of ",(0,s.kt)("strong",{parentName:"p"},"Tidal")," that could be developed, so I'd be happy to have your ideas about possible features/improvements."),(0,s.kt)("p",null,"Here's the pattern I deconstruct:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ ur 16 "[bdsd, ~ claps, ~ [bass bass:crunch] ~ bass]"\n  [("bdsd", sound "bd [~ sd] bd sd" # squiz 2),\n   ("claps", sound "clap:4*2 clap:4*3"\n     # delay 0.8 # dt "t" # dfb 0.4\n     # orbit 4 # speed 4\n   ),\n   ("bass", struct "t(3,8)" $ sound "dbass" # shape 0.7 # speed "[1, ~ 2]")\n  ]\n  [("crunch", (# crush 3))\n  ]\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"week-8"},"Week 8"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-1-shifting-time--beat-rotation"},"Lesson 1: Shifting time / beat rotation"),(0,s.kt)(o._,{id:"5Jq4pLjUDDk",mdxType:"YouTube"}),(0,s.kt)("p",null,"Bliemy, it's week 8 already.. Lets do some time travel with ",(0,s.kt)("inlineCode",{parentName:"p"},"<~")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"~>"),". Here's the worksheet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'-- SHIFTING TIME\n\n-- Lets start with a rhythm:\nd1 $ n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]" # sound "cpu2"\n\n-- That\'s repeating nicely. Keep it running, then run this:\nd1 $ 0.25 <~ (n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]" # sound "cpu2")\n\n-- If you switch between them, you can hear the pattern is shifting in\n-- time. The `0.25` means it\'s shifting by a quarter of a cycle.\n\n-- You only hear any difference between them at the point where you\n-- switch to the other one. You\'re jumping forward / backward in time,\n-- but once you\'re there, nothing has changed. (!)\n\n-- Ok, time travel is difficult to talk about.\n\n-- Lets visualise this, compare these two:\ndrawLine "a b c d"\n\ndrawLine $ 0.25 <~ "a b c d"\n\n-- You can see the a b c d sequence is the same, but in the latter\n-- case, the cycle begins on the \'b\'.\n\n-- So \'<~\' has moved us _forward_ into the future. So shouldn\'t it be\n-- \'~>\', rather than \'<~\'?? Well, we might have moved into the future,\n-- but it\'s all relative - from the perspective of the pattern, it\'s\n-- moved backwards into the past. Furthermore, while we like to think\n-- about us moving forwards into the future, from the perspective of\n-- the future, it\'s moving backwards into the past. Furthermore\n-- different human cultures think about time in different ways.\n\n-- Anyway, \'~>\' does indeed exist, compare these two:\n\ndrawLine $ 0.25 <~ "a b c d"\n\ndrawLine $ 0.25 ~> "a b c d"\n\n-- Time is most interesting if you keep jumping around\n-- For example jump every 3 cycles:\nd1 $ every 3 (0.25 <~) $ n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]" # sound "cpu2"\n  # crush 4\n\n-- Jumping in the other direction has quite a different feel:\nd1 $ every 3 (0.25 ~>) $ n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]" # sound "cpu2"\n  # crush 4\n\n-- You can also use a pattern for the time shift amount:\nd1 $ "<0 0.25 0.75>" ~>\n  (n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]" # sound "cpu2" # crush 4)\n\n-- Even with this straightforward shifting, things quickly start\n-- sounding \'random\', until your ears lock on to the longer loop..\n\n-- SIDETRACK - a note on syntax..\n\n-- Unfortunately this use of the dollar *doesn\'t work*:\nd1 $ "<0 0.25 0.75>" ~> $ n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]"\n  # sound "cpu2" # crush 4\n\n-- This is because like all operators, you can\'t use a dollar to group\n-- together a pattern to send to `~>` in this way. haskell gets\n-- confused about seeing two operators (\'$\' and \'~>\') next to each\n-- other.\n\n-- So you have to use parenthesis:\nd1 $ "<0 0.25 0.75>" ~> (n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]"\n  # sound "cpu2" # crush 4)\n\n-- Or another way around this is to wrap the *operator* in\n-- parenthesis, then you can use it like a normal function:\nd1 $ (~>) "<0 0.25 0.75>" $ n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]"\n  # sound "cpu2" # crush 4\n\n-- Or wrap the first input and the operator in parenthesis:\nd1 $ ("<0 0.25 0.75>" ~>) $ n "[0 [1 0] 6*2 [3 4*2], 8(5,8)]"\n  # sound "cpu2" # crush 4\n\n-- This all works nicely with chopped-up loops:\nd1 $ every 2 ("e" <~) $ every 3 (0.25 <~) $\n  loopAt 1 $ chop 8 $ sound "break:8"\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-2-binary-patterns"},"Lesson 2: Binary patterns"),(0,s.kt)(o._,{id:"U4cauoY3-6k",mdxType:"YouTube"}),(0,s.kt)("p",null,"Here's a quick introduction to binary patterns, focussing on using them to switch between a pair of functions with ",(0,s.kt)("inlineCode",{parentName:"p"},"stitch")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"sew"),". Here is the worksheet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Binary patterns\n\n-- The patterns you send to SuperDirt tend to contain values of type\n-- String (for words), Double (for decimal numbers) or Int (for whole\n-- numbers). One pattern type you probably won\'t send to SuperDirt is\n-- of type Bool - short for Boolean.\n\n-- Boolean values can be either True or False. You\'ve probably seen\n-- then used with with \'struct\', e.g.:\n\nd1 $ struct "t f t t f t f f" $ sound "snare:4"\n\n-- \'struct\' provides structure for the pattern on the right; whenever\n-- there\'s a \'t\' (i.e., a true value) in the boolean pattern, the\n-- snare fires.\n\n-- It works with euclidean syntax too:\nd1 $ struct "t(3,8)" $ sound "snare:4"\n\n-- The above creates a new pattern with three events per cycle,\n-- according to a Euclidean pattern.\n\n-- Lets have a look at that euclidean pattern:\ndrawLine $ struct "t(3,8)" "a"\n\n-- So what do you think would happen if you changed that \'t\' (for\n-- true) for an \'f\' (for false)? Lets try:\ndrawLine $ struct "f(3,8)" "a"\n\n-- Lets listen to that structure too:\nd1 $ struct "f(3,8)" $ sound "snare:4"\n\n-- You can see and hear that the *inverse* of the Euclidean pattern is\n-- played. What was true, is now false, and vice-versa.. It\'s the\n-- \'empty\' steps which get the true values, and which we end up\n-- hearing.\n\n-- This is clearer if we play a t(3,8) against an inverted f(3,8):\nd1 $ stack [struct "t(3,8)" $ sound "kick:4",\n            struct "f(3,8)" $ sound "snare:4"\n           ]\n\n-- You can hear that the snares are \'filling in\' where the kicks\n-- aren\'t playing - they never play at the same time.\n\n-- Filling in patterns like this is a lot of fun, and there\'s a\n-- function called \'stitch\' that makes it easier:\nd1 $ stitch "t(3,8)" (sound "kick:4") (sound "snare:4")\n\n-- You only have to give the boolean pattern once, \'stitch\' takes care\n-- of inverting the pattern for the second pattern. It\'s called\n-- \'stitch\', because it\'s like going up and down to stitch two things\n-- together.\n\n-- You can make more complicated boolean patterns to quickly get some\n-- fun patterns going:\nd1 $ stitch "t(<3 5>,8,<0 2 3>)" (sound "kick:4") (sound "hc")\n\nd1 $ stitch "t(<3 5>,<8 8 8 6>,<0 2 4>)" (sound "kick:4") (sound "hc")\n\n-- Actually it\'d be less typing do the stitching _inside_ the sound\n-- control pattern:\nd1 $ sound (stitch "t(<3 5>,<8 8 8 6>,<0 2 4>)" "kick:4" "hc")\n\n-- In the above, I only have to write \'sound\' once, because the\n-- \'stitch\' is working on patterns of words, not patterns of sounds.\n\n-- You can also alternate between patterns of true, and patterns of false\n-- values:\ndrawLine $ struct "<t f>(3,8)" "a"\n\n-- If you prefer you can use \'1\' or \'0\' instead of \'t\' and \'f\', the\n-- result is exactly the same:\ndrawLine $ struct "<1 0>(3,8)" "a"\n\nd1 $ struct "<1 0>(3,8)" $ sound "clap"\n\n-- You don\'t have to use the Euclidean syntax, you can just right them\n-- out by hand:\nd1 $ stitch "t f t t f f t f" (sound "kick:4") (sound "hc")\n\n-- .. and use the usual mininotation syntax:\nd1 $ stitch "t f t [t f]*2 f ~ t f" (sound "kick:4") (sound "hc")\n  # room 0.2 # sz 0.8\n\n-- With stitch, the rhythmic structure comes from the boolean\n-- pattern. It has a synonym friend called \'sew\', which instead\n-- preserves the structure of the patterns it\'s sewing together.\n\n-- Lets try it:\nd1 $ sew "t f" (sound "kick") (sound "clap:4")\n\n-- Oh! We only hear the kick. That\'s because the \'f\' only switches to\n-- the second pattern for the second half of the cycle, and no new\n-- \'clap\'s happen then.\n\n-- If we have four claps spread over the cycle, we hear the second two\n-- of them:\nd1 $ sew "t f" (sound "kick") (sound "clap:4*4")\n\n-- Sew can be really nice for blending together two more complicated\n-- patterns. Lets have a listen to them individually first:\n\nd1 $ chunk 4 (hurry 2) $ n "0 .. 7" # sound "cpu"\n\nd1 $ n "0 .. 7" # sound "cpu2" # speed 1.5 # squiz 2\n\n-- And now sewn:\nd1 $ sew (iter 4 "t f")\n  (chunk 4 (hurry 2) $ n "0 .. 7" # sound "cpu")\n  (n "0 .. 7" # sound "cpu2" # speed 1.5 # squiz 2)\n\n-- In the above I have a really simple "t f" binary pattern, but use\n-- \'iter 4\' so that it shifts by a quarter every cycle.. So you get\n-- different parts of the sewn patterns coming through.\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"lesson-3-fitting-values-to-patterns"},"Lesson 3: Fitting values to patterns"),(0,s.kt)(o._,{id:"2YlI02lqPWc",mdxType:"YouTube"}),(0,s.kt)("p",null,"Ok after some delay, I'm back to finish off week 8 finally! Here's a look at the ",(0,s.kt)("inlineCode",{parentName:"p"},"fit")," function. I'd be happy to see your thoughts and questions about this one! Here's the worksheet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},"\n-- Lets fit things from a list, into a pattern!\n\n-- Here's the 'type signature', what's it telling us?\nfit :: Int -> [a] -> Pattern Int -> Pattern a\n\n-- 'fit' takes a whole number, a list of things, a pattern of whole numbers,\n-- and then gives back a pattern of things.\n\n-- Int - a 'step size' - how far to advance through the list each cycle\n-- [a] - a list - the things you want to put in the tattern\n-- Pattern Int - a pattern of numbers referring to things in the list\n-- Pattern a - the result! 'Pattern a' means it can work with any kind of\n-- pattern\n\n-- Let's start simple, with a step size of 0\n\nd1 $ n (fit 0 [9,10,11,12,13,14] \"0 1 2 3\") # s \"alphabet\"\n\n-- That's just cycling through four letters of the alphabet (j,k,l,m).\n-- We have six numbers in our list, but we're only using the first four\n-- (from 0 to 3).\n\n-- Let's use all six, and add a bit more structure:\nd1 $ n (fit 0 [9,10,11,12,13,14] \"[0 3] [1 2] 4 [~ 5]\") # s \"alphabet\"\n\n-- Note that if you go past the end of the list, you go back to the start again.\n-- So '0' and '6' end up pointing at the first of the six numbers, which is '9'\n-- (which gives us 'j')\nd1 $ n (fit 0 [9,10,11,12,13,14] \"0 6\") # s \"alphabet\"\n\n-- Ok what if we start playing with that 'step size'?\nd1 $ n (fit 1 [9,10,11,12,13,14] \"0 1 2 ~\") # s \"alphabet\"\n\n-- It starts getting confusing, but you should be able to hear that each cycle,\n-- the pattern moves through the list by one step, until it gets back to the\n-- start again. So if it starts from 'j', 'k', 'l', the next cycle it'll shift\n-- along by one and give 'k', 'l', 'm', and so on, until it starts wrapping\n-- around to the start again.\n\n-- This can be nice for generating melodies. The rhythm stays the same, but\n-- the notes evolve, moving through the pattern\nd1 $ note (fit 2 [0,2,7,5,12] \"0 ~ 1 [2 3]\") # sound \"supermandolin\"\n  # legato 2 # gain 1.3\n\nd2 $ n \"0 ~ 2 [3*2 4*2]\" # sound \"cpu\" # speed 2\n")))}c.isMDXComponent=!0}}]);