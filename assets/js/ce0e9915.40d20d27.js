"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5457],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},h=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),u=d(t),c=o,m=u["".concat(l,".").concat(c)]||u[c]||p[c]||s;return t?a.createElement(m,i(i({ref:n},h),{},{components:t})):a.createElement(m,i({ref:n},h))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=c;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[u]="string"==typeof e?e:o,i[1]=r;for(var d=2;d<s;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7960:(e,n,t)=>{t.d(n,{_:()=>s});var a=t(7294);const o="video_D5zz";function s(e){let{id:n,aspect:t=16/9}=e;return a.createElement("figure",{className:o,style:{paddingBottom:100/t+"%"}},a.createElement("iframe",{src:`https://www.youtube.com/embed/${n}`,frameBorder:"0",allowFullScreen:!0,width:"100%"}))}},6995:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var a=t(3117),o=(t(7294),t(3905)),s=t(7960);const i={title:"Course I (> 1.6)",id:"course1"},r=void 0,l={unversionedId:"patternlib/tutorials/course1",id:"patternlib/tutorials/course1",title:"Course I (> 1.6)",description:"Description",source:"@site/docs/patternlib/tutorials/course1.mdx",sourceDirName:"patternlib/tutorials",slug:"/patternlib/tutorials/course1",permalink:"/docs/patternlib/tutorials/course1",draft:!1,editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/patternlib/tutorials/course1.mdx",tags:[],version:"current",lastUpdatedAt:1751131389,formattedLastUpdatedAt:"Jun 28, 2025",frontMatter:{title:"Course I (> 1.6)",id:"course1"},sidebar:"docs",previous:{title:"Workshop",permalink:"/docs/patternlib/tutorials/workshop"},next:{title:"Course II (> 1.6)",permalink:"/docs/patternlib/tutorials/course2"}},d={},h=[{value:"Description",id:"description",level:2},{value:"Week 1",id:"week-1",level:2},{value:"Lesson 1: Tidal Interaction",id:"lesson-1-tidal-interaction",level:3},{value:"Lesson 2: Loading sample packs",id:"lesson-2-loading-sample-packs",level:3},{value:"Lesson 3: mini-notation (part I)",id:"lesson-3-mini-notation-part-i",level:3},{value:"Lesson 4: mini-notation (part II)",id:"lesson-4-mini-notation-part-ii",level:3},{value:"Lesson 5: mini-notation (part III)",id:"lesson-5-mini-notation-part-iii",level:3},{value:"Week 2",id:"week-2",level:2},{value:"Lesson 1: starting out with effects",id:"lesson-1-starting-out-with-effects",level:3},{value:"Lesson 2: manipulating time",id:"lesson-2-manipulating-time",level:3},{value:"Lesson 3: combining patterns with arithmetic",id:"lesson-3-combining-patterns-with-arithmetic",level:3},{value:"Week 3",id:"week-3",level:2},{value:"Lesson 1: exploring &quot;every&quot;, meaning of &quot;$&quot;",id:"lesson-1-exploring-every-meaning-of-",level:3},{value:"Lesson 2: cut VS legato",id:"lesson-2-cut-vs-legato",level:3},{value:"Always remember to check the forum page for the lesson, as there is a lot of additional information there.",id:"always-remember-to-check-the-forum-page-for-the-lesson-as-there-is-a-lot-of-additional-information-there",level:2},{value:"Lesson 3: slice and splice",id:"lesson-3-slice-and-splice",level:3},{value:"Lesson 4: chop and striate",id:"lesson-4-chop-and-striate",level:3},{value:"Week 4",id:"week-4",level:2},{value:"Lesson 1: continous patterns and random functions",id:"lesson-1-continous-patterns-and-random-functions",level:3},{value:"Lesson 2: random marathon (part I)",id:"lesson-2-random-marathon-part-i",level:3},{value:"Lesson 3: random marathon (part II)",id:"lesson-3-random-marathon-part-ii",level:3}],u={toc:h};function p(e){let{components:n,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"alex",src:t(2878).Z,width:"1286",height:"718"})),(0,o.kt)("p",null,"There's now an online ",(0,o.kt)("strong",{parentName:"p"},"Learning TidalCycles")," course, lead by Alex McLean who created ",(0,o.kt)("strong",{parentName:"p"},"Tidal"),". It's based on around pre-recorded videos so you can join at any time. It was originally 'pay as you feel', but is now completely open access. If you find it helpful though, you can still contribute to the ",(0,o.kt)("a",{parentName:"p",href:"https://opencollective.com/tidalcycles"},"TidalCycles open collective fund"),"."),(0,o.kt)("p",null,"The course was organized in 8 weeks. In the next sections you will find the material for the first four weeks, and on\n",(0,o.kt)("a",{parentName:"p",href:"/docs/patternlib/tutorials/course2"},"the next part")," the remaining."),(0,o.kt)("p",null,"These are the links to the original course posts in the community forum:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://club.tidalcycles.org/t/weeks-1-4-index/395"},"Index for weeks 1-4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://club.tidalcycles.org/t/weeks-5-8-index/1345"},"Index for weeks 5-8")),(0,o.kt)("li",{parentName:"ul"},"Or you might prefer to see ",(0,o.kt)("a",{parentName:"li",href:"https://club.tidalcycles.org/c/course/14?ascending=true&order=created"},"everything in date order"))),(0,o.kt)("p",null,"They are interesting because of the questions and answers from the participants."),(0,o.kt)("h2",{id:"week-1"},"Week 1"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-1-tidal-interaction"},"Lesson 1: Tidal Interaction"),(0,o.kt)(s._,{id:"i9Rsn8-BAY4",mdxType:"YouTube"}),(0,o.kt)("p",null,"Aimed at people new to live coding, and goes through the basics of how to interact with ",(0,o.kt)("strong",{parentName:"p"},"Tidal")," - starting and stopping code and so on. Look at the video description to jump to different parts, and switch subtitles on if I'm speaking too fast."),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-1-lesson-1-tidal-interaction"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-2-loading-sample-packs"},"Lesson 2: Loading sample packs"),(0,o.kt)(s._,{id:"nzKjNlgOkTk",mdxType:"YouTube"}),(0,o.kt)("p",null,"Here's the ",(0,o.kt)("strong",{parentName:"p"},"Tidal Club")," ",(0,o.kt)("a",{parentName:"p",href:"https://slab.org/tmp/samples-extra.zip"},"sample pack"),".\nFirst, save and extract the samples somewhere:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Make a folder somewhere for the course. Maybe call it ",(0,o.kt)("inlineCode",{parentName:"li"},'"tidalclub"')," on your desktop, or documents folder, or wherever you like to keep your things."),(0,o.kt)("li",{parentName:"ul"},"Download the above ",(0,o.kt)("inlineCode",{parentName:"li"},"samples-extra.zip")," file, and extract the contents into that folder (How you do this depends on the operating system you're using).")),(0,o.kt)("p",null,"Here are the steps in brief:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open ",(0,o.kt)("strong",{parentName:"li"},"SuperCollider"),", and open the example startup file via: ",(0,o.kt)("inlineCode",{parentName:"li"},"File -> Open User Support Directory -> downloaded-quarks -> SuperDirt -> superdirt_startup.scd")),(0,o.kt)("li",{parentName:"ul"},"Copy the contents to your clipboard"),(0,o.kt)("li",{parentName:"ul"},"Open your ",(0,o.kt)("strong",{parentName:"li"},"SuperCollider")," startup file via: ",(0,o.kt)("inlineCode",{parentName:"li"},"File -> Edit startup file")),(0,o.kt)("li",{parentName:"ul"},"Paste the contents into there. (Don't have ",(0,o.kt)("inlineCode",{parentName:"li"},"SuperDirt.startup")," in there as well) You'll see a line with ",(0,o.kt)("inlineCode",{parentName:"li"},"~dirt.loadSoundFiles;"),", which loads the default samples."),(0,o.kt)("li",{parentName:"ul"},"Keep that line, creating a new line underneath that looks like this:")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'~dirt.loadSoundFiles("/home/alex/Documents/tidalclub/samples-extra/*");')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You'll need to change the above so that it contains the path to the samples-extra folder on your system."),(0,o.kt)("li",{parentName:"ul"},"Don't forget to have ",(0,o.kt)("inlineCode",{parentName:"li"},"/*")," at the end of the path, and a semicolon ",(0,o.kt)("inlineCode",{parentName:"li"},";")," at the end of the line."),(0,o.kt)("li",{parentName:"ul"},"Save the file (",(0,o.kt)("inlineCode",{parentName:"li"},"File -> Save"),")")),(0,o.kt)("p",null,"With all that done, you should be able to restart ",(0,o.kt)("inlineCode",{parentName:"p"},"SuperCollider")," (you can do that via: ",(0,o.kt)("inlineCode",{parentName:"p"},"Language -> Recompile class library"),", or just by closing and reopening ",(0,o.kt)("inlineCode",{parentName:"p"},"SuperCollider"),"), and have ",(0,o.kt)("strong",{parentName:"p"},"SuperDirt")," automatically start up inside ",(0,o.kt)("strong",{parentName:"p"},"SuperDirt"),", with all the new samples. I hope that's clear, but please do let me know if you get stuck!"),(0,o.kt)("p",null,"Here's the contents of samples-extra:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"break")," - breakbeats"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bsguitar")," - bloodsport sample pack - ",(0,o.kt)("a",{parentName:"li",href:"https://pickleddiscs.bandcamp.com/album/blood-sport-sample-pack"},"https://pickleddiscs.bandcamp.com/album/blood-sport-sample-pack")," 13"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bskick")," - see above"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bsperc")," - ditto"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bssnare")," - more from bloodsport"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bsbass")," - you get the idea"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bshihat")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bsnoise")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bsvocals")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"clap")," - a range of clap samples"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cpu")," - cpu records electro sample pack 1 - ",(0,o.kt)("a",{parentName:"li",href:"https://shop.cpurecords.net/album/electro-samples-vol-1"},"https://shop.cpurecords.net/album/electro-samples-vol-1")," 7"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cpu2")," - volume 2 - ",(0,o.kt)("a",{parentName:"li",href:"https://cpurecords.net/electro-samples-vol-2/"},"https://cpurecords.net/electro-samples-vol-2/")," 3"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dbass")," - some bass sounds made by damu - ",(0,o.kt)("a",{parentName:"li",href:"https://soundcloud.com/damu"},"https://soundcloud.com/damu")," 2"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"foley")," - a large number of 'foley' samples"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kick")," - kick sounds"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rash")," - some octaves from my jv1080 synth"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"claus")," - claustrofophobia impulse responses from here ",(0,o.kt)("a",{parentName:"li",href:"https://fokkie.home.xs4all.nl/IR.htm"},"https://fokkie.home.xs4all.nl/IR.htm")," 4"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dsynth")," - more samples from damu"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hi")," - 'hi' handdrum samples"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lo")," - 'lo' handdrum samples"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"snare")," - snare drums")),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-1-lesson-2-loading-sample-packs/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-3-mini-notation-part-i"},"Lesson 3: mini-notation (part I)"),(0,o.kt)(s._,{id:"nBpCJcduMso",mdxType:"YouTube"}),(0,o.kt)("p",null,"Ok welcome to ",(0,o.kt)("inlineCode",{parentName:"p"},"mini-notation")," week! Here's the first video and WorkSheet, exploring sequencing of sounds in ",(0,o.kt)("strong",{parentName:"p"},"Tidal"),"'s mini-notation. Copy and paste the following into atom (or whatever editor you've set up with tidal), to explore the concepts in the video."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Mini-notation worksheet, number one!\n\n-- Play a "kick" sound (the first one in the folder)\nd1 $ sound "kick"\n\n-- Play a different sound from the "kick" folder (the fourth one, counting from zero)\nd1 $ sound "kick:3"\n\n-- Play a kick - snare loop. Notice two sounds fit in the same time as one did above\nd1 $ sound "kick snare"\n\n-- The more you add, the faster it goes - the \'cycle\' stays constant\nd1 $ sound "kick snare kick snare"\n\nd1 $ sound "kick snare kick snare kurt hi lo hi lo"\n\n-- Again, we can pick sounds with : and a number\n\nd1 $ sound "cpu:0 cpu:2 cpu:4 cpu:6 cpu:0 cpu:2 cpu:6 cpu:8"\n\n-- If they\'re all from the same folder, it\'s easier to pattern\n-- the sounds using a separate "n" pattern, like this:\nd1 $ n "0 2 4 6 0 2 6 8" # sound "cpu"\n\n-- `#` combines together patterns of different kinds, in this case a \'sound\'\n-- and an \'n\' pattern.\n-- We\'ll come back to `#` (and how it differs from \'$\') in the future!\n\n-- You can have an \'empty\' step, known as a musical rest, with \'~\'\nd1 $ sound "kick snare ~ clap:4"\n\nd1 $ n "0 2 2 ~ 8 ~ 8 ~" # sound "cpu"\n\n-- You can also "break down" a step into a subsequence, with []\n\n-- Lets start with a simple pattern\nd1 $ sound "hi lo hi lo"\n\n-- And squeeze a two-step subsequence inside that third step:\nd1 $ sound "hi lo [hi hi] lo"\n\n-- It works for \'n\' patterns too\nd1 $ n "0 1 [5 5 5] 4" # sound "drum"\n\n-- You can even break down a step inside a subsequence:\nd1 $ sound "hi lo [hi [hi lo hi lo]] lo"\n\n-- It\'s easy to make nice compound time signatures:\nd1 $ sound "[hi lo hi] [hi lo hi lo]"\n')),(0,o.kt)("p",null,"There's a lot more to go through with the ",(0,o.kt)("inlineCode",{parentName:"p"},"mini-notation"),". Have fun with it, while also exploring the sounds in the ",(0,o.kt)("inlineCode",{parentName:"p"},"default samples")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"extra-samples")," samplepack (You'll see a list of them in the ",(0,o.kt)("strong",{parentName:"p"},"SuperCollider"),' "post window" when you start ',(0,o.kt)("strong",{parentName:"p"},"SuperDirt"),"). If you haven't loaded up the ",(0,o.kt)("inlineCode",{parentName:"p"},"extra-samples")," yet, have a look at the previous lesson 5."),(0,o.kt)("p",null,"If you make something you like, be sure to save it somewhere and keep it safe! You might also like to keep several versions of a pattern, saving not only the final pattern but how you got there.. A lot of the music in live coding is in the edits, and not just the end result!"),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-1-lesson-3-sequencing-with-the-mini-notation/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-4-mini-notation-part-ii"},"Lesson 4: mini-notation (part II)"),(0,o.kt)(s._,{id:"h_f11uago28",mdxType:"YouTube"}),(0,o.kt)("p",null,"Ok lets go deeper into the ",(0,o.kt)("inlineCode",{parentName:"p"},"mini-notation"),"! Here's a video. I experimented with fitting more things in a 'lesson', making a longer video accordingly.. But I think I was flagging by the end! I put a clarification or two in the subtitles. I also experimented with visualisation, which turned out more helpful at some points than others.."),(0,o.kt)("p",null,"Here's a worksheet for hands-on exploration. Be sure to edit things to test your assumptions and try to get round what's going on - and please do ask questions if anything is unclear. I've put a few tasks at the end.. Following forum discussion we're also putting together more creative tasks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- SPEEDING UP, REPEATING, AND SLOWING DOWN\n\n-- SPEEDING UP A STEP WITH "*"\n-- https://www.youtube.com/watch?v=h_f11uago28&t=105s\n\n-- Make a step go \'faster\', so it repeats itself within its step:\nd1 $ sound "hi lo*3"\n\n-- It works with subsequences too\nd1 $ sound "hi [hi lo]*2"\n\n-- And \'n\' patterns\nd1 $ n "[0 ~ 0] 2 [0 9]*2 2" # sound "cpu"\n\n-- Let\'s try speeding up a pattern by one-and-a-half:\nd1 $ sound "bd [sd hc]*1.5"\n\n-- It has two steps, so if you speed it up by 1.5, you get three steps.\n-- The first time around you get "bd [sd hc sd]", the second time "bd [hc sd hc]"\n\n-- SLOWING DOWN A STEP WITH "/"\n-- https://www.youtube.com/watch?v=h_f11uago28&t=346s\n\n-- Make \'lo\' sound only every other cycle:\nd1 $ sound "hi lo/2"\n\n-- Make \'lo\' sound only every third cycle:\nd1 $ sound "hi lo/3"\n\n-- Slow down a subsequence, so only one step sounds per cycle:\nd1 $ sound "clap [numbers:0 numbers:1 numbers:2]/3"\n\n-- Take two steps from a six step sequence each cycle, by slowing it by 3:\nd1 $ n "0 0 0 [0 1 3 4 5 6]/3" # sound "cpu2"\n\n-- Make things strange by slowing down with funky ratios!\nd1 $ n "0 0 0 [0 1 3 4 5 6]/2.5" # sound "cpu2"\n\n-- REPEATING A STEP WITH "!"\n-- https://www.youtube.com/watch?v=h_f11uago28&t=275s\n\n-- If you want to repeat steps on the same metrical level, then you can use ! ..\n-- So this:\nd1 $ sound "hi lo!3"\n\n-- Is the same as this:\nd1 $ sound "hi lo lo lo"\n\n-- You can also use an ! on its own for a single repeat. So this:\nd1 $ sound "hi lo !"\n\n-- Is the same as this:\nd1 $ sound "hi lo lo"\n\n-- You can repeat subsequences too, so these are the same:\nd1 $ sound "bd bd [hi lo] !"\n\nd1 $ sound "bd bd [hi lo] [hi lo]"\n\n-- POLYPHONY WITH ","\n-- https://www.youtube.com/watch?v=h_f11uago28&t=668s\n\n-- With \',\' you can have more than one subsequence happening at the same time.\n-- Where you have the possibility of more than one note happening at once,\n-- that\'s called musical "polyphony"\n\n-- This is like where you have multiple channels d1 and d2 active at the same time:\nd1 $ sound "bd sd"\n\nd2 $ sound "rs rs rs"\n\n-- .. but with ","" you can put them both in the same pattern. This sounds\n-- the same as the two above patterns playing at once:\nd1 $ sound "[bd sd, rs rs rs]"\n\n-- The subsequences line up to fill the same cycle.\n-- So "[a b, c d e]" lines up like this:\n-- |a--b--|\n-- |c-d-e-|\n\n-- There\'s an \'alphabet\' sample set in the default samples that can help with\n-- this!\nd1 $ n "[0 1, 2 3 4]" # sound "alphabet"\n\n-- There\'s another way of getting subsequences to align, using { } instead of [ ]:\nd1 $ n "{0 1, 2 3 4}" # sound "alphabet"\n\n-- Video explanation: https://www.youtube.com/watch?v=h_f11uago28&t=822s\n\n-- The first three cycles of this looks like this:\n-- |ababab|\n-- |cdecde|\n\n-- What\'s happening? Well Tidal aligns the first subsequence, "0 1", to fit\n-- the cycle, as before. But then it fits the others to it *stepwise*. So\n-- now the steps align, but the cycles don\'t! In the space of three\n-- cycles, there are three repetitions of "a b" and two repetitions of "c d e"\n\n-- The [ ] notation creates what is called a musical \'polyrhythm\' - multiple\n-- rhythms happening within the same timeframe, e.g.:\nd1 $ n "[0 5 2 ~, 0 3 4*2 0 3]" # sound "cpu2"\n\n-- The { } notation creates a \'polymetre\' - where metres of different durations\n-- phase in and out of each other, e.g.:\nd1 $ n "{0 5 2 ~, 0 3 4*2 0 3}" # sound "cpu2"\n\n-- I (Alex) get mixed up between polyrhythm and polymetre all the time, and\n-- tend to just call them both polyrhythm for simplicity..\n\n-- \'Traditional\' music software with linear \'piano roll\' style notation systems\n-- can really struggle with polyrhythm/metre, but it\'s really easy with Tidal\n-- and a *lot* of fun to explore.\n\n-- RHYTHMIC FEET WITH "."\n-- https://www.youtube.com/watch?v=h_f11uago28&t=988s\n\n-- You can \'mark out\' regular rhythmic \'feet\' with "."\n\n-- So this:\nd1 $ sound "bd sd . mt ht lt . arpy arpy:4 . snare clap:4 bd"\n\n-- Is another way of saying exactly this:\nd1 $ sound "[bd sd] [mt ht lt] [arpy arpy:4] [snare clap:4 bd]"\n\n-- So the "." breaks up a sequence into parts of equal duration\n\n-- To break down a step _within_ the "." notation, you can still\n-- use [], etc:\nd1 $ sound "bd sd . mt [ht mt] lt . arpy [arpy:4 arpy:5] . snare clap:4 bd"\n\n-- That\'s the same as:\nd1 $ sound "[bd sd] [mt [ht mt] lt] [arpy [arpy:4 arpy:5]] [snare clap:4 bd]"\n\n-- ONE STEP PER CYCLE WITH "<>"\n-- https://www.youtube.com/watch?v=h_f11uago28&t=1166s\n\n-- Often it\'s nice to pick one step from a subsequence every cycle.\n-- One way is this:\nd1 $ sound "hi [arpy arpy:1 arpy:2 arpy:3]/4"\n\n-- You can do the same thing with < > - it picks one step per cycle, without\n-- you having to worry about how many steps there are inside:\nd1 $ sound "hi <arpy arpy:1 arpy:2 arpy:3>"\n\n-- REVISION TASKS\n\n-- Copy each of the following patterns in turn, and edit them so that they\n-- are shorter, using the "<>", "!", "[]" and/or "." introduced above.\n\nd1 $ sound "kick snare snare"\n\nd1 $ sound "kick [snare snare]"\n\nd1 $ sound "kick snare kick snare kick snare"\n\nd1 $ n "0 [1 2 3]/3" # sound "cpu2"\n\nd1 $ n "[0 0 2] [4 5 6 7] [4 1] [0 3 0 3]" # sound "cpu2"\n\nd1 $ sound "kick snare kick snare kick snare clap"\n\nd1 $ sound "[kick snare kick snare kick snare] clap"\n\nd1 $ sound "bd sd sd sd bd [sd sd sd]"\n\n-- Trying to make code as short as possible is called "golfing" for some reason.\n-- It can be useful as a form of practice, but sometimes longer code\n-- is actually much easier to understand and edit!\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-1-lesson-4-mini-notation-part-2/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("h3",{id:"lesson-5-mini-notation-part-iii"},"Lesson 5: mini-notation (part III)"),(0,o.kt)(s._,{id:"aD-35W7rnFM",mdxType:"YouTube"}),(0,o.kt)("p",null,'In which I find out I really can\'t say the word "mininotation"..'),(0,o.kt)("p",null,'This video is a few things lumped together - a run through the tasks on the last worksheet, how to upgrade tidal, and finally how to use the "Euclidean notation".'),(0,o.kt)("p",null,"In brief:"),(0,o.kt)("p",null,"Upgrade Tidal by opening a terminal window and running"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plain"},"cabal update\ncabal install tidal --lib\n")),(0,o.kt)("p",null,"If you're on an older version of haskell, you might have to remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"--lib")," and just run ",(0,o.kt)("inlineCode",{parentName:"p"},"cabal install tidal"),".\nIf you're on a mac and get 'command not found' or similar, you might have to run ",(0,o.kt)("inlineCode",{parentName:"p"},". ~/.ghcup/env")," before the above."),(0,o.kt)("p",null,"The main difference is the addition of the ",(0,o.kt)("inlineCode",{parentName:"p"},"draw")," function, which I use in the video to explore what the euclidean syntax is doing. There's also ",(0,o.kt)("inlineCode",{parentName:"p"},"drawLine")," which I forgot to show in the video - it's actually clearer as it shows multiple cycles.. e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'drawLine $ "[x [a c b]/2 x x, a x [c d]]"\n')),(0,o.kt)("p",null,"draws:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[6 cycles]\n|x--a-c---x--|x-- b-x--x--|x--a-c---x--|x-- b-x--x--|x--a-c---x--|x-- b-x--x--\n|a---x---c-d-|a---x---c-d-|a---x---c-d-|a---x---c-d-|a---x---c-d-|a---x---c-d-\n")),(0,o.kt)("p",null,'I\'ll paste the list of example Euclidean structures below. So for the Persian rhythm "Khafif-e-ramal"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'d1 $ sound "clap(3,5,2)"\n')),(0,o.kt)("p",null,"It's useful to have a kick or something at the start of each cycle as a reference point:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'d1 $ sound "kick:5"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plain"},"The Euclidean Algorithm Generates Traditional Musical Rhythms by Toussaint\n(2,5) : A thirteenth century Persian rhythm called Khafif-e-ramal.\n(3,4) : The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.\n(3,5,2) : Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.\n(3,7) : A Ruchenitza rhythm used in a Bulgarian folk-dance.\n(3,8) : The Cuban tresillo pattern.\n(4,7) : Another Ruchenitza Bulgarian folk-dance rhythm.\n(4,9) : The Aksak rhythm of Turkey.\n(4,11) : The metric pattern used by Frank Zappa in his piece titled Outside Now.\n(5,6) : Yields the York-Samai pattern, a popular Arab rhythm.\n(5,7) : The Nawakhat pattern, another popular Arab rhythm.\n(5,8) : The Cuban cinquillo pattern.\n(5,9) : A popular Arab rhythm called Agsag-Samai.\n(5,11) : The metric pattern used by Moussorgsky in Pictures at an Exhibition.\n(5,12) : The Venda clapping pattern of a South African children\u2019s song.\n(5,16) : The Bossa-Nova rhythm necklace of Brazil.\n(7,8) : A typical rhythm played on the Bendir (frame drum).\n(7,12) : A common West African bell pattern.\n(7,16,14) : A Samba rhythm necklace from Brazil.\n(9,16) : A rhythm necklace used in the Central African Republic.\n(11,24,14) : A rhythm necklace of the Aka Pygmies of Central Africa.\n(13,24,5) : Another rhythm necklace of the Aka Pygmies of the upper Sangha.\n")),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/c/course/week1/16"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("p",null,"Have fun!"),(0,o.kt)("h2",{id:"week-2"},"Week 2"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-1-starting-out-with-effects"},"Lesson 1: starting out with effects"),(0,o.kt)(s._,{id:"_bcG2_zDjyw",mdxType:"YouTube"}),(0,o.kt)("p",null,"Ok, time to start exploring some effects! In this video I introduce some of the many effects available with ",(0,o.kt)("strong",{parentName:"p"},"SuperDirt")," and begin to explain how ",(0,o.kt)("strong",{parentName:"p"},"Tidal")," goes about combining two or more such patterns into one. We'll return to this later.."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"If you find that some of the effects don't work for you, then check that you have ",(0,o.kt)("strong",{parentName:"p"},"sc3-plugins")," properly installed in ",(0,o.kt)("em",{parentName:"p"},"SuperCollider"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Tidal has lots of effects we can use to change the way things sound.\n\n-- vowel is a filter which adds a vowel sound\n-- try a, e, i, o and u\n\nd1 $ n "0 1 0 [2 4] 2 4 1*2 3" # s "cpu"\n\nd1 $ n "0 1 0 [2 4] 2 ~ 1*2 3" # s "cpu" # vowel "a"\n\nd1 $ n "0 1 0 [2 4] 2 ~ 1*2 3" # s "cpu" # vowel "o"\n\n-- We can use the mini notation to create sequences of effects too:\n\nd1 $ n "0 1 0 [2 4] 2 ~ 1*2 3" # s "cpu" # vowel "a o e"\n\n-- Tidal does its best to map patterns across to one another.\n\n-- You can add a non-vowel letter to pause the vowel effect\n\nd1 $ n "0 1 0 [2 4] 2 ~ 1*2 3" # s "cpu" # vowel "a p"\n\n-- \'squiz\' is a nice distortion effect\nd1 $ n "0 1 0 [2 4] 2 ~ 1*2 3" # s "cpu" # squiz "4 1 0 3"\n\n-- With \'#\' structure comes from the left - try swapping the parameters around\n\nd1 $ squiz "4 1 0 3" # n "0 1 0 [2 4] 2 ~ 1*2 3" # s "cpu"\n\n-- Now there are only four sounds per cycle, because there\'s four in the leftmost\n-- \'squiz\' pattern\n\n-- We\'ll learn more about how things in patterns get matched up later!\n\n-- \'gain\' changes the volume of different sounds\n\nd1 $ sound "kick kick snare snare" # gain "1 0.7 0.6 0.5"\n\nd1 $ sound "[hh*16, kick:8 snare:4 [~ kick:8] snare]" # gain "[1 1.2]*8"\n\n-- speed can be used to pitch samples\n-- (we can also use \'note\' to do this, but we\'ll look at that later)\n\n-- speed changes the speed of playback,\n-- e.g. 2 = play the sample twice as fast - which moves the note up an octave\n\nd1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # speed "1 1.5 2 0.5"\n\n-- Or we can take the pattern from the speed parameter\n\nd1 $ speed "1*2 2*2 4*6" # sound "jungbass:6"\n\n-- pan allows us to create stereo effects - 0 = left, 0.5 = middle, 1 = right\n\nd1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "0 0.5 1"\n\n-- shape adds distortion (but be careful - it also makes the sound much louder)\n\nd1 $ sound "kurt:4 kurt:4"\n\nd1 $ sound "kurt:4(3,8)" # shape "0 0.98" # gain "0.7"\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-2-lesson-1-starting-out-with-effects/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-2-manipulating-time"},"Lesson 2: manipulating time"),(0,o.kt)(s._,{id:"ARCZE_XLhfk",mdxType:"YouTube"}),(0,o.kt)("p",null,"Hi all, here's a new video, exploring ways of manipulating time. I enjoyed this one! Here's a worksheet to go with it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Time to look at Time\n\n-- "Music is the Time of Numbers"\n\n-- setcps - change global tempo\n\n-- Let\'s run two patterns at once:\nd1 $ n "0 2 [3 5] [4 7]" # sound "cpu"\n\nd2 $ n "0(3,8) 8*8" # sound "cpu2"\n  # squiz 5\n\n-- Changing the cps (cycles per second) changes everything\nsetcps 0.7\n\nsetcps 0.3\n\n-- Time as an effect (!)\n\n-- You can also set cps as an effect:\nd2 $ n "0(3,8) 8*8" # sound "cpu2"\n  # squiz 5\n  # cps 0.5\n\n-- It\'s still global though - setting it on one pattern will\n-- change it everywhere\n\n-- However, you can pattern it:\nd2 $ n "0(3,8) 8*8" # sound "cpu2"\n  # squiz 5\n  # cps "0.5 1"\n\n-- You can really mess with time in this way!\nd2 $ n "0 [~ 1] 2*2 3 4*3 5 ~ 7" # sound "cpu2"\n    # cps "<0.5 2> [1 0.75] <2 1>"\n\n-- Reset things before moving on..\nhush\n\nsetcps 0.6\n\n-- \'fast\' and \'slow\' functions\n\n-- You can speed up / slow down an individual\n-- pattern (or part of one) with "fast" and "slow"\n\n\nd1 $ slow 2 $ n "0 2 [3 5] [4 7]" # sound "cpu"\n\nd1 $ fast 2 $ n "0 2 [3 5] [4 7]" # sound "cpu"\n\n-- You can also pattern this speed factor:\nd1 $ slow "0.5 1" $ n "0 2 [3 5] [4 7]" # sound "cpu"\n\nd1 $ slow "0.5 <1 2>" $ n "0 2 [3 5] [4 7]" # sound "cpu"\n\n-- When patterning time in this way, you\'re switching\n-- between different versions of the pattern, running\n-- at different speeds.\n\n-- We\'ve already learned enough to create patterns with a\n-- lot of variety in them, by mixing together several simple\n-- manipulations\nd1 $ slow "0.5 <1 2>" $\n  n "{0 2 [3 5] [4 <7 6>], 0*2 3*3 0}" # sound "cpu"\n  # squiz "<8 1 2>"\n\n-- Note that the \'speed\' effect changes the rate of playback\n-- for each sample, but doesn\'t change the overall speed of the\n-- pattern\nd1 $ slow "0.5 <1 2>" $\n    n "{0 2 [3 5] [4 <7 6>], 0*2 3*3 0}" # sound "cpu"\n    # squiz "<8 1 2>"\n    # speed 2\n\n-- I find things always sound better if you speed them up a little.\n-- Your experience may vary :)\nsetcps 0.7\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-2-lesson-2-manipulating-time-with-setcps-cps-patterns-and-fast-slow-functions/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-3-combining-patterns-with-arithmetic"},"Lesson 3: combining patterns with arithmetic"),(0,o.kt)(s._,{id:"qdfXTQJqUGE",mdxType:"YouTube"}),(0,o.kt)("p",null,"Here's another video as promised. To tell the truth, I'm super tired at the moment, so despite a couple of takes the video ended up a bit \"non-linear\", with an explanation of the ",(0,o.kt)("inlineCode",{parentName:"p"},"hurry")," function dropped in the middle of an exploration of the different ways of combining control patterns of the same type."),(0,o.kt)("p",null,"Here's a worksheet which should hopefully help get your head around this. Reference material with diagrams to follow soon:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Ok, so what happens when we specify a \'control\' pattern (like e.g. n,\n-- sound, speed, or squiz) more than once?\n\n-- Lets start with the handy \'numbers\' sounds:\nd1 $ n "0 1 ~ 2" # sound "numbers"\n\n-- lets put than \'n\' again, but with a different number:\nd1 $ n "0 1 ~ 2" # sound "numbers" # n "4"\n\n-- So.. you can hear that we still have the rhythmic structure from\n-- the left, but all the values have been replaced with the one on the\n-- right. That\'s what `#` does!\n\n-- lets make that right hand pattern more complicated:\nd1 $ n "0 1 ~ 2" # sound "numbers" # n "4 5"\n\n-- Now the 0 and 1 have been replaced with the 4, and the 2 has been\n-- replace with the 5.\n\n-- This is because tidal matches them up for you, based on where they\n-- are in the cycle. The 0 and 1 start inside the first half, so are\n-- replaced with \'4\'. The 2 starts inside the second half, so is\n-- replace by \'5\'.\n\n-- # is actually shorthand, for \'|>\'. There\'s a whole family of these:\n\n-- |> is structure from the left, values from the right\n-- <| is values from the left, structure from the right\n-- |< is structure from the left, values from the left\n-- >| is structure from the right, values from the right\n-- |<| is values from the right, structure from both sides\n-- |>| is values from the left, structure from both sides\n\n-- < points to where the values come from, and | goes on the side where the\n-- rhythmic structure comes from.\n\n-- Everything from the left:\nd1 $ n "0 1 2 3" # sound "numbers" |< n "4 5"\n\n-- Everything from the right:\nd1 $ n "0 1 2 3" # sound "numbers" >| n "4 5"\n\n-- Rhythmic structure from left, values from the right:\nd1 $ n "0 1 2 3" # sound "numbers" |> n "4 5"\n\n-- Values from the left, rhythmic structure from right:\nd1 $ n "0 1 2 3" # sound "numbers" <| n "4 5"\n\n-- Values from the left, rhythmic structure from both sides:\nd1 $ n "0 1 2 3" # sound "numbers" |<| n "4 5"\n\n-- The above use of |<| sounds the same as |<, because the rhythmic\n-- structures line up.\n\n-- This changes\nd1 $ n "0 1 2" # sound "numbers" |>| n "4 5"\n\n-- Some gotchas!\n\n-- Even though you are taking everything from one side, something\n-- still has to match up on the other side..\n-- So this makes no sound:\nd1 $ n "~" # sound "numbers" >| n "4 5"\n\n-- Only the \'4\' sounds here:\nd1 $ n "0 ~" # sound "numbers" >| n "4 5"\n\n-- Most of the time you\'ll be fine forgetting all this, and just using\n-- |> , and its alias # .\n\n-- However, there are other things you can do!\n\n-- Instead of taking values from one side, you can add the values together, by\n-- using \'+\' instead of \'>\' or \'<\'.\n\n-- This:\nd1 $ n "0 1 2 3" # sound "numbers" |+ n "4 5"\n\n-- adds up to:\nd1 $ n "4 5 7 8" # sound "numbers"\n\n-- This:\nd1 $ n "0 1 2 3" # sound "numbers" +| n "4 5"\n\n-- adds up to:\nd1 $ n "4 7" # sound "numbers"\n\n-- This is because the rhythm comes from the right, from the "4 5", and\n-- so we start from that. The start of 4 matches with 0, and the start\n-- of 5 matches with 2, and adding them up, we end up with 4+0=4, and\n-- 5+2 = 7.\n\n-- This all gets complicated, especially when you work with patterns\n-- with different numbers of steps..\n\nd1 $ n "0 1 2 3" # sound "numbers" |+ n "4 5 6"\n\n-- But don\'t worry too much. You just have to say what you want to\n-- add together, let Tidal worry about working it out for you!\n\n-- Ok that\'s enough numbers, lets put this into action with some\n-- interesting patterns.\n\n-- Here\'s one adding together \'n\' patterns, using |+| to take\n-- structure from both sides. On the right hand side, it uses the < >\n-- mininotation syntax to pick a different subsequence per cycle.\n-- The result is an interesting, longer form pattern:\n\nd1 $ n "0 1 2 [3 5]" # sound "cpu"\n  |+| n "<[4 5 3 2] [5 4 3] [6 5]>"\n  # squiz 2\n\n-- I just added a bit of squiz there to make it sound nice.\n\n-- Here\'s a simpler example, cycling between three 12 note octaves, one per cycle:\nd1 $ n "7 5 [2 7] 0" # sound "superpiano"\n  |+ n "<-12 0 12>"\n\n-- It\'s actually possible to apply these to patterns of numbers\n-- _before_ they become control patterns, like this:\nd1 $ n ("7 5 [2 7] 0" |+ "<-12 0 12>") # sound "superpiano"\n\n-- You have to use parenthesis to make sure the two patterns are added\n-- together, before being passed to the \'n\'.\n\n-- To be clear, this is a pattern of numbers:\n-- "7 5 [2 7] 0"\n\n-- This is a control pattern, because \'n\' turns numbers into synthesiser\n-- control patterns:\n-- n "7 5 [2 7] 0"\n\n-- This all works for effects too:\nd1 $ n "0(5,8) [4 1]" # sound "drum"\n  # squiz "0 2 5"\n  |+ squiz "<0 2 3>"\n\n-- Or again, you can add the number patterns, rather than the control\n-- patterns. This is the same:\nd1 $ n "0(5,8) [4 1]" # sound "drum"\n  # squiz ("0 2 5" |+ "<0 2 3>")\n\n-- See which you prefer to do!\n\n-- \'saw\' is a pattern that slowly moves from 0 to 1 over a cycle. Here\n-- I\'m slowing it down so it lasts 4 cycles, slowing increasing the\n-- speed over that time:\nd1 $ n "[0 4 2] [4 1] 3 [2 0] 3 [3 1] 4 4" # sound "cpu"\n  # squiz 3\n  # speed "1 [2 3] 3"\n  |+ speed (slow 4 saw)\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-2-lesson-3-combining-patterns-with-arithmetic-plus-the-hurry-function/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"week-3"},"Week 3"),(0,o.kt)("h3",{id:"lesson-1-exploring-every-meaning-of-"},'Lesson 1: exploring "every", meaning of "$"'),(0,o.kt)(s._,{id:"2I74QEdXzBY",mdxType:"YouTube"}),(0,o.kt)("p",null,"Before getting on to working with longer samples, here's something about the every function. It's a nice clear example of how functions work, and gives us the opportunity to start to get a feel for how parenthesis and ",(0,o.kt)("inlineCode",{parentName:"p"},"$")," works. I also go through how to add an effect as a function."),(0,o.kt)("p",null,"I had a lot of problems with corrupted subtitle files which I won't go into.. and only after editing the subtitles noticed that my friend the vertical grey oblong decided to join me in the video. They're not really in the way so I decided not to reshoot it all, hope they don't get too distracting!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"\n-- every\n\n-- 'every' is one of a family of Tidal functions, that takes another\n-- function as one of its inputs.\n\n-- Let's say we had a simple pattern like this:\nd1 $ sound \"bd sd ~ cp\"\n\n-- ... and we wanted to speed it up like this:\nd1 $ fast 2 $ sound \"bd sd ~ cp\"\n\n-- ... but only one cycle out of three.\n\n-- Here's how we'd use 'every' to do that:\nd1 $ every 3 (fast 2) $ sound \"bd sd ~ cp\"\n\n-- You can read this as \"every 3rd cycle, make 'sound \"bd sd ~ cp\"',\n-- go faster by a factor of two.\"\n\n-- We'll take this apart to work out why we sometimes use (), and\n-- sometimes '$' later. First, lets look at more, practical examples\n-- of using 'every'.\n\n-- We can use every with any function that takes single pattern as\n-- input (and returns a transformed version as output). For example,\n-- we can use 'hurry' instead of fast:\nd1 $ every 3 (hurry 2) $ sound \"bd sd [~ bd] [cp bd*2]\"\n\n-- Or use 'rev':\nd1 $ every 3 (rev) $ sound \"bd sd [~ bd] [cp bd*2]\"\n\n-- Because 'rev' is a single word, we don't actually need to put it in\n-- parenthesis:\nd1 $ every 3 rev $ sound \"bd sd [~ bd] [cp bd*2]\"\n\n-- Here's a trick with using effects as functions..\n-- Lets look at this:\nd1 $ sound \"bd sd [~ bd] [cp bd*2]\"\n   # squiz \"5\"\n\n-- We can treat the '# speed 5' bit as a function. If you think about\n-- it, it does something to a pattern, just like 'fast 2' does.\n\n-- So.. does this work?\nd1 $ every 3 (# squiz 5) $ sound \"bd sd [~ bd] [cp bd*2]\"\n\n-- Yes it does!\n\n-- You can also add more than one 'every' manipulation, giving them\n-- different periods for their first input, to create longer form\n-- variety:\nd1 $ every 3 (# squiz 5) $ sound \"bd sd [~ bd] [cp bd*2]\"\n\nd1 $ every 2 (hurry 2) $ every 3 (# squiz 5) $ sound \"bd sd [~ bd] [cp bd*2]\"\n\n-- keep going..\nd1 $ every 4 rev $ every 2 (hurry 2) $ every 3 (# squiz 5)\n   $ sound \"bd sd [~ bd] [cp bd*2]\"\n\n-- In Tidal, the pattern that a function is manipulating is generally\n-- its final input, which makes it easy to 'chain together' functions\n-- like this.\n\n-- Ok as promised, lets go back to our original, simple example:\nd1 $ every 3 (fast 2) $ sound \"bd sd ~ cp\"\n\n-- Lets go through the three 'inputs' (also sometimes called\n-- 'parameters' or 'arguments') for every.\n\n-- [a] 3 - how often a function is applied\n-- [b] fast 2 - the function that is applied\n-- [c] sound \"bd sd ~ cp\" - the pattern that it's applied to.\n\n-- Looking again at this pattern, you can see that the inputs are\n-- given in three different ways:\nd1 $ every 3 (fast 2) $ sound \"bd sd ~ cp\"\n\n-- '3' is just on its own. It's a single number so tidal has no\n-- problem knowing it's a single input.\n\n-- 'fast 2' is in parenthesis '(fast 2)'. Then the word 'fast' and\n-- number '2' are grouped together into a function, _before_ being\n-- passed to 'every' as its second input.\n\n-- 'sound \"bd sd ~ cp\"' has $ in front. We *could* have done this\n-- instead:\nd1 $ every 3 (fast 2) (sound \"bd sd ~ cp\")\n\n-- That works fine, but '$' does the same kind of job. It passes\n-- what's on its left, to the function on its right, as a single\n-- parameter. '$' has really low priority, which means everything on\n-- its right is worked out first before being passed to the left.\nd1 $ every 3 (fast 2) $ sound \"bd sd ~ cp\"\n\n-- This saves you from having to match up ( and ) around a function's\n-- final input. It doesn't work with anything other than the final\n-- input, so unfortunately this _doesn't_ work\n\nd1 $ every 3 $ fast 2 $ sound \"bd sd ~ cp\"\n\n-- The above would work out 'fast 2 $ sound \"bd sd ~ cp\"' first, and\n-- would then try to pass that to 'every' as its second parameter,\n-- which doesn't make sense to tidal, so it returns an error.\n\n-- Note that when Tidal makes an error, if there was already a\n-- pattern running, it will keep that going. If you're live coding\n-- in front of an audience, you probably don't want an error to\n-- result in silence!\n")),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-3-lesson-1-exploring-the-every-function-including-tackling-the-meaning-of/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-2-cut-vs-legato"},"Lesson 2: cut VS legato"),(0,o.kt)(s._,{id:"dQPmE1WaD1k",mdxType:"YouTube"}),(0,o.kt)("p",null,"Here's the first of three videos sharing techniques for dealing with longer samples, this time looking at the ",(0,o.kt)("inlineCode",{parentName:"p"},"cut")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"legato")," control patterns, and the difference between them. Here's a couple of examples to play with. Note what happens to the ",(0,o.kt)("inlineCode",{parentName:"p"},"bev")," sample when you ",(0,o.kt)("inlineCode",{parentName:"p"},"hush")," and there's nothing to ",(0,o.kt)("inlineCode",{parentName:"p"},"cut")," it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ jux rev $ speed "<1 0.5 0.75>(<3 5>,8)" # sound "bev" # cut 1\n  # room 0.4 # sz 0.9 # gain 1.3\n\nd2 $ jux rev $ sound "sax(3,8)" # legato 1 # n 3\n  # note "<[9 7] 5 [9 12]>" # djf 0.7 # sz 0.4 # room 0.4\n')),(0,o.kt)("h2",{id:"always-remember-to-check-the-forum-page-for-the-lesson-as-there-is-a-lot-of-additional-information-there"},"Always remember to check the ",(0,o.kt)("a",{parentName:"h2",href:"https://club.tidalcycles.org/t/week-3-lesson-2-cut-vs-legato/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("h3",{id:"lesson-3-slice-and-splice"},"Lesson 3: slice and splice"),(0,o.kt)(s._,{id:"hKhPdO0RKDQ",mdxType:"YouTube"}),(0,o.kt)("p",null,"Lets look at a way of 'beat slicing' looping samples, using ",(0,o.kt)("inlineCode",{parentName:"p"},"slice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"splice"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'setcps 0.6\n\n-- Hear it straight\nd1 $ splice 8 "0 1 2 3 4 5 6 7" $ sound "break:4"\n\n-- Now with a more messed-up pattern\nd1 $ splice 8 "6 1 [2 3] ~ 4 1 6*2 7" $ sound "break:4"\n\n-- Try changing the cps to hear it at different speeds\n\n-- Try manipulating the pattern of slices\nd1 $ splice 8 (fast "1 [0.5 0.75]" "6 1 [2 3] ~ 4 1 6*2 7")\n   $ sound "break:4"\n\n-- Now try all the above with \'slice\' instead of \'splice\'.\n-- Slice _doesn\'t_ do the pitching up/down thing to splice the\n-- sound to the step.\n\n-- Here I put six slices from a loop originally in 4/4, to create\n-- a 3/4 waltz\nd1 $ splice 8 ("0 1 2 3 4 5") $ sound "break:4" # gain 1.1\nd2 $ sound "kick snare*2 clap:4" # speed 2\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-3-lesson-3-slice-and-splice/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-4-chop-and-striate"},"Lesson 4: chop and striate"),(0,o.kt)(s._,{id:"A199q_kMhb0",mdxType:"YouTube"}),(0,o.kt)("p",null,"Continuing on from Week 3 lesson 3, let's round off our week of work with longer samples, to look at a different way of 'beat slicing', using ",(0,o.kt)("inlineCode",{parentName:"p"},"chop")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"striate"),". Here is the worksheet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Let\'s take a nice break:\nonce $ sound "break:8"\n\n-- We can use \'begin\' and \'end\' to only play part of the sound, in this\n-- case the final quarter of it:\nd1 $ sound "break:8*4" # begin 0.75 # end 1\n\n-- We can also use \'unit "c"\' to change the behaviour of \'speed\' so it\n-- changes the playback speed to match the cps\nd1 $ sound "break:8" # speed 1 # unit "c" # begin 0.75 # end 1\n\n-- Lets play four of those to fill the cycle\nd1 $ sound "break:8*4" # speed 1 # unit "c" # begin 0.75 # end 1\n\n-- Then play with the cps to hear it change, fitting the cps perfectly\nsetcps 0.8\n\n-- Normally, I wouldn\'t use \'unit\', \'begin\' and \'end\' by hand. Instead\n-- I\'d use splice / slice from the previous lesson, or \'chop\' to cut\n-- a sound into bits, and set the length of the loop in cycles with\n-- \'loopAt\'\nd1 $ loopAt 2 $ chop 4 $ sound "break:8"\n\n-- The above sounds pretty continuous, but it is chopped into four parts.\n-- We can hear that by reversing the chopped up parts:\nd1 $ loopAt 2 $ rev $ chop 4 $ sound "break:8"\n\n-- If we slow the pattern we can hear each part separately:\nd1 $ slow 2 $ loopAt 2 $ chop 4 $ sound "break:8"\n\n-- Here\'s a different sample:\nd1 $ slow 2 $ loopAt 2 $ chop 4 $ sound "break:9"\n\n-- Now what happens if we put both breaks in the sequence?\nd1 $ slow 2 $ loopAt 2 $ chop 4 $ sound "break:8 break:9"\n\n-- With \'chop\', it will play all the parts of break:8, followed by\n-- all the parts of \'break:9\'.\n\n-- If we swap \'chop\' for its friend \'striate\', then parts from the\n-- two breaks are instead interlaced:\nd1 $ slow 2 $ loopAt 2 $ striate 4 $ sound "break:8 break:9"\n\n-- Play with that striate value for fun:\nd1 $ slow 2 $ loopAt 2 $ striate 32 $ sound "break:8 break:9"\n\n-- If you use the *same* loop multiple times with striate, it kind\n-- of stretches it:\nd1 $ slow 4 $ loopAt 1 $ striate 4 $ sound "break:1*4"\n\n-- Here\'s what that normally sounds like:\nonce $ sound "break:1"\n\n-- \'bev\' is an even longer sample..\nd1 $ loopAt 16 $ striate 32 $ sound "bev"\n\nd1 $ slow 4 $ jux rev $ loopAt 16 $ striate 128 $ sound "bev*4"\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-3-lesson-4-chop-and-striate/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("h2",{id:"week-4"},"Week 4"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-1-continous-patterns-and-random-functions"},"Lesson 1: continous patterns and random functions"),(0,o.kt)(s._,{id:"ZVQ-YPblUXA",mdxType:"YouTube"}),(0,o.kt)("p",null,"Ok, lets have a look at some continuous functions! This is quite a large topic (hence the longer video, partly also because I got sidetracked playing with binary patterns) but will help for getting stuck into randomness later in the week. This video is basically all about waveforms (apart from that binary sidetrack)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- \'Continuous functions\' provide different kinds of waveforms.\n-- There\'s a nice graphic showing sine, square, triangle and sawtooth\n-- waves here: https://en.wikipedia.org/wiki/Waveform\n\n-- Here\'s what the sine waveform sounds like applied to sample playback\n-- speed:\nd1 $ sound "bd*32" # speed sine\n\n-- and to panning:\nd1 $ sound "bd*32" # pan sine\n\n-- and to waveshape distortion (gets loud):\nd1 $ sound "bd*32" # shape sine\n\n-- You can manipulate continuous patterns just like other kinds of\n-- patterns, for example slowing down:\nd1 $ sound "bd*32" # shape (slow 2 sine)\n\n-- The waveforms all move between 0 and 1. So at its lowest point, sine\n-- will be 0, and at its highest point it will be 1. Having a value\n-- near 0 can be problematic with \'speed\', as you can end up with\n-- sounds played very slowly that take a long time to complete.\n\n-- To get around this you can add to the sine:\nd1 $ sound "bd*32" # speed (sine + 0.5)\n\n-- Or use the \'range\' function:\nd1 $ sound "bd*32" # speed (range 0.5 1.5 sine)\n\n-- Lets listen to triangle, sawtooth and square waves:\nd1 $ sound "bd*32" # speed (range 0.5 1.5 tri)\n\nd1 $ sound "bd*32" # speed (range 0.5 1.5 saw)\n\nd1 $ sound "bd*32" # speed (range 0.5 1.5 square)\n\n-- What happens if you put the continuous pattern on the left?\n-- Remember that with \'#\', the rhythmic structure comes from the\n-- left. Try this:\nd1 $ speed (range 0.5 1.5 sine) # sound "bd"\n\n-- Silence! Why\'s that?\n-- It\'s because continuous functions don\'t actually contain any\n-- events. They have values which continually change, without\n-- triggering anything.\n\n-- If we want to trigger events in a continuous pattern, we have\n-- to explicitly sample values from it. One way to do that is with\n-- the \'segment\' function:\nd1 $ speed (segment 32 $ range 0.5 2.5 sine) # sound "bd"\n\n-- The above samples 32 values per cycle, generating discrete\n-- events from them.\n\n-- Another way to do this is with \'binary\' or \'boolean\' patterns,\n-- using the \'struct\' function:\nd1 $ speed (struct "t(3,8)" $ slow 2 $ range 0.5 2.5 sine)\n  # sound "bd"\n\n-- \'t\' stands for \'true\'. So that euclidean rhythm is used to sample\n-- events from the continuous sine function. We\'ll return to\n-- binary patterns in another video.\n\n-- You can also add or multiply continous patterns together:\nd1 $ sound "bd*32" # speed (range 0.5 2.5 (sine + (slow 2 saw)))\n\nd1 $ sound "bd*32" # speed (range 0.5 2.5 (sine * (slow 2 saw)))\n\n-- I slowed the \'saw\' down in the above patterns, so you end\n-- up with a sine wave that rises in pitch over two cycles.\n\n-- In Tidal, random functions are also often continous.\n-- For example, rand works like sine, saw etc, but returns random\n-- values:\nd1 $ sound "bd(5,8)" # speed (range 1 3 rand)\n\n-- Perlin is similar, but returns \'perlin noise\'. In Tidal, this\n-- means that the pattern smoothly transitions between random values,\n-- every cycle:\nd1 $ sound "bd(5,8)" # speed (range 1 3 perlin)\n\n-- Lets try that with some reverb:\nd1 $ sound "bd(7,16)"\n   # room 0.7\n   # sz (range 0.4 1 $ slow 4 perlin)\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-4-lesson-1-continuous-patterns-sine-square-tri-saw-and-random-functions/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-2-random-marathon-part-i"},"Lesson 2: random marathon (part I)"),(0,o.kt)(s._,{id:"7Hzc-28ergY",mdxType:"YouTube"}),(0,o.kt)("p",null,"Continuing from our look at waveforms including random ones, here's the first of a two-parter looking at a wide range of random functions.. Starting with a bit of armchair philosophising about the nature of randomness in algorithmic music."),(0,o.kt)("p",null,"I made these videos before the worksheet. I've decided that I should really do this the other way around, for a more organised video, so might reshoot it at some point. As ever, let me know what you think! I think I go through things a bit too fast, and at this point am starting to freely mix in techniques we've looked at in earlier lessons which you might have already forgotten about, so please (virtually) stick your hand up if you'd like me to go through anything again, from this or in any other lesson. You'd be doing everyone a service!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Let\'s start with a look at the \'rand\' waveform that we\n-- met in the last lesson:\n\nd1 $ n "1*8" # sound "drum"\n  # speed (range 1 8 rand)\n\n-- The \'resetCycles\' resets the cycle count to \'0\', as\n-- though you\'d just started Tidal:\nresetCycles\n\n-- If you run resetCycles while the above pattern is running,\n-- you\'ll notice that you also reset the random stream. You\n-- will always get the same \'random\' numbers every time you\n-- start or reset Tidal.\n\n-- You can apply rand to any numerical effect, but might have\n-- to adjust the range. For example with the low pass filter\n-- that cuts out frequencies higher than the given amount:\nd1 $ sound "drum:5(5,8,<0 4>)"\n   # lpf (range 200 8000 rand)\n   # lpq 0.2\n\n-- \'irand\' is similar to \'rand\', but creates integers, or\n-- whole numbers, from 0 up to (and not including) the given\n-- number. This is particularly useful for the \'n\' and\n-- \'note\' controls:\n\nd1 $ sound "rash(5,8)" # n (irand 32)\n   # room 0.3 # sz 0.5\n\n-- There are a couple of ways of doing random things in the\n-- mininotation too. To randomly choose between subsequences,\n-- put a | (vertical bar) between them\n\n-- The second step in this sequence is a randomly pick from\n-- four subsequences:\nd1 $ n "0 [0|1*3|2*8|3 4 5] 2 3" # sound "cpu"\n   # speed 1.5\n\n-- Also, ? randomly \'drops\' an event. In the following the\n-- second step has a 50-50 chance of being played.\nd1 $ sound "kick clap? kick snare"\n  # delay 0.3 # delaytime (1/3) # delayfb 0.8 # speed 1.5\n\n-- (I\'ve added some echo delay to make it sound cool. Delay is the\n-- amount of sound to be delayed, delaytime is the length of the\n-- echo, delayfb is the feedback of the delay into itself)\n\n-- You can adjust the probability of ? working with a decimal\n-- (floating point) number. For example, to have an 80% chance\n-- of dropping that clap (and therefore 20% chance of playing\n-- it)\nd1 $ sound "kick clap?0.8 kick snare"\n  # speed 1.5\n\n-- If you apply ? to a subsequence, it\'ll work individually\n-- on each value in the subsequence\nd1 $ sound "kick [clap:4 off clap:5]? kick snare"\n  # speed 1.5\n\nd1 $ sound "bd*8? clap:4"\n\n-- Ok, onward to functions, starting with scramble. scramble\n-- takes a number, which is the number of parts to equally\n-- divide a pattern into. It\'ll then play those parts at\n-- random.\nd1 $ scramble 4 $ n "0 1 2 3 4 5 6 7" # sound "arpy"\n   # room 0.3 # sz 0.8\n\n-- The above is divided into four parts, and there are\n-- eight events in them, so they are played in pairs. This\n-- means that 0 is always followed by 1, 2 is always followed\n-- by 3, and so on.\n\n-- shuffle takes the same parameters as scramble, and sounds\n-- very similar. Can you hear the difference?\nd1 $ shuffle 4 $ n "0 1 2 3 4 5 6 7" # sound "arpy"\n  # room 0.3 # sz 0.8\n\n-- Whereas scramble picks part at random, shuffle plays the\n-- parts in random order. The difference is that with shuffle,\n-- every cycle, you\'ll hear each part exactly once. With\n-- scramble, there\'s a (small) chance that you\'ll hear only\n-- one part, played four times.\n\n\n-- You can maybe hear this better if you play a clap at the\n-- same time, to mark the start of the cycle. Then you can\n-- hear that parts aren\'t repeating within the cycle.\nd1 $ shuffle 4 $ n "0 1 2 3 4 5 6 7" # sound "arpy"\n  # room 0.3 # sz 0.8\n\nd2 $ sound "clap"\n\n-- The "choose" function is for when you want to pick between\n-- single values. It produces a continuous stream, with no\n-- structure, so the following won\'t produce any events:\nd1 $ sound (choose ["bd", "arpy", "snare"])\n\n-- You\'ll need to provide some structure, with a function like\n-- \'segment\', which in this case picks 8 values per cycle:\nd1 $ sound (segment 8 $ choose ["bd", "arpy", "snare"])\n\n-- Or \'struct\', which picks values according to a binary pattern:\nd1 $ sound (struct "t t ~ t" $ choose ["bd", "arpy", "kick"])\n\nd1 $ sound (struct "t(5,8)" $ choose ["bd", "arpy", "kick"])\n\n-- Or by combining it with a pattern that *does* have structure:\nd1 $ squiz "0*2 4 2 5 0 6*2 4 7"\n  # sound (choose ["bd", "arpy", "kick"])\n\n-- Another \'gotcha\' - the parameters to choose are a list of values,\n-- *not*, patterns, so you can\'t normally use mininotation there.\n\n-- This *won\'t* work.\nd1 $ squiz "0*2 4 2 5 0 6*2 4 7"\n  # sound (choose ["bd*5", "arpy*2", "kick clap"])\n\n-- I\'ll try to fix this in a future version of tidal! There is a\n-- workaround, which is to use the \'innerJoin\' function. Then you\n-- can choose between patterns:\nd1 $ squiz "0*2 4 2 5 0 6*2 4 7"\n  # sound (innerJoin $ choose ["bd*5", "arpy*2", "kick clap"])\n\n-- You can use choose with any parameter.\n\n-- For example:\nd1 $ sound "clap:4(3,8)"\n  # speed (choose [2,5,0.5])\n\n-- The following example is a bit different to the above, because\n-- a new value is chosen only once per cycle:\nd1 $ sound "clap:4(3,8)"\n  # speed "[2|5|0.5]"\n\n-- You could get the same behaviour from choose with \'segment\'ing it\n-- by a cycle:\nd1 $ sound "clap:4(3,8)"\n  # speed (segment 1 $ choose [2,5,0.5])\n\n-- The \'wchoose\' function is like \'choose\', but you can give\n-- a \'weighting\' for each possibility. So something with a weighting\n-- of \'4\' would be twice as likely to be chosen as one with a weighting\n-- of \'2\', for example:\nd1 $ sound "clap*4" # speed (wchoose [(2, 4), (-2, 2)])\n\n-- The above claps will play either with a speed of \'2\' , or \'-2\'.\n-- You can hear that negative speeds cause sounds to play backwards!\n-- \'2\' has a weighting of \'4\', and \'-2\' has a weighting of\n-- \'2\', so is half as likely to play.\n\n-- Here I\'ve weighted things so you get a lot of kicks, occasional\n-- claps, and rarer snares:\nd1 $ squiz "1 4*8 8*2 0*3"\n  # sound (wchoose [("bd", 8), ("snare", 0.5), ("clap", 1)])\n\n-- Ok one more thing! In Tidal, randomness is "deterministic". At\n-- a certain cycle time, you will always get the same number. We\n-- saw this at the start of the lesson, with resetCycles. That\n-- resets the cycle count, as if you just started Tidal up. You\n-- can then hear that the \'random\' numbers are the same.\n\n-- This can result in unexpected results.\n-- Listen to this:\nd1 $ sound "clap*2" # speed (range 0.1 2 rand) # pan rand\n\n-- You can hear that on the left speaker, the \'speed\' of the\n-- sound is always low, and when it pans to the right, it\'s\n-- always high. Strange! This is because the same \'random\'\n-- number stream is used for both the speed and the pan, so\n-- they get the same numbers, and seem to interact.\n\n-- This can be nice! But if you don\'t want this effect, you can\n-- avoid it by manipulating the timeline of one of the random\n-- patterns. For example:\nd1 $ sound "clap*2" # speed (range 0.1 2 rand)\n  # pan (slow 1.001 rand)\n\n-- I only slowed that \'rand\' down by a tiny amount, but that\'s\n-- enough to end up with totally different numbers.. So now\n-- you\'re as likely to get lower speeds on the left as on the right.\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-4-lesson-2-random-marathon-rand-irand-mininotation-randomness-scramble-shuffle-choose-more/"},"forum page for the lesson"),", as there is a lot of additional information there."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"lesson-3-random-marathon-part-ii"},"Lesson 3: random marathon (part II)"),(0,o.kt)(s._,{id:"nRMWkKTjsRk",mdxType:"YouTube"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'-- randcat\n\n-- randcat is a variant of cat, which we haven\'t actually looked at\n-- yet, so lets start with that..\nd1 $ sound (cat ["kick snare:4 [~ kick] snare:5", "kick snare:4 . hc(5,8)"])\n\n-- So you can hear that cat \'concatenates\' patterns - it plays them\n-- one after the other, in order.\n\n-- randcat on the other hand, plays them in random order:\nd1 $ sound (randcat ["kick snare:4 [~ kick] snare:5", "kick snare:4 . hc(5,8)"])\n\n-- You can give it as many patterns to choose from as you like:\nd1 $ sound (randcat ["kick snare:4 [~ kick] snare:5",\n                     "kick snare:4 . hc(5,8)",\n                     "snare:3(9,16)"\n                    ]\n           )\n\n-- You can use it to randomise control patterns other than sound,\n-- e.g. the vowel effect:\nd1 $ vowel (randcat ["a e*2 i o", "e o u", "o*8"])\n   # sound ("kick snare:4 clap:4")\n\n\n-- wrandcat is to randcat, what wchoose is to choose. That is,\n-- You can give the choices relative probabilities:\nd1 $ sound (wrandcat [("bd sn:4(3,8)", 1),\n                      ("arpy clap", 0.5),\n                      ("cpu(5,8)", 0.25)\n                     ]\n           )\n\n-- stripe is a weird one. Lets start with a rhythm with the\n-- cpu2 samples:\nd1 $ n "0 4*2 ~ 4 2 4 5 ~" # sound "cpu2"\n  # squiz 2\n\n-- \'fast 2\' would squeeze that into two cycles:\nd1 $ fast 2 $ n "0 4*2 ~ 4 2 4 5 ~" # sound "cpu2"\n  # squiz 2\n\n-- stripe is similar, but the cycles are random durations,\n-- although still fit the cycle:\nd1 $ stripe 2 $ n "0 4*2 ~ 4 2 4 5 ~" # sound "cpu2"\n  # squiz 2\n\n-- It sounds random, but against a straight clap, you can hear\n-- every other repetition still perfectly aligns with the cycle:\nd2 $ sound "clap:4"\n\n-- degrade - remember the ? mininotation modifier in the previous\n-- video? It drops events at random:\nd1 $ sound "bd*8?"\n\n-- Degrade is a function that does the same:\nd1 $ degrade $ sound "bd*8"\n\n-- Just like this:\nd1 $ sound "bd*8?0.6"\n\n-- You can specify a probability, by using \'degradeBy\'. E.g.,\n-- to give each event a 60% chance of being \'lost\':\nd1 $ degradeBy 0.6 $ sound "bd*8"\n\n-- \'sometimes\' applies a function to a pattern, but only sometimes.\n-- lets hurry this rhythm, but only sometimes:\nd1 $ sometimes (hurry 2) $ n "0 ~ 3 1 5 2 ~ 5" # sound "cpu"\n\n-- Here\'s the original, which sounds pretty boring in comparison:\nd1 $ n "0 ~ 3 1 5 2 ~ 5" # sound "cpu"\n\n-- You can use it to apply effects as well.\nd1 $ sometimes (# crush 4) $ n "0 ~ 3 1 5 2 ~ 5" # sound "cpu"\n\n-- There\'s also a \'sometimesBy\' variant, for specifying a\n-- probability:\nd1 $ sometimesBy 0.3 (# crush 4) $ n "0 ~ 3 1 5 2 ~ 5" # sound "cpu"\n\n-- There\'s some aliases for different probabilities:\n\n{-\nsometimes = sometimesBy 0.5\noften = sometimesBy 0.75\nrarely = sometimesBy 0.25\nalmostNever = sometimesBy 0.1\nalmostAlways = sometimesBy 0.9\n-}\n\n-- So you can do this:\nd1 $ rarely (# crush 4) $ n "0 ~ 3 1 5 2 ~ 5" # sound "cpu"\n\n-- somecycles is similar to sometimes, but works on whole\n-- cycles at a time, rather than individual events:\nd1 $ somecycles (hurry 2) $ n "0 ~ 3 1 5 2 ~ 5" # sound "cpu"\n  # speed 1.5\n\n-- Again, there\'s a \'somecyclesBy\' variant for being specific\n-- about that probability. To apply the squiz, 90% of the time:\nd1 $ somecyclesBy 0.9 (# squiz 4) $ n "0 ~ 3 1 5 2 ~ 5" # sound "cpu"\n  # speed 1.5\n\n-- randslice is a bit like \'slice\' that we met a couple of lessons\n-- ago:\nd1 $ slice 4 "0 1 2 3" $ sound "break:8"\n\n-- Instead of taking a pattern of slices though, it picks slices at\n-- random. So to play a random quarter of this break:\nd1 $ randslice 4 $ sound "break:8"\n\n-- We can use \'loopAt\' to fit them to a cycle, just like we saw before\n-- with \'chop\' and \'striate\':\nd1 $ loopAt 1 $ randslice 4 $ sound "break:8*4"\n\n-- We could also do the same sort of thing by giving \'slice\' or \'splice\'\n-- a random pattern:\nd1 $ splice 4 (segment 4 $ irand 4) $ sound "break:8"\n')),(0,o.kt)("p",null,"Always remember to check the ",(0,o.kt)("a",{parentName:"p",href:"https://club.tidalcycles.org/t/week-4-lesson-3-random-marathon-part-2-randcat-stripe-degrade-sometimes-somecycles-randslice-more/"},"forum page for the lesson"),", as there is a lot of additional information there."))}p.isMDXComponent=!0},2878:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/alex-8191e26af824a64c8130550fbc585b10.png"}}]);